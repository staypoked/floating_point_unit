circuit Adder :
  module Adder :
    input clock : Clock
    input reset : UInt<1>
    input io_a : UInt<32>
    input io_b : UInt<32>
    output io_c : UInt<32>

    node _T = bits(reset, 0, 0) @[Adder.scala 12:23]
    node _T_1 = eq(_T, UInt<1>("h0")) @[Adder.scala 12:23]
    node _T_2 = bits(io_a, 31, 31) @[Adder.scala 14:28]
    reg a_sign : UInt<1>, clock with :
      reset => (UInt<1>("h0"), a_sign) @[Adder.scala 14:23]
    node _T_3 = bits(io_a, 30, 24) @[Adder.scala 15:27]
    reg a_exp : UInt<7>, clock with :
      reset => (UInt<1>("h0"), a_exp) @[Adder.scala 15:22]
    node _T_4 = bits(io_a, 23, 0) @[Adder.scala 16:28]
    reg a_mant : UInt<24>, clock with :
      reset => (UInt<1>("h0"), a_mant) @[Adder.scala 16:23]
    node _T_5 = bits(io_b, 31, 31) @[Adder.scala 19:28]
    reg b_sign : UInt<1>, clock with :
      reset => (UInt<1>("h0"), b_sign) @[Adder.scala 19:23]
    node _T_6 = bits(io_b, 30, 24) @[Adder.scala 20:27]
    reg b_exp : UInt<7>, clock with :
      reset => (UInt<1>("h0"), b_exp) @[Adder.scala 20:22]
    node _T_7 = bits(io_b, 23, 0) @[Adder.scala 21:28]
    reg b_mant : UInt<24>, clock with :
      reset => (UInt<1>("h0"), b_mant) @[Adder.scala 21:23]
    node _T_8 = bits(reset, 0, 0) @[Adder.scala 24:23]
    node _T_9 = eq(_T_8, UInt<1>("h0")) @[Adder.scala 24:23]
    node _T_10 = bits(reset, 0, 0) @[Adder.scala 25:23]
    node _T_11 = eq(_T_10, UInt<1>("h0")) @[Adder.scala 25:23]
    reg tmp_sign : UInt<1>, clock with :
      reset => (UInt<1>("h0"), tmp_sign) @[Adder.scala 29:25]
    reg tmp_exp : UInt<7>, clock with :
      reset => (UInt<1>("h0"), tmp_exp) @[Adder.scala 30:24]
    reg tmp_mant : UInt<24>, clock with :
      reset => (UInt<1>("h0"), tmp_mant) @[Adder.scala 31:25]
    reg check_underflow : UInt<1>, clock with :
      reset => (UInt<1>("h0"), check_underflow) @[Adder.scala 33:32]
    reg check_overflow : UInt<1>, clock with :
      reset => (UInt<1>("h0"), check_overflow) @[Adder.scala 34:31]
    node _T_12 = gt(a_exp, b_exp) @[Adder.scala 45:14]
    node _T_13 = sub(a_exp, b_exp) @[Adder.scala 47:27]
    node _T_14 = tail(_T_13, 1) @[Adder.scala 47:27]
    node _T_15 = dshr(b_mant, _T_14) @[Adder.scala 49:23]
    node _T_16 = lt(a_exp, b_exp) @[Adder.scala 50:20]
    node _T_17 = sub(b_exp, a_exp) @[Adder.scala 51:27]
    node _T_18 = tail(_T_17, 1) @[Adder.scala 51:27]
    node _T_19 = dshr(a_mant, _T_18) @[Adder.scala 53:23]
    node _GEN_0 = mux(_T_16, b_exp, _T_3) @[Adder.scala 50:29 Adder.scala 52:11 Adder.scala 15:22]
    node _GEN_1 = mux(_T_16, _T_19, _T_4) @[Adder.scala 50:29 Adder.scala 53:12 Adder.scala 16:23]
    node _GEN_2 = mux(_T_12, a_exp, _T_6) @[Adder.scala 45:22 Adder.scala 48:11 Adder.scala 20:22]
    node _GEN_3 = mux(_T_12, _T_15, _T_7) @[Adder.scala 45:22 Adder.scala 49:12 Adder.scala 21:23]
    node _GEN_4 = mux(_T_12, _T_3, _GEN_0) @[Adder.scala 45:22 Adder.scala 15:22]
    node _GEN_5 = mux(_T_12, _T_4, _GEN_1) @[Adder.scala 45:22 Adder.scala 16:23]
    node _T_20 = bits(reset, 0, 0) @[Adder.scala 56:23]
    node _T_21 = eq(_T_20, UInt<1>("h0")) @[Adder.scala 56:23]
    node _T_22 = bits(reset, 0, 0) @[Adder.scala 57:23]
    node _T_23 = eq(_T_22, UInt<1>("h0")) @[Adder.scala 57:23]
    node _T_24 = bits(reset, 0, 0) @[Adder.scala 58:23]
    node _T_25 = eq(_T_24, UInt<1>("h0")) @[Adder.scala 58:23]
    reg opcode : UInt<2>, clock with :
      reset => (UInt<1>("h0"), opcode) @[Adder.scala 63:23]
    node _T_26 = eq(a_sign, UInt<1>("h0")) @[Adder.scala 65:8]
    node _T_27 = eq(b_sign, UInt<1>("h0")) @[Adder.scala 66:10]
    node _T_28 = add(a_mant, b_mant) @[Adder.scala 69:26]
    node _T_29 = tail(_T_28, 1) @[Adder.scala 69:26]
    node _T_30 = bits(reset, 0, 0) @[Adder.scala 70:27]
    node _T_31 = eq(_T_30, UInt<1>("h0")) @[Adder.scala 70:27]
    node _T_32 = geq(a_mant, b_mant) @[Adder.scala 75:19]
    node _GEN_6 = mux(_T_32, a_sign, b_sign) @[Adder.scala 75:30 Adder.scala 76:18 Adder.scala 78:18]
    node _T_33 = sub(a_mant, b_mant) @[Adder.scala 80:26]
    node _T_34 = tail(_T_33, 1) @[Adder.scala 80:26]
    node _GEN_7 = mux(_T_27, UInt<1>("h0"), _GEN_6) @[Adder.scala 66:19 Adder.scala 68:16]
    node _GEN_8 = mux(_T_27, _T_29, _T_34) @[Adder.scala 66:19 Adder.scala 69:16 Adder.scala 80:16]
    node _GEN_9 = mux(_T_27, UInt<1>("h1"), UInt<2>("h2")) @[Adder.scala 66:19 Adder.scala 71:14 Adder.scala 81:14]
    node _T_35 = eq(b_sign, UInt<1>("h0")) @[Adder.scala 84:11]
    node _T_36 = gt(a_mant, b_mant) @[Adder.scala 86:20]
    node _GEN_10 = mux(_T_36, a_sign, b_sign) @[Adder.scala 86:29 Adder.scala 87:18 Adder.scala 89:18]
    node _T_37 = sub(b_mant, a_mant) @[Adder.scala 91:26]
    node _T_38 = tail(_T_37, 1) @[Adder.scala 91:26]
    node _T_39 = add(a_mant, b_mant) @[Adder.scala 97:26]
    node _T_40 = tail(_T_39, 1) @[Adder.scala 97:26]
    node _GEN_11 = mux(_T_35, _GEN_10, a_sign) @[Adder.scala 84:19 Adder.scala 96:16]
    node _GEN_12 = mux(_T_35, _T_38, _T_40) @[Adder.scala 84:19 Adder.scala 91:16 Adder.scala 97:16]
    node _GEN_13 = mux(_T_35, UInt<2>("h2"), UInt<1>("h1")) @[Adder.scala 84:19 Adder.scala 92:14 Adder.scala 98:14]
    node _GEN_14 = mux(_T_26, _GEN_7, _GEN_11) @[Adder.scala 65:17]
    node _GEN_15 = mux(_T_26, _GEN_8, _GEN_12) @[Adder.scala 65:17]
    node _GEN_16 = mux(_T_26, _GEN_9, _GEN_13) @[Adder.scala 65:17]
    node _T_41 = bits(reset, 0, 0) @[Adder.scala 102:23]
    node _T_42 = eq(_T_41, UInt<1>("h0")) @[Adder.scala 102:23]
    node _T_43 = eq(UInt<1>("h1"), opcode) @[Conditional.scala 37:30]
    node _T_44 = gt(a_mant, b_mant) @[Adder.scala 107:20]
    node _T_45 = lt(tmp_mant, a_mant) @[Adder.scala 108:24]
    node _GEN_17 = mux(_T_45, UInt<1>("h1"), UInt<1>("h0")) @[Adder.scala 108:33 Adder.scala 109:26 Adder.scala 34:31]
    node _T_46 = lt(tmp_mant, b_mant) @[Adder.scala 112:24]
    node _GEN_18 = mux(_T_46, UInt<1>("h1"), UInt<1>("h0")) @[Adder.scala 112:33 Adder.scala 113:26 Adder.scala 34:31]
    node _GEN_19 = mux(_T_44, _GEN_17, _GEN_18) @[Adder.scala 107:29]
    node _T_47 = eq(UInt<2>("h2"), opcode) @[Conditional.scala 37:30]
    node _T_48 = gt(a_mant, b_mant) @[Adder.scala 119:20]
    node _T_49 = gt(tmp_mant, a_mant) @[Adder.scala 120:24]
    node _GEN_20 = mux(_T_49, UInt<1>("h1"), UInt<1>("h0")) @[Adder.scala 120:33 Adder.scala 121:27 Adder.scala 33:32]
    node _T_50 = gt(tmp_mant, b_mant) @[Adder.scala 124:24]
    node _GEN_21 = mux(_T_50, UInt<1>("h1"), UInt<1>("h0")) @[Adder.scala 124:33 Adder.scala 125:27 Adder.scala 33:32]
    node _GEN_22 = mux(_T_48, _GEN_20, _GEN_21) @[Adder.scala 119:29]
    node _GEN_23 = mux(_T_47, _GEN_22, UInt<1>("h0")) @[Conditional.scala 39:67 Adder.scala 33:32]
    node _GEN_24 = mux(_T_43, _GEN_19, UInt<1>("h0")) @[Conditional.scala 40:58 Adder.scala 34:31]
    node _GEN_25 = mux(_T_43, UInt<1>("h0"), _GEN_23) @[Conditional.scala 40:58 Adder.scala 33:32]
    node hi = cat(tmp_sign, tmp_exp) @[Cat.scala 30:58]
    node _T_51 = cat(hi, tmp_mant) @[Cat.scala 30:58]
    node _T_52 = bits(reset, 0, 0) @[Adder.scala 133:23]
    node _T_53 = eq(_T_52, UInt<1>("h0")) @[Adder.scala 133:23]
    node hi_1 = cat(tmp_sign, tmp_exp) @[Cat.scala 30:58]
    node _T_54 = cat(hi_1, tmp_mant) @[Cat.scala 30:58]
    io_c <= _T_54 @[Adder.scala 134:8]
    a_sign <= mux(reset, UInt<1>("h0"), _T_2) @[Adder.scala 14:23 Adder.scala 14:23 Adder.scala 14:23]
    a_exp <= mux(reset, UInt<1>("h0"), _GEN_4) @[Adder.scala 15:22 Adder.scala 15:22]
    a_mant <= mux(reset, UInt<1>("h0"), _GEN_5) @[Adder.scala 16:23 Adder.scala 16:23]
    b_sign <= mux(reset, UInt<1>("h0"), _T_5) @[Adder.scala 19:23 Adder.scala 19:23 Adder.scala 19:23]
    b_exp <= mux(reset, UInt<1>("h0"), _GEN_2) @[Adder.scala 20:22 Adder.scala 20:22]
    b_mant <= mux(reset, UInt<1>("h0"), _GEN_3) @[Adder.scala 21:23 Adder.scala 21:23]
    tmp_sign <= _GEN_14
    tmp_exp <= a_exp @[Adder.scala 62:11]
    tmp_mant <= _GEN_15
    check_underflow <= _GEN_25
    check_overflow <= _GEN_24
    opcode <= _GEN_16
    printf(clock, and(and(UInt<1>("h1"), _T_1), UInt<1>("h1")), "a_val: %b, b_val: %b\n", io_a, io_b) @[Adder.scala 12:23]
    printf(clock, and(and(UInt<1>("h1"), _T_9), UInt<1>("h1")), "a_sign: %d, a_exp: %b, a_mant: %b\n", a_sign, a_exp, a_mant) @[Adder.scala 24:23]
    printf(clock, and(and(UInt<1>("h1"), _T_11), UInt<1>("h1")), "b_sign: %d, b_exp: %b, b_mant: %b\n", b_sign, b_exp, b_mant) @[Adder.scala 25:23]
    printf(clock, and(and(UInt<1>("h1"), _T_21), UInt<1>("h1")), "a_sign: %d, a_exp: %d, a_mant: %d\n", a_sign, a_exp, a_mant) @[Adder.scala 56:23]
    printf(clock, and(and(UInt<1>("h1"), _T_23), UInt<1>("h1")), "b_sign: %d, b_exp: %d, b_mant: %d\n", b_sign, b_exp, b_mant) @[Adder.scala 57:23]
    printf(clock, and(and(UInt<1>("h1"), _T_25), UInt<1>("h1")), "tmp_sign: %d, tmp_exp: %d, tmp_mant: %d\n", tmp_sign, tmp_exp, tmp_mant) @[Adder.scala 58:23]
    printf(clock, and(and(and(and(UInt<1>("h1"), _T_26), _T_27), _T_31), UInt<1>("h1")), "tmp_sign: %d, tmp_exp: %d, tmp_mant: %d\n", tmp_sign, tmp_exp, tmp_mant) @[Adder.scala 70:27]
    printf(clock, and(and(UInt<1>("h1"), _T_42), UInt<1>("h1")), "tmp_sign: %d, tmp_exp: %d, tmp_mant: %d\n", tmp_sign, tmp_exp, tmp_mant) @[Adder.scala 102:23]
    printf(clock, and(and(UInt<1>("h1"), _T_53), UInt<1>("h1")), "io_c: %b\n", _T_51) @[Adder.scala 133:23]