;buildInfoPackage: chisel3, version: 3.4.1, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit Adder : 
  module Adder : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<32>, flip b : UInt<32>, c : UInt<32>}
    
    node _T = bits(reset, 0, 0) @[Adder.scala 12:23]
    node _T_1 = eq(_T, UInt<1>("h00")) @[Adder.scala 12:23]
    when _T_1 : @[Adder.scala 12:23]
      printf(clock, UInt<1>(1), "a_val: %b, b_val: %b\n", io.a, io.b) @[Adder.scala 12:23]
      skip @[Adder.scala 12:23]
    node _T_2 = bits(io.a, 31, 31) @[Adder.scala 14:28]
    reg a_sign : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Adder.scala 14:23]
    a_sign <= _T_2 @[Adder.scala 14:23]
    node _T_3 = bits(io.a, 30, 23) @[Adder.scala 15:27]
    reg a_exp : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[Adder.scala 15:22]
    a_exp <= _T_3 @[Adder.scala 15:22]
    node _T_4 = bits(io.a, 22, 0) @[Adder.scala 16:28]
    reg a_mant : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[Adder.scala 16:23]
    a_mant <= _T_4 @[Adder.scala 16:23]
    node _T_5 = bits(io.b, 31, 31) @[Adder.scala 19:28]
    reg b_sign : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Adder.scala 19:23]
    b_sign <= _T_5 @[Adder.scala 19:23]
    node _T_6 = bits(io.b, 30, 23) @[Adder.scala 20:27]
    reg b_exp : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[Adder.scala 20:22]
    b_exp <= _T_6 @[Adder.scala 20:22]
    node _T_7 = bits(io.b, 22, 0) @[Adder.scala 21:28]
    reg b_mant : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[Adder.scala 21:23]
    b_mant <= _T_7 @[Adder.scala 21:23]
    node _T_8 = bits(reset, 0, 0) @[Adder.scala 24:23]
    node _T_9 = eq(_T_8, UInt<1>("h00")) @[Adder.scala 24:23]
    when _T_9 : @[Adder.scala 24:23]
      printf(clock, UInt<1>(1), "a_sign: %d, a_exp: %b, a_mant: %b\n", a_sign, a_exp, a_mant) @[Adder.scala 24:23]
      skip @[Adder.scala 24:23]
    node _T_10 = bits(reset, 0, 0) @[Adder.scala 25:23]
    node _T_11 = eq(_T_10, UInt<1>("h00")) @[Adder.scala 25:23]
    when _T_11 : @[Adder.scala 25:23]
      printf(clock, UInt<1>(1), "b_sign: %d, b_exp: %b, b_mant: %b\n", b_sign, b_exp, b_mant) @[Adder.scala 25:23]
      skip @[Adder.scala 25:23]
    reg tmp_sign : UInt, clock @[Adder.scala 29:25]
    tmp_sign <= UInt<1>("h00") @[Adder.scala 29:25]
    reg tmp_exp : UInt, clock @[Adder.scala 30:24]
    tmp_exp <= UInt<8>("h00") @[Adder.scala 30:24]
    reg tmp_mant : UInt, clock @[Adder.scala 31:25]
    tmp_mant <= UInt<23>("h00") @[Adder.scala 31:25]
    reg check_underflow : UInt<1>, clock @[Adder.scala 33:32]
    check_underflow <= UInt<1>("h00") @[Adder.scala 33:32]
    reg check_overflow : UInt<1>, clock @[Adder.scala 34:31]
    check_overflow <= UInt<1>("h00") @[Adder.scala 34:31]
    node _T_12 = gt(a_exp, b_exp) @[Adder.scala 42:14]
    when _T_12 : @[Adder.scala 42:22]
      node _T_13 = sub(a_exp, b_exp) @[Adder.scala 45:29]
      node _T_14 = tail(_T_13, 1) @[Adder.scala 45:29]
      b_exp <= a_exp @[Adder.scala 46:11]
      node _T_15 = dshr(b_mant, _T_14) @[Adder.scala 47:23]
      b_mant <= _T_15 @[Adder.scala 47:12]
      skip @[Adder.scala 42:22]
    else : @[Adder.scala 48:29]
      node _T_16 = lt(a_exp, b_exp) @[Adder.scala 48:20]
      when _T_16 : @[Adder.scala 48:29]
        node _T_17 = sub(b_exp, a_exp) @[Adder.scala 49:29]
        node _T_18 = tail(_T_17, 1) @[Adder.scala 49:29]
        a_exp <= b_exp @[Adder.scala 50:11]
        node _T_19 = dshr(a_mant, _T_18) @[Adder.scala 51:23]
        a_mant <= _T_19 @[Adder.scala 51:12]
        skip @[Adder.scala 48:29]
    node _T_20 = bits(reset, 0, 0) @[Adder.scala 54:23]
    node _T_21 = eq(_T_20, UInt<1>("h00")) @[Adder.scala 54:23]
    when _T_21 : @[Adder.scala 54:23]
      printf(clock, UInt<1>(1), "a_sign: %d, a_exp: %d, a_mant: %d\n", a_sign, a_exp, a_mant) @[Adder.scala 54:23]
      skip @[Adder.scala 54:23]
    node _T_22 = bits(reset, 0, 0) @[Adder.scala 55:23]
    node _T_23 = eq(_T_22, UInt<1>("h00")) @[Adder.scala 55:23]
    when _T_23 : @[Adder.scala 55:23]
      printf(clock, UInt<1>(1), "b_sign: %d, b_exp: %d, b_mant: %d\n", b_sign, b_exp, b_mant) @[Adder.scala 55:23]
      skip @[Adder.scala 55:23]
    node _T_24 = bits(reset, 0, 0) @[Adder.scala 56:23]
    node _T_25 = eq(_T_24, UInt<1>("h00")) @[Adder.scala 56:23]
    when _T_25 : @[Adder.scala 56:23]
      printf(clock, UInt<1>(1), "tmp_sign: %d, tmp_exp: %d, tmp_mant: %d\n", tmp_sign, tmp_exp, tmp_mant) @[Adder.scala 56:23]
      skip @[Adder.scala 56:23]
    node _T_26 = eq(a_exp, b_exp) @[Adder.scala 60:15]
    when _T_26 : @[Adder.scala 60:26]
      tmp_exp <= a_exp @[Adder.scala 61:13]
      reg REG : UInt, clock @[Adder.scala 62:25]
      REG <= UInt<1>("h00") @[Adder.scala 62:25]
      node _T_27 = eq(a_sign, UInt<1>("h00")) @[Adder.scala 64:10]
      when _T_27 : @[Adder.scala 64:19]
        node _T_28 = eq(b_sign, UInt<1>("h00")) @[Adder.scala 65:12]
        when _T_28 : @[Adder.scala 65:21]
          tmp_sign <= UInt<1>("h00") @[Adder.scala 67:18]
          node _T_29 = add(a_mant, b_mant) @[Adder.scala 68:28]
          node _T_30 = tail(_T_29, 1) @[Adder.scala 68:28]
          tmp_mant <= _T_30 @[Adder.scala 68:18]
          node _T_31 = bits(reset, 0, 0) @[Adder.scala 69:29]
          node _T_32 = eq(_T_31, UInt<1>("h00")) @[Adder.scala 69:29]
          when _T_32 : @[Adder.scala 69:29]
            printf(clock, UInt<1>(1), "tmp_sign: %d, tmp_exp: %d, tmp_mant: %d\n", tmp_sign, tmp_exp, tmp_mant) @[Adder.scala 69:29]
            skip @[Adder.scala 69:29]
          REG <= UInt<1>("h01") @[Adder.scala 70:16]
          skip @[Adder.scala 65:21]
        else : @[Adder.scala 72:19]
          node _T_33 = geq(a_mant, b_mant) @[Adder.scala 74:21]
          when _T_33 : @[Adder.scala 74:32]
            tmp_sign <= a_sign @[Adder.scala 75:20]
            skip @[Adder.scala 74:32]
          else : @[Adder.scala 76:21]
            tmp_sign <= b_sign @[Adder.scala 77:20]
            skip @[Adder.scala 76:21]
          node _T_34 = sub(a_mant, b_mant) @[Adder.scala 79:28]
          node _T_35 = tail(_T_34, 1) @[Adder.scala 79:28]
          tmp_mant <= _T_35 @[Adder.scala 79:18]
          REG <= UInt<2>("h02") @[Adder.scala 80:16]
          skip @[Adder.scala 72:19]
        skip @[Adder.scala 64:19]
      else : @[Adder.scala 82:17]
        node _T_36 = eq(b_sign, UInt<1>("h00")) @[Adder.scala 83:12]
        when _T_36 : @[Adder.scala 83:21]
          node _T_37 = gt(a_mant, b_mant) @[Adder.scala 85:21]
          when _T_37 : @[Adder.scala 85:31]
            tmp_sign <= a_sign @[Adder.scala 86:20]
            skip @[Adder.scala 85:31]
          else : @[Adder.scala 87:21]
            tmp_sign <= b_sign @[Adder.scala 88:20]
            skip @[Adder.scala 87:21]
          node _T_38 = sub(b_mant, a_mant) @[Adder.scala 90:28]
          node _T_39 = tail(_T_38, 1) @[Adder.scala 90:28]
          tmp_mant <= _T_39 @[Adder.scala 90:18]
          REG <= UInt<2>("h02") @[Adder.scala 91:16]
          skip @[Adder.scala 83:21]
        else : @[Adder.scala 93:19]
          tmp_sign <= a_sign @[Adder.scala 95:18]
          node _T_40 = add(a_mant, b_mant) @[Adder.scala 96:28]
          node _T_41 = tail(_T_40, 1) @[Adder.scala 96:28]
          tmp_mant <= _T_41 @[Adder.scala 96:18]
          REG <= UInt<1>("h01") @[Adder.scala 97:16]
          skip @[Adder.scala 93:19]
        skip @[Adder.scala 82:17]
      node _T_42 = bits(reset, 0, 0) @[Adder.scala 101:25]
      node _T_43 = eq(_T_42, UInt<1>("h00")) @[Adder.scala 101:25]
      when _T_43 : @[Adder.scala 101:25]
        printf(clock, UInt<1>(1), "tmp_sign: %d, tmp_exp: %d, tmp_mant: %d\n", tmp_sign, tmp_exp, tmp_mant) @[Adder.scala 101:25]
        skip @[Adder.scala 101:25]
      node _T_44 = eq(UInt<1>("h01"), REG) @[Conditional.scala 37:30]
      when _T_44 : @[Conditional.scala 40:58]
        node _T_45 = gt(a_mant, b_mant) @[Adder.scala 106:21]
        when _T_45 : @[Adder.scala 106:31]
          node _T_46 = lt(tmp_mant, a_mant) @[Adder.scala 107:25]
          when _T_46 : @[Adder.scala 107:35]
            check_overflow <= UInt<1>("h01") @[Adder.scala 108:28]
            skip @[Adder.scala 107:35]
          skip @[Adder.scala 106:31]
        else : @[Adder.scala 110:21]
          node _T_47 = lt(tmp_mant, b_mant) @[Adder.scala 111:25]
          when _T_47 : @[Adder.scala 111:35]
            check_overflow <= UInt<1>("h01") @[Adder.scala 112:28]
            skip @[Adder.scala 111:35]
          skip @[Adder.scala 110:21]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_48 = eq(UInt<2>("h02"), REG) @[Conditional.scala 37:30]
        when _T_48 : @[Conditional.scala 39:67]
          node _T_49 = gt(a_mant, b_mant) @[Adder.scala 118:21]
          when _T_49 : @[Adder.scala 118:31]
            node _T_50 = gt(tmp_mant, a_mant) @[Adder.scala 119:25]
            when _T_50 : @[Adder.scala 119:35]
              check_underflow <= UInt<1>("h01") @[Adder.scala 120:29]
              skip @[Adder.scala 119:35]
            skip @[Adder.scala 118:31]
          else : @[Adder.scala 122:21]
            node _T_51 = gt(tmp_mant, b_mant) @[Adder.scala 123:25]
            when _T_51 : @[Adder.scala 123:35]
              check_underflow <= UInt<1>("h01") @[Adder.scala 124:29]
              skip @[Adder.scala 123:35]
            skip @[Adder.scala 122:21]
          skip @[Conditional.scala 39:67]
      skip @[Adder.scala 60:26]
    node hi = cat(tmp_sign, tmp_exp) @[Cat.scala 30:58]
    node _T_52 = cat(hi, tmp_mant) @[Cat.scala 30:58]
    node _T_53 = bits(reset, 0, 0) @[Adder.scala 132:23]
    node _T_54 = eq(_T_53, UInt<1>("h00")) @[Adder.scala 132:23]
    when _T_54 : @[Adder.scala 132:23]
      printf(clock, UInt<1>(1), "io_c: %b\n", _T_52) @[Adder.scala 132:23]
      skip @[Adder.scala 132:23]
    node hi_1 = cat(tmp_sign, tmp_exp) @[Cat.scala 30:58]
    node _T_55 = cat(hi_1, tmp_mant) @[Cat.scala 30:58]
    io.c <= _T_55 @[Adder.scala 133:8]
    
