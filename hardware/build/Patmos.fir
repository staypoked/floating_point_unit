;buildInfoPackage: chisel3, version: 3.4.1, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit Patmos : 
  module MCacheCtrl : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip ena_in : UInt<1>, fetchEna : UInt<1>, ctrlrepl : {wEna : UInt<1>, wData : UInt<32>, wAddr : UInt<32>, wTag : UInt<1>, addrEven : UInt<11>, addrOdd : UInt<11>, instrStall : UInt<1>}, flip replctrl : {hit : UInt<1>}, flip femcache : {addrEven : UInt<32>, addrOdd : UInt<32>}, flip exmcache : {doCallRet : UInt<1>, callRetBase : UInt<32>, callRetAddr : UInt<32>}, ocp_port : {M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, DataValid : UInt<1>, DataByteEn : UInt<4>}, flip S : {Resp : UInt<2>, Data : UInt<32>, CmdAccept : UInt<1>, DataAccept : UInt<1>}}, illMem : UInt<1>, forceHit : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg stateReg : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[MCache.scala 293:21]
    wire addrEven : UInt<32> @[MCache.scala 295:22]
    addrEven is invalid @[MCache.scala 295:22]
    wire addrOdd : UInt<32> @[MCache.scala 296:21]
    addrOdd is invalid @[MCache.scala 296:21]
    wire wData : UInt<32> @[MCache.scala 297:19]
    wData is invalid @[MCache.scala 297:19]
    wire wTag : UInt<1> @[MCache.scala 298:18]
    wTag is invalid @[MCache.scala 298:18]
    wire wAddr : UInt<32> @[MCache.scala 299:19]
    wAddr is invalid @[MCache.scala 299:19]
    wire wEna : UInt<1> @[MCache.scala 300:18]
    wEna is invalid @[MCache.scala 300:18]
    reg ocpCmdReg : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[MCache.scala 302:22]
    reg ocpAddrReg : UInt<32>, clock @[MCache.scala 303:23]
    wire fetchEna : UInt<1> @[MCache.scala 304:22]
    fetchEna is invalid @[MCache.scala 304:22]
    reg transferSizeReg : UInt<11>, clock @[MCache.scala 305:28]
    reg fetchCntReg : UInt<11>, clock @[MCache.scala 306:24]
    reg burstCntReg : UInt<2>, clock @[MCache.scala 307:24]
    reg callRetBaseReg : UInt<32>, clock @[MCache.scala 309:27]
    wire callRetBaseNext : UInt<32> @[MCache.scala 310:39]
    callRetBaseNext is invalid @[MCache.scala 310:39]
    node _T = sub(callRetBaseReg, UInt<1>("h01")) @[MCache.scala 311:34]
    node msizeAddr = tail(_T, 1) @[MCache.scala 311:34]
    reg addrEvenReg : UInt, clock @[MCache.scala 312:24]
    reg addrOddReg : UInt, clock @[MCache.scala 313:23]
    reg ocpSlaveReg : {Resp : UInt<2>, Data : UInt<32>, CmdAccept : UInt<1>, DataAccept : UInt<1>}, clock @[MCache.scala 315:24]
    ocpSlaveReg <- io.ocp_port.S @[MCache.scala 315:24]
    addrEven <= addrEvenReg @[MCache.scala 318:12]
    addrOdd <= addrOddReg @[MCache.scala 319:11]
    wData <= UInt<1>("h00") @[MCache.scala 320:9]
    wTag <= UInt<1>("h00") @[MCache.scala 321:8]
    wEna <= UInt<1>("h00") @[MCache.scala 322:8]
    wAddr <= UInt<1>("h00") @[MCache.scala 323:9]
    fetchEna <= UInt<1>("h01") @[MCache.scala 324:12]
    callRetBaseNext <= callRetBaseReg @[MCache.scala 326:19]
    callRetBaseReg <= callRetBaseNext @[MCache.scala 327:18]
    node _T_1 = eq(io.ocp_port.S.CmdAccept, UInt<1>("h01")) @[MCache.scala 330:33]
    when _T_1 : @[MCache.scala 330:46]
      ocpCmdReg <= UInt<3>("h00") @[MCache.scala 331:15]
      skip @[MCache.scala 330:46]
    node _T_2 = cat(ocpAddrReg, UInt<2>("h00")) @[Cat.scala 30:58]
    io.ocp_port.M.Addr <= _T_2 @[MCache.scala 335:22]
    io.ocp_port.M.Cmd <= ocpCmdReg @[MCache.scala 336:21]
    io.ocp_port.M.Data <= UInt<1>("h00") @[MCache.scala 337:22]
    io.ocp_port.M.DataByteEn <= UInt<4>("h0f") @[MCache.scala 338:28]
    io.ocp_port.M.DataValid <= UInt<1>("h00") @[MCache.scala 339:27]
    when io.exmcache.doCallRet : @[MCache.scala 341:32]
      callRetBaseNext <= io.exmcache.callRetBase @[MCache.scala 342:21]
      addrEvenReg <= io.femcache.addrEven @[MCache.scala 343:17]
      addrOddReg <= io.femcache.addrOdd @[MCache.scala 344:16]
      skip @[MCache.scala 341:32]
    node _T_3 = eq(stateReg, UInt<3>("h00")) @[MCache.scala 348:18]
    when _T_3 : @[MCache.scala 348:33]
      node _T_4 = eq(io.replctrl.hit, UInt<1>("h01")) @[MCache.scala 349:26]
      when _T_4 : @[MCache.scala 349:39]
        addrEven <= io.femcache.addrEven @[MCache.scala 350:16]
        addrOdd <= io.femcache.addrOdd @[MCache.scala 351:15]
        skip @[MCache.scala 349:39]
      else : @[MCache.scala 354:16]
        burstCntReg <= UInt<1>("h00") @[MCache.scala 355:19]
        io.ocp_port.M.Cmd <= UInt<3>("h02") @[MCache.scala 358:25]
        node _T_5 = eq(io.ocp_port.S.CmdAccept, UInt<1>("h00")) @[MCache.scala 359:37]
        when _T_5 : @[MCache.scala 359:50]
          ocpCmdReg <= UInt<3>("h02") @[MCache.scala 360:19]
          skip @[MCache.scala 359:50]
        node hi = bits(msizeAddr, 31, 2) @[MCache.scala 362:42]
        node _T_6 = cat(hi, UInt<4>("h00")) @[Cat.scala 30:58]
        io.ocp_port.M.Addr <= _T_6 @[MCache.scala 362:26]
        node hi_hi = bits(msizeAddr, 31, 2) @[MCache.scala 364:34]
        node _hi_T = cat(hi_hi, UInt<2>("h00")) @[Cat.scala 30:58]
        ocpAddrReg <= _hi_T @[MCache.scala 364:18]
        stateReg <= UInt<3>("h01") @[MCache.scala 367:16]
        skip @[MCache.scala 354:16]
      skip @[MCache.scala 348:33]
    node _T_7 = eq(stateReg, UInt<3>("h01")) @[MCache.scala 371:18]
    when _T_7 : @[MCache.scala 371:33]
      fetchEna <= UInt<1>("h00") @[MCache.scala 372:14]
      node _T_8 = eq(ocpSlaveReg.Resp, UInt<2>("h01")) @[MCache.scala 373:28]
      when _T_8 : @[MCache.scala 373:45]
        node _T_9 = add(burstCntReg, UInt<1>("h01")) @[MCache.scala 374:34]
        node _T_10 = tail(_T_9, 1) @[MCache.scala 374:34]
        burstCntReg <= _T_10 @[MCache.scala 374:19]
        node _T_11 = bits(msizeAddr, 1, 0) @[MCache.scala 375:38]
        node _T_12 = eq(burstCntReg, _T_11) @[MCache.scala 375:25]
        when _T_12 : @[MCache.scala 375:66]
          node _T_13 = bits(ocpSlaveReg.Data, 13, 2) @[MCache.scala 376:36]
          node _T_14 = sub(_T_13, UInt<1>("h01")) @[MCache.scala 378:33]
          node _T_15 = tail(_T_14, 1) @[MCache.scala 378:33]
          transferSizeReg <= _T_15 @[MCache.scala 378:25]
          fetchCntReg <= UInt<1>("h00") @[MCache.scala 379:21]
          node _T_16 = eq(burstCntReg, UInt<2>("h03")) @[MCache.scala 380:27]
          when _T_16 : @[MCache.scala 380:55]
            io.ocp_port.M.Cmd <= UInt<3>("h02") @[MCache.scala 381:29]
            node _T_17 = eq(io.ocp_port.S.CmdAccept, UInt<1>("h00")) @[MCache.scala 382:41]
            when _T_17 : @[MCache.scala 382:54]
              ocpCmdReg <= UInt<3>("h02") @[MCache.scala 383:23]
              skip @[MCache.scala 382:54]
            node _T_18 = cat(callRetBaseReg, UInt<2>("h00")) @[Cat.scala 30:58]
            io.ocp_port.M.Addr <= _T_18 @[MCache.scala 385:30]
            ocpAddrReg <= callRetBaseReg @[MCache.scala 386:22]
            burstCntReg <= UInt<1>("h00") @[MCache.scala 387:23]
            skip @[MCache.scala 380:55]
          wTag <= UInt<1>("h01") @[MCache.scala 390:14]
          node _T_19 = bits(_T_13, 0, 0) @[MCache.scala 392:27]
          node _T_20 = add(_T_13, _T_19) @[MCache.scala 392:22]
          node _T_21 = tail(_T_20, 1) @[MCache.scala 392:22]
          wData <= _T_21 @[MCache.scala 392:15]
          wAddr <= callRetBaseReg @[MCache.scala 394:15]
          stateReg <= UInt<3>("h02") @[MCache.scala 395:18]
          skip @[MCache.scala 375:66]
        skip @[MCache.scala 373:45]
      skip @[MCache.scala 371:33]
    node _T_22 = eq(stateReg, UInt<3>("h02")) @[MCache.scala 401:18]
    when _T_22 : @[MCache.scala 401:37]
      fetchEna <= UInt<1>("h00") @[MCache.scala 402:14]
      node _T_23 = leq(fetchCntReg, transferSizeReg) @[MCache.scala 403:23]
      when _T_23 : @[MCache.scala 403:43]
        node _T_24 = eq(ocpSlaveReg.Resp, UInt<2>("h01")) @[MCache.scala 404:30]
        when _T_24 : @[MCache.scala 404:47]
          node _T_25 = add(fetchCntReg, UInt<1>("h01")) @[MCache.scala 405:36]
          node _T_26 = tail(_T_25, 1) @[MCache.scala 405:36]
          fetchCntReg <= _T_26 @[MCache.scala 405:21]
          node _T_27 = add(burstCntReg, UInt<1>("h01")) @[MCache.scala 406:36]
          node _T_28 = tail(_T_27, 1) @[MCache.scala 406:36]
          burstCntReg <= _T_28 @[MCache.scala 406:21]
          node _T_29 = lt(fetchCntReg, transferSizeReg) @[MCache.scala 407:26]
          when _T_29 : @[MCache.scala 407:45]
            node _T_30 = eq(burstCntReg, UInt<2>("h03")) @[MCache.scala 409:29]
            when _T_30 : @[MCache.scala 409:57]
              io.ocp_port.M.Cmd <= UInt<3>("h02") @[MCache.scala 410:31]
              node _T_31 = eq(io.ocp_port.S.CmdAccept, UInt<1>("h00")) @[MCache.scala 411:43]
              when _T_31 : @[MCache.scala 411:56]
                ocpCmdReg <= UInt<3>("h02") @[MCache.scala 412:25]
                skip @[MCache.scala 411:56]
              node _T_32 = add(callRetBaseReg, fetchCntReg) @[MCache.scala 414:54]
              node _T_33 = tail(_T_32, 1) @[MCache.scala 414:54]
              node _T_34 = add(_T_33, UInt<1>("h01")) @[MCache.scala 414:68]
              node hi_1 = tail(_T_34, 1) @[MCache.scala 414:68]
              node _T_35 = cat(hi_1, UInt<2>("h00")) @[Cat.scala 30:58]
              io.ocp_port.M.Addr <= _T_35 @[MCache.scala 414:32]
              node _hi_T_1 = add(callRetBaseReg, fetchCntReg) @[MCache.scala 415:42]
              node _hi_T_2 = tail(_hi_T_1, 1) @[MCache.scala 415:42]
              node _hi_T_3 = add(_hi_T_2, UInt<1>("h01")) @[MCache.scala 415:56]
              node _hi_T_4 = tail(_hi_T_3, 1) @[MCache.scala 415:56]
              ocpAddrReg <= _hi_T_4 @[MCache.scala 415:24]
              burstCntReg <= UInt<1>("h00") @[MCache.scala 416:25]
              skip @[MCache.scala 409:57]
            skip @[MCache.scala 407:45]
          else : @[MCache.scala 419:20]
            node _T_36 = eq(burstCntReg, UInt<2>("h03")) @[MCache.scala 421:29]
            when _T_36 : @[MCache.scala 421:57]
              fetchEna <= UInt<1>("h01") @[MCache.scala 422:22]
              addrEven <= io.femcache.addrEven @[MCache.scala 423:22]
              addrOdd <= io.femcache.addrOdd @[MCache.scala 424:21]
              stateReg <= UInt<3>("h00") @[MCache.scala 425:22]
              skip @[MCache.scala 421:57]
            skip @[MCache.scala 419:20]
          wData <= ocpSlaveReg.Data @[MCache.scala 429:15]
          wEna <= UInt<1>("h01") @[MCache.scala 430:14]
          skip @[MCache.scala 404:47]
        wAddr <= fetchCntReg @[MCache.scala 432:13]
        skip @[MCache.scala 403:43]
      else : @[MCache.scala 435:16]
        node _T_37 = eq(ocpSlaveReg.Resp, UInt<2>("h01")) @[MCache.scala 436:30]
        when _T_37 : @[MCache.scala 436:47]
          node _T_38 = add(burstCntReg, UInt<1>("h01")) @[MCache.scala 437:36]
          node _T_39 = tail(_T_38, 1) @[MCache.scala 437:36]
          burstCntReg <= _T_39 @[MCache.scala 437:21]
          skip @[MCache.scala 436:47]
        node _T_40 = eq(burstCntReg, UInt<2>("h03")) @[MCache.scala 439:25]
        when _T_40 : @[MCache.scala 439:53]
          fetchEna <= UInt<1>("h01") @[MCache.scala 440:18]
          addrEven <= io.femcache.addrEven @[MCache.scala 441:18]
          addrOdd <= io.femcache.addrOdd @[MCache.scala 442:17]
          stateReg <= UInt<3>("h00") @[MCache.scala 443:18]
          skip @[MCache.scala 439:53]
        skip @[MCache.scala 435:16]
      skip @[MCache.scala 401:37]
    io.illMem <= UInt<1>("h00") @[MCache.scala 449:13]
    io.forceHit <= UInt<1>("h00") @[MCache.scala 450:15]
    node _T_41 = eq(ocpSlaveReg.Resp, UInt<2>("h03")) @[MCache.scala 451:26]
    when _T_41 : @[MCache.scala 451:43]
      io.ocp_port.M.Cmd <= UInt<3>("h00") @[MCache.scala 452:23]
      ocpCmdReg <= UInt<3>("h00") @[MCache.scala 453:15]
      node _T_42 = add(burstCntReg, UInt<1>("h01")) @[MCache.scala 454:32]
      node _T_43 = tail(_T_42, 1) @[MCache.scala 454:32]
      burstCntReg <= _T_43 @[MCache.scala 454:17]
      stateReg <= UInt<3>("h03") @[MCache.scala 455:14]
      skip @[MCache.scala 451:43]
    node _T_44 = eq(stateReg, UInt<3>("h03")) @[MCache.scala 458:18]
    when _T_44 : @[MCache.scala 458:34]
      node _T_45 = neq(ocpSlaveReg.Resp, UInt<2>("h00")) @[MCache.scala 459:28]
      when _T_45 : @[MCache.scala 459:46]
        node _T_46 = add(burstCntReg, UInt<1>("h01")) @[MCache.scala 460:34]
        node _T_47 = tail(_T_46, 1) @[MCache.scala 460:34]
        burstCntReg <= _T_47 @[MCache.scala 460:19]
        skip @[MCache.scala 459:46]
      node _T_48 = eq(burstCntReg, UInt<2>("h03")) @[MCache.scala 462:23]
      when _T_48 : @[MCache.scala 462:51]
        io.illMem <= UInt<1>("h01") @[MCache.scala 463:17]
        io.forceHit <= UInt<1>("h01") @[MCache.scala 464:19]
        stateReg <= UInt<3>("h04") @[MCache.scala 465:16]
        skip @[MCache.scala 462:51]
      skip @[MCache.scala 458:34]
    node _T_49 = eq(stateReg, UInt<3>("h04")) @[MCache.scala 469:18]
    when _T_49 : @[MCache.scala 469:37]
      io.forceHit <= UInt<1>("h01") @[MCache.scala 470:19]
      stateReg <= UInt<3>("h05") @[MCache.scala 471:16]
      skip @[MCache.scala 469:37]
    node _T_50 = eq(stateReg, UInt<3>("h05")) @[MCache.scala 473:18]
    when _T_50 : @[MCache.scala 473:37]
      io.forceHit <= UInt<1>("h01") @[MCache.scala 474:19]
      stateReg <= UInt<3>("h06") @[MCache.scala 475:16]
      skip @[MCache.scala 473:37]
    node _T_51 = eq(stateReg, UInt<3>("h06")) @[MCache.scala 477:18]
    when _T_51 : @[MCache.scala 477:37]
      io.forceHit <= UInt<1>("h01") @[MCache.scala 478:19]
      stateReg <= UInt<3>("h00") @[MCache.scala 479:16]
      skip @[MCache.scala 477:37]
    io.ctrlrepl.addrEven <= addrEven @[MCache.scala 483:24]
    io.ctrlrepl.addrOdd <= addrOdd @[MCache.scala 484:23]
    io.ctrlrepl.wEna <= wEna @[MCache.scala 485:20]
    io.ctrlrepl.wData <= wData @[MCache.scala 486:21]
    io.ctrlrepl.wAddr <= wAddr @[MCache.scala 487:21]
    io.ctrlrepl.wTag <= wTag @[MCache.scala 488:20]
    node _T_52 = neq(stateReg, UInt<3>("h00")) @[MCache.scala 489:38]
    io.ctrlrepl.instrStall <= _T_52 @[MCache.scala 489:26]
    io.fetchEna <= fetchEna @[MCache.scala 491:15]
    
  module MCacheReplFifo : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip ena_in : UInt<1>, flip invalidate : UInt<1>, hitEna : UInt<1>, flip exmcache : {doCallRet : UInt<1>, callRetBase : UInt<32>, callRetAddr : UInt<32>}, mcachefe : {instrEven : UInt<32>, instrOdd : UInt<32>, base : UInt<32>, relBase : UInt<11>, relPc : UInt<12>, reloc : UInt<32>, memSel : UInt<2>}, flip ctrlrepl : {wEna : UInt<1>, wData : UInt<32>, wAddr : UInt<32>, wTag : UInt<1>, addrEven : UInt<11>, addrOdd : UInt<11>, instrStall : UInt<1>}, replctrl : {hit : UInt<1>}, memIn : {wEven : UInt<1>, wOdd : UInt<1>, wData : UInt<32>, wAddr : UInt<10>, addrEven : UInt<10>, addrOdd : UInt<10>}, flip memOut : {instrEven : UInt<32>, instrOdd : UInt<32>}, perf : {hit : UInt<1>, miss : UInt<1>}}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg REG : UInt<32>, clock @[MCache.scala 141:47]
    reg REG_1 : UInt<32>, clock @[MCache.scala 141:47]
    reg REG_2 : UInt<32>, clock @[MCache.scala 141:47]
    reg REG_3 : UInt<32>, clock @[MCache.scala 141:47]
    reg REG_4 : UInt<32>, clock @[MCache.scala 141:47]
    reg REG_5 : UInt<32>, clock @[MCache.scala 141:47]
    reg REG_6 : UInt<32>, clock @[MCache.scala 141:47]
    reg REG_7 : UInt<32>, clock @[MCache.scala 141:47]
    reg REG_8 : UInt<32>, clock @[MCache.scala 141:47]
    reg REG_9 : UInt<32>, clock @[MCache.scala 141:47]
    reg REG_10 : UInt<32>, clock @[MCache.scala 141:47]
    reg REG_11 : UInt<32>, clock @[MCache.scala 141:47]
    reg REG_12 : UInt<32>, clock @[MCache.scala 141:47]
    reg REG_13 : UInt<32>, clock @[MCache.scala 141:47]
    reg REG_14 : UInt<32>, clock @[MCache.scala 141:47]
    reg REG_15 : UInt<32>, clock @[MCache.scala 141:47]
    wire addrVec : UInt<32>[16] @[compatibility.scala 127:12]
    addrVec is invalid @[compatibility.scala 127:12]
    addrVec[0] <= REG @[compatibility.scala 127:12]
    addrVec[1] <= REG_1 @[compatibility.scala 127:12]
    addrVec[2] <= REG_2 @[compatibility.scala 127:12]
    addrVec[3] <= REG_3 @[compatibility.scala 127:12]
    addrVec[4] <= REG_4 @[compatibility.scala 127:12]
    addrVec[5] <= REG_5 @[compatibility.scala 127:12]
    addrVec[6] <= REG_6 @[compatibility.scala 127:12]
    addrVec[7] <= REG_7 @[compatibility.scala 127:12]
    addrVec[8] <= REG_8 @[compatibility.scala 127:12]
    addrVec[9] <= REG_9 @[compatibility.scala 127:12]
    addrVec[10] <= REG_10 @[compatibility.scala 127:12]
    addrVec[11] <= REG_11 @[compatibility.scala 127:12]
    addrVec[12] <= REG_12 @[compatibility.scala 127:12]
    addrVec[13] <= REG_13 @[compatibility.scala 127:12]
    addrVec[14] <= REG_14 @[compatibility.scala 127:12]
    addrVec[15] <= REG_15 @[compatibility.scala 127:12]
    reg REG_16 : UInt<12>, clock with : (reset => (reset, UInt<12>("h00"))) @[MCache.scala 142:47]
    reg REG_17 : UInt<12>, clock with : (reset => (reset, UInt<12>("h00"))) @[MCache.scala 142:47]
    reg REG_18 : UInt<12>, clock with : (reset => (reset, UInt<12>("h00"))) @[MCache.scala 142:47]
    reg REG_19 : UInt<12>, clock with : (reset => (reset, UInt<12>("h00"))) @[MCache.scala 142:47]
    reg REG_20 : UInt<12>, clock with : (reset => (reset, UInt<12>("h00"))) @[MCache.scala 142:47]
    reg REG_21 : UInt<12>, clock with : (reset => (reset, UInt<12>("h00"))) @[MCache.scala 142:47]
    reg REG_22 : UInt<12>, clock with : (reset => (reset, UInt<12>("h00"))) @[MCache.scala 142:47]
    reg REG_23 : UInt<12>, clock with : (reset => (reset, UInt<12>("h00"))) @[MCache.scala 142:47]
    reg REG_24 : UInt<12>, clock with : (reset => (reset, UInt<12>("h00"))) @[MCache.scala 142:47]
    reg REG_25 : UInt<12>, clock with : (reset => (reset, UInt<12>("h00"))) @[MCache.scala 142:47]
    reg REG_26 : UInt<12>, clock with : (reset => (reset, UInt<12>("h00"))) @[MCache.scala 142:47]
    reg REG_27 : UInt<12>, clock with : (reset => (reset, UInt<12>("h00"))) @[MCache.scala 142:47]
    reg REG_28 : UInt<12>, clock with : (reset => (reset, UInt<12>("h00"))) @[MCache.scala 142:47]
    reg REG_29 : UInt<12>, clock with : (reset => (reset, UInt<12>("h00"))) @[MCache.scala 142:47]
    reg REG_30 : UInt<12>, clock with : (reset => (reset, UInt<12>("h00"))) @[MCache.scala 142:47]
    reg REG_31 : UInt<12>, clock with : (reset => (reset, UInt<12>("h00"))) @[MCache.scala 142:47]
    wire sizeVec : UInt<12>[16] @[compatibility.scala 127:12]
    sizeVec is invalid @[compatibility.scala 127:12]
    sizeVec[0] <= REG_16 @[compatibility.scala 127:12]
    sizeVec[1] <= REG_17 @[compatibility.scala 127:12]
    sizeVec[2] <= REG_18 @[compatibility.scala 127:12]
    sizeVec[3] <= REG_19 @[compatibility.scala 127:12]
    sizeVec[4] <= REG_20 @[compatibility.scala 127:12]
    sizeVec[5] <= REG_21 @[compatibility.scala 127:12]
    sizeVec[6] <= REG_22 @[compatibility.scala 127:12]
    sizeVec[7] <= REG_23 @[compatibility.scala 127:12]
    sizeVec[8] <= REG_24 @[compatibility.scala 127:12]
    sizeVec[9] <= REG_25 @[compatibility.scala 127:12]
    sizeVec[10] <= REG_26 @[compatibility.scala 127:12]
    sizeVec[11] <= REG_27 @[compatibility.scala 127:12]
    sizeVec[12] <= REG_28 @[compatibility.scala 127:12]
    sizeVec[13] <= REG_29 @[compatibility.scala 127:12]
    sizeVec[14] <= REG_30 @[compatibility.scala 127:12]
    sizeVec[15] <= REG_31 @[compatibility.scala 127:12]
    reg REG_32 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MCache.scala 143:48]
    reg REG_33 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MCache.scala 143:48]
    reg REG_34 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MCache.scala 143:48]
    reg REG_35 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MCache.scala 143:48]
    reg REG_36 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MCache.scala 143:48]
    reg REG_37 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MCache.scala 143:48]
    reg REG_38 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MCache.scala 143:48]
    reg REG_39 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MCache.scala 143:48]
    reg REG_40 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MCache.scala 143:48]
    reg REG_41 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MCache.scala 143:48]
    reg REG_42 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MCache.scala 143:48]
    reg REG_43 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MCache.scala 143:48]
    reg REG_44 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MCache.scala 143:48]
    reg REG_45 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MCache.scala 143:48]
    reg REG_46 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MCache.scala 143:48]
    reg REG_47 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MCache.scala 143:48]
    wire validVec : UInt<1>[16] @[compatibility.scala 127:12]
    validVec is invalid @[compatibility.scala 127:12]
    validVec[0] <= REG_32 @[compatibility.scala 127:12]
    validVec[1] <= REG_33 @[compatibility.scala 127:12]
    validVec[2] <= REG_34 @[compatibility.scala 127:12]
    validVec[3] <= REG_35 @[compatibility.scala 127:12]
    validVec[4] <= REG_36 @[compatibility.scala 127:12]
    validVec[5] <= REG_37 @[compatibility.scala 127:12]
    validVec[6] <= REG_38 @[compatibility.scala 127:12]
    validVec[7] <= REG_39 @[compatibility.scala 127:12]
    validVec[8] <= REG_40 @[compatibility.scala 127:12]
    validVec[9] <= REG_41 @[compatibility.scala 127:12]
    validVec[10] <= REG_42 @[compatibility.scala 127:12]
    validVec[11] <= REG_43 @[compatibility.scala 127:12]
    validVec[12] <= REG_44 @[compatibility.scala 127:12]
    validVec[13] <= REG_45 @[compatibility.scala 127:12]
    validVec[14] <= REG_46 @[compatibility.scala 127:12]
    validVec[15] <= REG_47 @[compatibility.scala 127:12]
    reg REG_48 : UInt<11>, clock @[MCache.scala 144:46]
    reg REG_49 : UInt<11>, clock @[MCache.scala 144:46]
    reg REG_50 : UInt<11>, clock @[MCache.scala 144:46]
    reg REG_51 : UInt<11>, clock @[MCache.scala 144:46]
    reg REG_52 : UInt<11>, clock @[MCache.scala 144:46]
    reg REG_53 : UInt<11>, clock @[MCache.scala 144:46]
    reg REG_54 : UInt<11>, clock @[MCache.scala 144:46]
    reg REG_55 : UInt<11>, clock @[MCache.scala 144:46]
    reg REG_56 : UInt<11>, clock @[MCache.scala 144:46]
    reg REG_57 : UInt<11>, clock @[MCache.scala 144:46]
    reg REG_58 : UInt<11>, clock @[MCache.scala 144:46]
    reg REG_59 : UInt<11>, clock @[MCache.scala 144:46]
    reg REG_60 : UInt<11>, clock @[MCache.scala 144:46]
    reg REG_61 : UInt<11>, clock @[MCache.scala 144:46]
    reg REG_62 : UInt<11>, clock @[MCache.scala 144:46]
    reg REG_63 : UInt<11>, clock @[MCache.scala 144:46]
    wire posVec : UInt<11>[16] @[compatibility.scala 127:12]
    posVec is invalid @[compatibility.scala 127:12]
    posVec[0] <= REG_48 @[compatibility.scala 127:12]
    posVec[1] <= REG_49 @[compatibility.scala 127:12]
    posVec[2] <= REG_50 @[compatibility.scala 127:12]
    posVec[3] <= REG_51 @[compatibility.scala 127:12]
    posVec[4] <= REG_52 @[compatibility.scala 127:12]
    posVec[5] <= REG_53 @[compatibility.scala 127:12]
    posVec[6] <= REG_54 @[compatibility.scala 127:12]
    posVec[7] <= REG_55 @[compatibility.scala 127:12]
    posVec[8] <= REG_56 @[compatibility.scala 127:12]
    posVec[9] <= REG_57 @[compatibility.scala 127:12]
    posVec[10] <= REG_58 @[compatibility.scala 127:12]
    posVec[11] <= REG_59 @[compatibility.scala 127:12]
    posVec[12] <= REG_60 @[compatibility.scala 127:12]
    posVec[13] <= REG_61 @[compatibility.scala 127:12]
    posVec[14] <= REG_62 @[compatibility.scala 127:12]
    posVec[15] <= REG_63 @[compatibility.scala 127:12]
    reg nextIndexReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[MCache.scala 146:25]
    reg nextTagReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[MCache.scala 147:23]
    reg nextPosReg : UInt<11>, clock with : (reset => (reset, UInt<11>("h00"))) @[MCache.scala 148:23]
    reg freeSpaceReg : SInt<13>, clock with : (reset => (reset, asSInt(UInt<13>("h0800")))) @[MCache.scala 149:25]
    reg posReg : UInt<11>, clock with : (reset => (reset, UInt<11>("h00"))) @[MCache.scala 151:19]
    reg hitReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[MCache.scala 152:19]
    wire hitNext : UInt<1> @[MCache.scala 153:31]
    hitNext is invalid @[MCache.scala 153:31]
    reg wrPosReg : UInt<11>, clock with : (reset => (reset, UInt<11>("h00"))) @[MCache.scala 154:21]
    reg callRetBaseReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h01"))) @[MCache.scala 155:27]
    wire callRetBaseNext : UInt<32> @[MCache.scala 156:39]
    callRetBaseNext is invalid @[MCache.scala 156:39]
    reg callAddrReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h01"))) @[MCache.scala 157:24]
    reg selSpmReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MCache.scala 158:22]
    wire selSpmNext : UInt<1> @[MCache.scala 159:34]
    selSpmNext is invalid @[MCache.scala 159:34]
    reg selCacheReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MCache.scala 160:24]
    wire selCacheNext : UInt<1> @[MCache.scala 161:36]
    selCacheNext is invalid @[MCache.scala 161:36]
    io.perf.hit <= UInt<1>("h00") @[MCache.scala 163:15]
    io.perf.miss <= UInt<1>("h00") @[MCache.scala 164:16]
    hitNext <= hitReg @[MCache.scala 165:11]
    hitReg <= hitNext @[MCache.scala 166:10]
    callRetBaseNext <= callRetBaseReg @[MCache.scala 167:19]
    callRetBaseReg <= callRetBaseNext @[MCache.scala 168:18]
    selSpmNext <= selSpmReg @[MCache.scala 169:14]
    selSpmReg <= selSpmNext @[MCache.scala 170:13]
    selCacheNext <= selCacheReg @[MCache.scala 171:16]
    selCacheReg <= selCacheNext @[MCache.scala 172:15]
    wire hitVec : UInt<1>[16] @[MCache.scala 174:21]
    hitVec is invalid @[MCache.scala 174:21]
    wire mergePosVec : UInt<11>[16] @[MCache.scala 175:25]
    mergePosVec is invalid @[MCache.scala 175:25]
    hitVec[0] <= UInt<1>("h00") @[MCache.scala 177:15]
    mergePosVec[0] <= UInt<1>("h00") @[MCache.scala 178:20]
    node _T = eq(io.exmcache.callRetBase, addrVec[0]) @[MCache.scala 179:35]
    node _T_1 = and(_T, validVec[0]) @[MCache.scala 179:50]
    when _T_1 : @[MCache.scala 179:66]
      hitVec[0] <= UInt<1>("h01") @[MCache.scala 180:17]
      mergePosVec[0] <= posVec[0] @[MCache.scala 181:22]
      skip @[MCache.scala 179:66]
    hitVec[1] <= UInt<1>("h00") @[MCache.scala 177:15]
    mergePosVec[1] <= UInt<1>("h00") @[MCache.scala 178:20]
    node _T_2 = eq(io.exmcache.callRetBase, addrVec[1]) @[MCache.scala 179:35]
    node _T_3 = and(_T_2, validVec[1]) @[MCache.scala 179:50]
    when _T_3 : @[MCache.scala 179:66]
      hitVec[1] <= UInt<1>("h01") @[MCache.scala 180:17]
      mergePosVec[1] <= posVec[1] @[MCache.scala 181:22]
      skip @[MCache.scala 179:66]
    hitVec[2] <= UInt<1>("h00") @[MCache.scala 177:15]
    mergePosVec[2] <= UInt<1>("h00") @[MCache.scala 178:20]
    node _T_4 = eq(io.exmcache.callRetBase, addrVec[2]) @[MCache.scala 179:35]
    node _T_5 = and(_T_4, validVec[2]) @[MCache.scala 179:50]
    when _T_5 : @[MCache.scala 179:66]
      hitVec[2] <= UInt<1>("h01") @[MCache.scala 180:17]
      mergePosVec[2] <= posVec[2] @[MCache.scala 181:22]
      skip @[MCache.scala 179:66]
    hitVec[3] <= UInt<1>("h00") @[MCache.scala 177:15]
    mergePosVec[3] <= UInt<1>("h00") @[MCache.scala 178:20]
    node _T_6 = eq(io.exmcache.callRetBase, addrVec[3]) @[MCache.scala 179:35]
    node _T_7 = and(_T_6, validVec[3]) @[MCache.scala 179:50]
    when _T_7 : @[MCache.scala 179:66]
      hitVec[3] <= UInt<1>("h01") @[MCache.scala 180:17]
      mergePosVec[3] <= posVec[3] @[MCache.scala 181:22]
      skip @[MCache.scala 179:66]
    hitVec[4] <= UInt<1>("h00") @[MCache.scala 177:15]
    mergePosVec[4] <= UInt<1>("h00") @[MCache.scala 178:20]
    node _T_8 = eq(io.exmcache.callRetBase, addrVec[4]) @[MCache.scala 179:35]
    node _T_9 = and(_T_8, validVec[4]) @[MCache.scala 179:50]
    when _T_9 : @[MCache.scala 179:66]
      hitVec[4] <= UInt<1>("h01") @[MCache.scala 180:17]
      mergePosVec[4] <= posVec[4] @[MCache.scala 181:22]
      skip @[MCache.scala 179:66]
    hitVec[5] <= UInt<1>("h00") @[MCache.scala 177:15]
    mergePosVec[5] <= UInt<1>("h00") @[MCache.scala 178:20]
    node _T_10 = eq(io.exmcache.callRetBase, addrVec[5]) @[MCache.scala 179:35]
    node _T_11 = and(_T_10, validVec[5]) @[MCache.scala 179:50]
    when _T_11 : @[MCache.scala 179:66]
      hitVec[5] <= UInt<1>("h01") @[MCache.scala 180:17]
      mergePosVec[5] <= posVec[5] @[MCache.scala 181:22]
      skip @[MCache.scala 179:66]
    hitVec[6] <= UInt<1>("h00") @[MCache.scala 177:15]
    mergePosVec[6] <= UInt<1>("h00") @[MCache.scala 178:20]
    node _T_12 = eq(io.exmcache.callRetBase, addrVec[6]) @[MCache.scala 179:35]
    node _T_13 = and(_T_12, validVec[6]) @[MCache.scala 179:50]
    when _T_13 : @[MCache.scala 179:66]
      hitVec[6] <= UInt<1>("h01") @[MCache.scala 180:17]
      mergePosVec[6] <= posVec[6] @[MCache.scala 181:22]
      skip @[MCache.scala 179:66]
    hitVec[7] <= UInt<1>("h00") @[MCache.scala 177:15]
    mergePosVec[7] <= UInt<1>("h00") @[MCache.scala 178:20]
    node _T_14 = eq(io.exmcache.callRetBase, addrVec[7]) @[MCache.scala 179:35]
    node _T_15 = and(_T_14, validVec[7]) @[MCache.scala 179:50]
    when _T_15 : @[MCache.scala 179:66]
      hitVec[7] <= UInt<1>("h01") @[MCache.scala 180:17]
      mergePosVec[7] <= posVec[7] @[MCache.scala 181:22]
      skip @[MCache.scala 179:66]
    hitVec[8] <= UInt<1>("h00") @[MCache.scala 177:15]
    mergePosVec[8] <= UInt<1>("h00") @[MCache.scala 178:20]
    node _T_16 = eq(io.exmcache.callRetBase, addrVec[8]) @[MCache.scala 179:35]
    node _T_17 = and(_T_16, validVec[8]) @[MCache.scala 179:50]
    when _T_17 : @[MCache.scala 179:66]
      hitVec[8] <= UInt<1>("h01") @[MCache.scala 180:17]
      mergePosVec[8] <= posVec[8] @[MCache.scala 181:22]
      skip @[MCache.scala 179:66]
    hitVec[9] <= UInt<1>("h00") @[MCache.scala 177:15]
    mergePosVec[9] <= UInt<1>("h00") @[MCache.scala 178:20]
    node _T_18 = eq(io.exmcache.callRetBase, addrVec[9]) @[MCache.scala 179:35]
    node _T_19 = and(_T_18, validVec[9]) @[MCache.scala 179:50]
    when _T_19 : @[MCache.scala 179:66]
      hitVec[9] <= UInt<1>("h01") @[MCache.scala 180:17]
      mergePosVec[9] <= posVec[9] @[MCache.scala 181:22]
      skip @[MCache.scala 179:66]
    hitVec[10] <= UInt<1>("h00") @[MCache.scala 177:15]
    mergePosVec[10] <= UInt<1>("h00") @[MCache.scala 178:20]
    node _T_20 = eq(io.exmcache.callRetBase, addrVec[10]) @[MCache.scala 179:35]
    node _T_21 = and(_T_20, validVec[10]) @[MCache.scala 179:50]
    when _T_21 : @[MCache.scala 179:66]
      hitVec[10] <= UInt<1>("h01") @[MCache.scala 180:17]
      mergePosVec[10] <= posVec[10] @[MCache.scala 181:22]
      skip @[MCache.scala 179:66]
    hitVec[11] <= UInt<1>("h00") @[MCache.scala 177:15]
    mergePosVec[11] <= UInt<1>("h00") @[MCache.scala 178:20]
    node _T_22 = eq(io.exmcache.callRetBase, addrVec[11]) @[MCache.scala 179:35]
    node _T_23 = and(_T_22, validVec[11]) @[MCache.scala 179:50]
    when _T_23 : @[MCache.scala 179:66]
      hitVec[11] <= UInt<1>("h01") @[MCache.scala 180:17]
      mergePosVec[11] <= posVec[11] @[MCache.scala 181:22]
      skip @[MCache.scala 179:66]
    hitVec[12] <= UInt<1>("h00") @[MCache.scala 177:15]
    mergePosVec[12] <= UInt<1>("h00") @[MCache.scala 178:20]
    node _T_24 = eq(io.exmcache.callRetBase, addrVec[12]) @[MCache.scala 179:35]
    node _T_25 = and(_T_24, validVec[12]) @[MCache.scala 179:50]
    when _T_25 : @[MCache.scala 179:66]
      hitVec[12] <= UInt<1>("h01") @[MCache.scala 180:17]
      mergePosVec[12] <= posVec[12] @[MCache.scala 181:22]
      skip @[MCache.scala 179:66]
    hitVec[13] <= UInt<1>("h00") @[MCache.scala 177:15]
    mergePosVec[13] <= UInt<1>("h00") @[MCache.scala 178:20]
    node _T_26 = eq(io.exmcache.callRetBase, addrVec[13]) @[MCache.scala 179:35]
    node _T_27 = and(_T_26, validVec[13]) @[MCache.scala 179:50]
    when _T_27 : @[MCache.scala 179:66]
      hitVec[13] <= UInt<1>("h01") @[MCache.scala 180:17]
      mergePosVec[13] <= posVec[13] @[MCache.scala 181:22]
      skip @[MCache.scala 179:66]
    hitVec[14] <= UInt<1>("h00") @[MCache.scala 177:15]
    mergePosVec[14] <= UInt<1>("h00") @[MCache.scala 178:20]
    node _T_28 = eq(io.exmcache.callRetBase, addrVec[14]) @[MCache.scala 179:35]
    node _T_29 = and(_T_28, validVec[14]) @[MCache.scala 179:50]
    when _T_29 : @[MCache.scala 179:66]
      hitVec[14] <= UInt<1>("h01") @[MCache.scala 180:17]
      mergePosVec[14] <= posVec[14] @[MCache.scala 181:22]
      skip @[MCache.scala 179:66]
    hitVec[15] <= UInt<1>("h00") @[MCache.scala 177:15]
    mergePosVec[15] <= UInt<1>("h00") @[MCache.scala 178:20]
    node _T_30 = eq(io.exmcache.callRetBase, addrVec[15]) @[MCache.scala 179:35]
    node _T_31 = and(_T_30, validVec[15]) @[MCache.scala 179:50]
    when _T_31 : @[MCache.scala 179:66]
      hitVec[15] <= UInt<1>("h01") @[MCache.scala 180:17]
      mergePosVec[15] <= posVec[15] @[MCache.scala 181:22]
      skip @[MCache.scala 179:66]
    node _T_32 = or(UInt<1>("h00"), hitVec[0]) @[MCache.scala 184:39]
    node _T_33 = or(_T_32, hitVec[1]) @[MCache.scala 184:39]
    node _T_34 = or(_T_33, hitVec[2]) @[MCache.scala 184:39]
    node _T_35 = or(_T_34, hitVec[3]) @[MCache.scala 184:39]
    node _T_36 = or(_T_35, hitVec[4]) @[MCache.scala 184:39]
    node _T_37 = or(_T_36, hitVec[5]) @[MCache.scala 184:39]
    node _T_38 = or(_T_37, hitVec[6]) @[MCache.scala 184:39]
    node _T_39 = or(_T_38, hitVec[7]) @[MCache.scala 184:39]
    node _T_40 = or(_T_39, hitVec[8]) @[MCache.scala 184:39]
    node _T_41 = or(_T_40, hitVec[9]) @[MCache.scala 184:39]
    node _T_42 = or(_T_41, hitVec[10]) @[MCache.scala 184:39]
    node _T_43 = or(_T_42, hitVec[11]) @[MCache.scala 184:39]
    node _T_44 = or(_T_43, hitVec[12]) @[MCache.scala 184:39]
    node _T_45 = or(_T_44, hitVec[13]) @[MCache.scala 184:39]
    node _T_46 = or(_T_45, hitVec[14]) @[MCache.scala 184:39]
    node hit = or(_T_46, hitVec[15]) @[MCache.scala 184:39]
    node _T_47 = or(UInt<1>("h00"), mergePosVec[0]) @[MCache.scala 185:49]
    node _T_48 = or(_T_47, mergePosVec[1]) @[MCache.scala 185:49]
    node _T_49 = or(_T_48, mergePosVec[2]) @[MCache.scala 185:49]
    node _T_50 = or(_T_49, mergePosVec[3]) @[MCache.scala 185:49]
    node _T_51 = or(_T_50, mergePosVec[4]) @[MCache.scala 185:49]
    node _T_52 = or(_T_51, mergePosVec[5]) @[MCache.scala 185:49]
    node _T_53 = or(_T_52, mergePosVec[6]) @[MCache.scala 185:49]
    node _T_54 = or(_T_53, mergePosVec[7]) @[MCache.scala 185:49]
    node _T_55 = or(_T_54, mergePosVec[8]) @[MCache.scala 185:49]
    node _T_56 = or(_T_55, mergePosVec[9]) @[MCache.scala 185:49]
    node _T_57 = or(_T_56, mergePosVec[10]) @[MCache.scala 185:49]
    node _T_58 = or(_T_57, mergePosVec[11]) @[MCache.scala 185:49]
    node _T_59 = or(_T_58, mergePosVec[12]) @[MCache.scala 185:49]
    node _T_60 = or(_T_59, mergePosVec[13]) @[MCache.scala 185:49]
    node _T_61 = or(_T_60, mergePosVec[14]) @[MCache.scala 185:49]
    node _T_62 = or(_T_61, mergePosVec[15]) @[MCache.scala 185:49]
    node pos = mux(hit, _T_62, nextPosReg) @[MCache.scala 185:16]
    node _T_63 = and(io.exmcache.doCallRet, io.ena_in) @[MCache.scala 188:31]
    when _T_63 : @[MCache.scala 188:45]
      callRetBaseNext <= io.exmcache.callRetBase @[MCache.scala 190:21]
      callAddrReg <= io.exmcache.callRetAddr @[MCache.scala 191:17]
      node _T_64 = bits(io.exmcache.callRetBase, 31, 14) @[MCache.scala 192:42]
      node _T_65 = eq(_T_64, UInt<1>("h01")) @[MCache.scala 192:73]
      selSpmNext <= _T_65 @[MCache.scala 192:16]
      node _T_66 = bits(io.exmcache.callRetBase, 31, 15) @[MCache.scala 193:43]
      node _T_67 = geq(_T_66, UInt<1>("h01")) @[MCache.scala 193:74]
      selCacheNext <= _T_67 @[MCache.scala 194:18]
      when _T_67 : @[MCache.scala 195:21]
        hitNext <= hit @[MCache.scala 196:15]
        posReg <= pos @[MCache.scala 197:14]
        when hit : @[MCache.scala 199:18]
          io.perf.hit <= UInt<1>("h01") @[MCache.scala 200:21]
          skip @[MCache.scala 199:18]
        else : @[MCache.scala 201:20]
          io.perf.miss <= UInt<1>("h01") @[MCache.scala 202:22]
          skip @[MCache.scala 201:20]
        skip @[MCache.scala 195:21]
      skip @[MCache.scala 188:45]
    node _T_68 = bits(callRetBaseReg, 13, 0) @[MCache.scala 209:35]
    node relBase = mux(selCacheReg, posReg, _T_68) @[MCache.scala 207:20]
    node _T_69 = add(callAddrReg, relBase) @[MCache.scala 210:27]
    node relPc = tail(_T_69, 1) @[MCache.scala 210:27]
    node _T_70 = sub(callRetBaseReg, posReg) @[MCache.scala 213:34]
    node _T_71 = tail(_T_70, 1) @[MCache.scala 213:34]
    node _T_72 = mux(selSpmReg, UInt<15>("h04000"), UInt<1>("h00")) @[MCache.scala 214:22]
    node reloc = mux(selCacheReg, _T_71, _T_72) @[MCache.scala 212:18]
    when io.ctrlrepl.wTag : @[MCache.scala 219:27]
      hitNext <= UInt<1>("h01") @[MCache.scala 220:13]
      wrPosReg <= posReg @[MCache.scala 221:14]
      node _T_73 = bits(io.ctrlrepl.wData, 11, 0) @[MCache.scala 223:53]
      node _T_74 = asSInt(_T_73) @[MCache.scala 223:75]
      node _T_75 = sub(freeSpaceReg, _T_74) @[MCache.scala 223:34]
      node _T_76 = tail(_T_75, 1) @[MCache.scala 223:34]
      node _T_77 = asSInt(_T_76) @[MCache.scala 223:34]
      node _T_78 = asSInt(sizeVec[nextIndexReg]) @[MCache.scala 223:106]
      node _T_79 = add(_T_77, _T_78) @[MCache.scala 223:82]
      node _T_80 = tail(_T_79, 1) @[MCache.scala 223:82]
      node _T_81 = asSInt(_T_80) @[MCache.scala 223:82]
      freeSpaceReg <= _T_81 @[MCache.scala 223:18]
      posVec[nextIndexReg] <= nextPosReg @[MCache.scala 225:26]
      node _T_82 = bits(io.ctrlrepl.wData, 11, 0) @[MCache.scala 226:47]
      sizeVec[nextIndexReg] <= _T_82 @[MCache.scala 226:27]
      addrVec[nextIndexReg] <= io.ctrlrepl.wAddr @[MCache.scala 227:27]
      validVec[nextIndexReg] <= UInt<1>("h01") @[MCache.scala 228:28]
      node _T_83 = bits(io.ctrlrepl.wData, 10, 0) @[MCache.scala 230:49]
      node _T_84 = add(nextPosReg, _T_83) @[MCache.scala 230:30]
      node _T_85 = tail(_T_84, 1) @[MCache.scala 230:30]
      nextPosReg <= _T_85 @[MCache.scala 230:16]
      node _T_86 = eq(nextIndexReg, UInt<4>("h0f")) @[MCache.scala 231:36]
      node _T_87 = add(nextIndexReg, UInt<1>("h01")) @[MCache.scala 231:86]
      node _T_88 = tail(_T_87, 1) @[MCache.scala 231:86]
      node _T_89 = mux(_T_86, UInt<1>("h00"), _T_88) @[MCache.scala 231:22]
      nextIndexReg <= _T_89 @[MCache.scala 232:18]
      node _T_90 = eq(nextTagReg, nextIndexReg) @[MCache.scala 233:22]
      when _T_90 : @[MCache.scala 233:40]
        nextTagReg <= _T_89 @[MCache.scala 234:18]
        skip @[MCache.scala 233:40]
      skip @[MCache.scala 219:27]
    node _T_91 = lt(freeSpaceReg, asSInt(UInt<1>("h00"))) @[MCache.scala 238:22]
    when _T_91 : @[MCache.scala 238:33]
      node _T_92 = asSInt(sizeVec[nextTagReg]) @[MCache.scala 239:56]
      node _T_93 = add(freeSpaceReg, _T_92) @[MCache.scala 239:34]
      node _T_94 = tail(_T_93, 1) @[MCache.scala 239:34]
      node _T_95 = asSInt(_T_94) @[MCache.scala 239:34]
      freeSpaceReg <= _T_95 @[MCache.scala 239:18]
      sizeVec[nextTagReg] <= UInt<1>("h00") @[MCache.scala 240:25]
      validVec[nextTagReg] <= UInt<1>("h00") @[MCache.scala 241:26]
      node _T_96 = eq(nextTagReg, UInt<4>("h0f")) @[MCache.scala 242:34]
      node _T_97 = add(nextTagReg, UInt<1>("h01")) @[MCache.scala 242:82]
      node _T_98 = tail(_T_97, 1) @[MCache.scala 242:82]
      node _T_99 = mux(_T_96, UInt<1>("h00"), _T_98) @[MCache.scala 242:22]
      nextTagReg <= _T_99 @[MCache.scala 242:16]
      skip @[MCache.scala 238:33]
    node wParity = bits(io.ctrlrepl.wAddr, 0, 0) @[MCache.scala 245:34]
    node _T_100 = add(wrPosReg, io.ctrlrepl.wAddr) @[MCache.scala 247:25]
    node _T_101 = tail(_T_100, 1) @[MCache.scala 247:25]
    node wAddr = bits(_T_101, 10, 1) @[MCache.scala 247:45]
    node addrEven = bits(io.ctrlrepl.addrEven, 10, 1) @[MCache.scala 248:40]
    node addrOdd = bits(io.ctrlrepl.addrOdd, 10, 1) @[MCache.scala 249:38]
    node _T_102 = mux(wParity, UInt<1>("h00"), io.ctrlrepl.wEna) @[MCache.scala 251:24]
    io.memIn.wEven <= _T_102 @[MCache.scala 251:18]
    node _T_103 = mux(wParity, io.ctrlrepl.wEna, UInt<1>("h00")) @[MCache.scala 252:23]
    io.memIn.wOdd <= _T_103 @[MCache.scala 252:17]
    io.memIn.wData <= io.ctrlrepl.wData @[MCache.scala 253:18]
    io.memIn.wAddr <= wAddr @[MCache.scala 254:18]
    io.memIn.addrEven <= addrEven @[MCache.scala 255:21]
    io.memIn.addrOdd <= addrOdd @[MCache.scala 256:20]
    reg instrEvenReg : UInt<32>, clock @[MCache.scala 258:25]
    reg instrOddReg : UInt<32>, clock @[MCache.scala 259:24]
    node _T_104 = eq(io.ctrlrepl.instrStall, UInt<1>("h00")) @[MCache.scala 262:9]
    when _T_104 : @[MCache.scala 262:34]
      instrEvenReg <= io.mcachefe.instrEven @[MCache.scala 263:18]
      instrOddReg <= io.mcachefe.instrOdd @[MCache.scala 264:17]
      skip @[MCache.scala 262:34]
    node _T_105 = mux(io.ctrlrepl.instrStall, instrEvenReg, io.memOut.instrEven) @[MCache.scala 266:31]
    io.mcachefe.instrEven <= _T_105 @[MCache.scala 266:25]
    node _T_106 = mux(io.ctrlrepl.instrStall, instrOddReg, io.memOut.instrOdd) @[MCache.scala 267:30]
    io.mcachefe.instrOdd <= _T_106 @[MCache.scala 267:24]
    io.mcachefe.base <= callRetBaseReg @[MCache.scala 268:20]
    io.mcachefe.relBase <= relBase @[MCache.scala 269:23]
    io.mcachefe.relPc <= relPc @[MCache.scala 270:21]
    io.mcachefe.reloc <= reloc @[MCache.scala 271:21]
    node _T_107 = cat(selSpmReg, selCacheReg) @[Cat.scala 30:58]
    io.mcachefe.memSel <= _T_107 @[MCache.scala 272:22]
    io.replctrl.hit <= hitReg @[MCache.scala 274:19]
    io.hitEna <= hitReg @[MCache.scala 276:13]
    when io.invalidate : @[MCache.scala 279:24]
      validVec[0] <= UInt<1>("h00") @[MCache.scala 280:20]
      validVec[1] <= UInt<1>("h00") @[MCache.scala 280:20]
      validVec[2] <= UInt<1>("h00") @[MCache.scala 280:20]
      validVec[3] <= UInt<1>("h00") @[MCache.scala 280:20]
      validVec[4] <= UInt<1>("h00") @[MCache.scala 280:20]
      validVec[5] <= UInt<1>("h00") @[MCache.scala 280:20]
      validVec[6] <= UInt<1>("h00") @[MCache.scala 280:20]
      validVec[7] <= UInt<1>("h00") @[MCache.scala 280:20]
      validVec[8] <= UInt<1>("h00") @[MCache.scala 280:20]
      validVec[9] <= UInt<1>("h00") @[MCache.scala 280:20]
      validVec[10] <= UInt<1>("h00") @[MCache.scala 280:20]
      validVec[11] <= UInt<1>("h00") @[MCache.scala 280:20]
      validVec[12] <= UInt<1>("h00") @[MCache.scala 280:20]
      validVec[13] <= UInt<1>("h00") @[MCache.scala 280:20]
      validVec[14] <= UInt<1>("h00") @[MCache.scala 280:20]
      validVec[15] <= UInt<1>("h00") @[MCache.scala 280:20]
      skip @[MCache.scala 279:24]
    
  module MemBlock : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rdAddr : UInt<10>, rdData : UInt<32>, flip wrAddr : UInt<10>, flip wrEna : UInt<1>, flip wrData : UInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem mem : UInt<32>[1024]
    node _T = eq(io.wrEna, UInt<1>("h01")) @[MemBlock.scala 54:17]
    when _T : @[MemBlock.scala 54:30]
      infer mport MPORT = mem[io.wrAddr], clock @[MemBlock.scala 55:8]
      MPORT <= io.wrData @[MemBlock.scala 55:20]
      skip @[MemBlock.scala 54:30]
    reg rdAddrReg : UInt, clock @[MemBlock.scala 59:22]
    rdAddrReg <= io.rdAddr @[MemBlock.scala 59:22]
    node _T_1 = or(rdAddrReg, UInt<10>("h00")) @[MemBlock.scala 60:19]
    node _T_2 = bits(_T_1, 9, 0) @[MemBlock.scala 60:19]
    infer mport MPORT_1 = mem[_T_2], clock @[MemBlock.scala 60:19]
    io.rdData <= MPORT_1 @[MemBlock.scala 60:13]
    reg REG : UInt, clock @[MemBlock.scala 64:14]
    REG <= io.wrEna @[MemBlock.scala 64:14]
    node _T_3 = eq(REG, UInt<1>("h01")) @[MemBlock.scala 64:32]
    reg REG_1 : UInt, clock @[MemBlock.scala 65:14]
    REG_1 <= io.wrAddr @[MemBlock.scala 65:14]
    node _T_4 = eq(REG_1, rdAddrReg) @[MemBlock.scala 65:33]
    node _T_5 = and(_T_3, _T_4) @[MemBlock.scala 64:44]
    when _T_5 : @[MemBlock.scala 65:48]
      reg REG_2 : UInt, clock @[MemBlock.scala 66:29]
      REG_2 <= io.wrData @[MemBlock.scala 66:29]
      io.rdData <= REG_2 @[MemBlock.scala 66:23]
      skip @[MemBlock.scala 65:48]
    
  module MemBlock_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rdAddr : UInt<10>, rdData : UInt<32>, flip wrAddr : UInt<10>, flip wrEna : UInt<1>, flip wrData : UInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem mem : UInt<32>[1024]
    node _T = eq(io.wrEna, UInt<1>("h01")) @[MemBlock.scala 54:17]
    when _T : @[MemBlock.scala 54:30]
      infer mport MPORT = mem[io.wrAddr], clock @[MemBlock.scala 55:8]
      MPORT <= io.wrData @[MemBlock.scala 55:20]
      skip @[MemBlock.scala 54:30]
    reg rdAddrReg : UInt, clock @[MemBlock.scala 59:22]
    rdAddrReg <= io.rdAddr @[MemBlock.scala 59:22]
    node _T_1 = or(rdAddrReg, UInt<10>("h00")) @[MemBlock.scala 60:19]
    node _T_2 = bits(_T_1, 9, 0) @[MemBlock.scala 60:19]
    infer mport MPORT_1 = mem[_T_2], clock @[MemBlock.scala 60:19]
    io.rdData <= MPORT_1 @[MemBlock.scala 60:13]
    reg REG : UInt, clock @[MemBlock.scala 64:14]
    REG <= io.wrEna @[MemBlock.scala 64:14]
    node _T_3 = eq(REG, UInt<1>("h01")) @[MemBlock.scala 64:32]
    reg REG_1 : UInt, clock @[MemBlock.scala 65:14]
    REG_1 <= io.wrAddr @[MemBlock.scala 65:14]
    node _T_4 = eq(REG_1, rdAddrReg) @[MemBlock.scala 65:33]
    node _T_5 = and(_T_3, _T_4) @[MemBlock.scala 64:44]
    when _T_5 : @[MemBlock.scala 65:48]
      reg REG_2 : UInt, clock @[MemBlock.scala 66:29]
      REG_2 <= io.wrData @[MemBlock.scala 66:29]
      io.rdData <= REG_2 @[MemBlock.scala 66:23]
      skip @[MemBlock.scala 65:48]
    
  module MCacheMem : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip memIn : {wEven : UInt<1>, wOdd : UInt<1>, wData : UInt<32>, wAddr : UInt<10>, addrEven : UInt<10>, addrOdd : UInt<10>}, memOut : {instrEven : UInt<32>, instrOdd : UInt<32>}}
    
    clock is invalid
    reset is invalid
    io is invalid
    inst mcacheEven of MemBlock @[MemBlock.scala 15:11]
    mcacheEven.io is invalid
    mcacheEven.clock <= clock
    mcacheEven.reset <= reset
    inst mcacheOdd of MemBlock_1 @[MemBlock.scala 15:11]
    mcacheOdd.io is invalid
    mcacheOdd.clock <= clock
    mcacheOdd.reset <= reset
    mcacheEven.io.wrAddr <= io.memIn.wAddr @[MemBlock.scala 34:12]
    mcacheEven.io.wrEna <= io.memIn.wEven @[MemBlock.scala 35:11]
    mcacheEven.io.wrData <= io.memIn.wData @[MemBlock.scala 36:12]
    mcacheOdd.io.wrAddr <= io.memIn.wAddr @[MemBlock.scala 34:12]
    mcacheOdd.io.wrEna <= io.memIn.wOdd @[MemBlock.scala 35:11]
    mcacheOdd.io.wrData <= io.memIn.wData @[MemBlock.scala 36:12]
    mcacheEven.io.rdAddr <= io.memIn.addrEven @[MemBlock.scala 44:12]
    io.memOut.instrEven <= mcacheEven.io.rdData @[MCache.scala 127:23]
    mcacheOdd.io.rdAddr <= io.memIn.addrOdd @[MemBlock.scala 44:12]
    io.memOut.instrOdd <= mcacheOdd.io.rdData @[MCache.scala 128:22]
    
  module MCache : 
    input clock : Clock
    input reset : UInt<1>
    output io : {ena_out : UInt<1>, flip ena_in : UInt<1>, flip invalidate : UInt<1>, flip feicache : {addrEven : UInt<32>, addrOdd : UInt<32>}, flip exicache : {doCallRet : UInt<1>, callRetBase : UInt<32>, callRetAddr : UInt<32>}, icachefe : {instrEven : UInt<32>, instrOdd : UInt<32>, base : UInt<32>, relBase : UInt<11>, relPc : UInt<12>, reloc : UInt<32>, memSel : UInt<2>}, ocp_port : {M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, DataValid : UInt<1>, DataByteEn : UInt<4>}, flip S : {Resp : UInt<2>, Data : UInt<32>, CmdAccept : UInt<1>, DataAccept : UInt<1>}}, illMem : UInt<1>, perf : {hit : UInt<1>, miss : UInt<1>}}
    
    clock is invalid
    reset is invalid
    io is invalid
    inst ctrl of MCacheCtrl @[MCache.scala 86:20]
    ctrl.io is invalid
    ctrl.clock <= clock
    ctrl.reset <= reset
    inst repl of MCacheReplFifo @[MCache.scala 87:20]
    repl.io is invalid
    repl.clock <= clock
    repl.reset <= reset
    inst mem of MCacheMem @[MCache.scala 90:19]
    mem.io is invalid
    mem.clock <= clock
    mem.reset <= reset
    repl.io.ctrlrepl <- ctrl.io.ctrlrepl @[MCache.scala 92:20]
    ctrl.io.femcache <- io.feicache @[MCache.scala 93:20]
    ctrl.io.exmcache <- io.exicache @[MCache.scala 94:20]
    io.ocp_port <- ctrl.io.ocp_port @[MCache.scala 95:15]
    repl.io.exmcache <- io.exicache @[MCache.scala 97:20]
    io.icachefe <- repl.io.mcachefe @[MCache.scala 98:15]
    ctrl.io.replctrl <- repl.io.replctrl @[MCache.scala 99:20]
    io.perf <- repl.io.perf @[MCache.scala 100:11]
    mem.io.memIn <- repl.io.memIn @[MCache.scala 102:16]
    repl.io.memOut <- mem.io.memOut @[MCache.scala 103:18]
    ctrl.io.ena_in <= io.ena_in @[MCache.scala 105:18]
    repl.io.ena_in <= io.ena_in @[MCache.scala 106:18]
    node _T = or(repl.io.hitEna, ctrl.io.forceHit) @[MCache.scala 108:52]
    node _T_1 = and(ctrl.io.fetchEna, _T) @[MCache.scala 108:34]
    io.ena_out <= _T_1 @[MCache.scala 108:14]
    io.illMem <= ctrl.io.illMem @[MCache.scala 110:13]
    node _T_2 = or(io.invalidate, ctrl.io.illMem) @[MCache.scala 112:39]
    repl.io.invalidate <= _T_2 @[MCache.scala 112:22]
    
  module MemBlock_2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rdAddr : UInt<7>, rdData : UInt<32>, flip wrAddr : UInt<7>, flip wrEna : UInt<1>, flip wrData : UInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem mem : UInt<32>[128]
    node _T = eq(io.wrEna, UInt<1>("h01")) @[MemBlock.scala 54:17]
    when _T : @[MemBlock.scala 54:30]
      infer mport MPORT = mem[io.wrAddr], clock @[MemBlock.scala 55:8]
      MPORT <= io.wrData @[MemBlock.scala 55:20]
      skip @[MemBlock.scala 54:30]
    reg rdAddrReg : UInt, clock @[MemBlock.scala 59:22]
    rdAddrReg <= io.rdAddr @[MemBlock.scala 59:22]
    node _T_1 = or(rdAddrReg, UInt<7>("h00")) @[MemBlock.scala 60:19]
    node _T_2 = bits(_T_1, 6, 0) @[MemBlock.scala 60:19]
    infer mport MPORT_1 = mem[_T_2], clock @[MemBlock.scala 60:19]
    io.rdData <= MPORT_1 @[MemBlock.scala 60:13]
    
  module MemBlock_3 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rdAddr : UInt<7>, rdData : UInt<32>, flip wrAddr : UInt<7>, flip wrEna : UInt<1>, flip wrData : UInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem mem : UInt<32>[128]
    node _T = eq(io.wrEna, UInt<1>("h01")) @[MemBlock.scala 54:17]
    when _T : @[MemBlock.scala 54:30]
      infer mport MPORT = mem[io.wrAddr], clock @[MemBlock.scala 55:8]
      MPORT <= io.wrData @[MemBlock.scala 55:20]
      skip @[MemBlock.scala 54:30]
    reg rdAddrReg : UInt, clock @[MemBlock.scala 59:22]
    rdAddrReg <= io.rdAddr @[MemBlock.scala 59:22]
    node _T_1 = or(rdAddrReg, UInt<7>("h00")) @[MemBlock.scala 60:19]
    node _T_2 = bits(_T_1, 6, 0) @[MemBlock.scala 60:19]
    infer mport MPORT_1 = mem[_T_2], clock @[MemBlock.scala 60:19]
    io.rdData <= MPORT_1 @[MemBlock.scala 60:13]
    
  module Fetch : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip ena : UInt<1>, fedec : {instr_a : UInt<32>, instr_b : UInt<32>, pc : UInt<30>, base : UInt<30>, reloc : UInt<32>, relPc : UInt<30>}, feex : {pc : UInt<30>}, flip exfe : {doBranch : UInt<1>, branchPc : UInt<30>}, flip memfe : {doCallRet : UInt<1>, callRetPc : UInt<30>, callRetBase : UInt<30>, store : UInt<1>, addr : UInt<32>, data : UInt<32>}, feicache : {addrEven : UInt<32>, addrOdd : UInt<32>}, flip icachefe : {instrEven : UInt<32>, instrOdd : UInt<32>, base : UInt<32>, relBase : UInt<11>, relPc : UInt<12>, reloc : UInt<32>, memSel : UInt<2>}}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg pcReg : UInt<30>, clock with : (reset => (reset, UInt<30>("h01"))) @[Fetch.scala 21:22]
    wire pcNext : UInt<30> @[Fetch.scala 22:30]
    pcNext is invalid @[Fetch.scala 22:30]
    wire addrEven : UInt @[Fetch.scala 23:22]
    addrEven is invalid @[Fetch.scala 23:22]
    wire addrOdd : UInt @[Fetch.scala 24:21]
    addrOdd is invalid @[Fetch.scala 24:21]
    reg addrEvenReg : UInt, clock with : (reset => (reset, UInt<30>("h02"))) @[Fetch.scala 25:24]
    addrEvenReg <= addrEven @[Fetch.scala 25:24]
    reg addrOddReg : UInt, clock with : (reset => (reset, UInt<30>("h01"))) @[Fetch.scala 26:23]
    addrOddReg <= addrOdd @[Fetch.scala 26:23]
    wire rom : UInt<32>[637] @[Utility.scala 54:14]
    rom is invalid @[Utility.scala 54:14]
    rom[0] <= UInt<32>("h054") @[Utility.scala 54:14]
    rom[1] <= UInt<32>("h087c20000") @[Utility.scala 54:14]
    rom[2] <= UInt<32>("h020700") @[Utility.scala 54:14]
    rom[3] <= UInt<32>("h087c40000") @[Utility.scala 54:14]
    rom[4] <= UInt<32>("h020800") @[Utility.scala 54:14]
    rom[5] <= UInt<32>("h03e1000") @[Utility.scala 54:14]
    rom[6] <= UInt<32>("h02402025") @[Utility.scala 54:14]
    rom[7] <= UInt<32>("h02402026") @[Utility.scala 54:14]
    rom[8] <= UInt<32>("h087c20000") @[Utility.scala 54:14]
    rom[9] <= UInt<32>("h0f0010000") @[Utility.scala 54:14]
    rom[10] <= UInt<32>("h02821085") @[Utility.scala 54:14]
    rom[11] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[12] <= UInt<32>("h02021062") @[Utility.scala 54:14]
    rom[13] <= UInt<32>("h0cfc40000") @[Utility.scala 54:14]
    rom[14] <= UInt<32>("h0f0010000") @[Utility.scala 54:14]
    rom[15] <= UInt<32>("h0cfc20000") @[Utility.scala 54:14]
    rom[16] <= UInt<32>("h080000000") @[Utility.scala 54:14]
    rom[17] <= UInt<32>("h04ac22085") @[Utility.scala 54:14]
    rom[18] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[19] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[20] <= UInt<32>("h04000017") @[Utility.scala 54:14]
    rom[21] <= UInt<32>("h04800000") @[Utility.scala 54:14]
    rom[22] <= UInt<32>("h04ac") @[Utility.scala 54:14]
    rom[23] <= UInt<32>("h07ff024") @[Utility.scala 54:14]
    rom[24] <= UInt<32>("h02520038") @[Utility.scala 54:14]
    rom[25] <= UInt<32>("h02c5f482") @[Utility.scala 54:14]
    rom[26] <= UInt<32>("h02c5fd08") @[Utility.scala 54:14]
    rom[27] <= UInt<32>("h02520037") @[Utility.scala 54:14]
    rom[28] <= UInt<32>("h02c5f481") @[Utility.scala 54:14]
    rom[29] <= UInt<32>("h02520030") @[Utility.scala 54:14]
    rom[30] <= UInt<32>("h02c5f480") @[Utility.scala 54:14]
    rom[31] <= UInt<32>("h02c5fa83") @[Utility.scala 54:14]
    rom[32] <= UInt<32>("h02c5fb04") @[Utility.scala 54:14]
    rom[33] <= UInt<32>("h02c5fb85") @[Utility.scala 54:14]
    rom[34] <= UInt<32>("h02c5fc06") @[Utility.scala 54:14]
    rom[35] <= UInt<32>("h02c5fc87") @[Utility.scala 54:14]
    rom[36] <= UInt<32>("h087c20000") @[Utility.scala 54:14]
    rom[37] <= UInt<32>("h0f0020000") @[Utility.scala 54:14]
    rom[38] <= UInt<32>("h02821083") @[Utility.scala 54:14]
    rom[39] <= UInt<32>("h04403e8") @[Utility.scala 54:14]
    rom[40] <= UInt<32>("h02022081") @[Utility.scala 54:14]
    rom[41] <= UInt<32>("h087c40000") @[Utility.scala 54:14]
    rom[42] <= UInt<32>("h0f0020000") @[Utility.scala 54:14]
    rom[43] <= UInt<32>("h02842083") @[Utility.scala 54:14]
    rom[44] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[45] <= UInt<32>("h02041100") @[Utility.scala 54:14]
    rom[46] <= UInt<32>("h02022062") @[Utility.scala 54:14]
    rom[47] <= UInt<32>("h0cbffffa") @[Utility.scala 54:14]
    rom[48] <= UInt<32>("h02c60005") @[Utility.scala 54:14]
    rom[49] <= UInt<32>("h02c60004") @[Utility.scala 54:14]
    rom[50] <= UInt<32>("h087c20000") @[Utility.scala 54:14]
    rom[51] <= UInt<32>("h0f0000000") @[Utility.scala 54:14]
    rom[52] <= UInt<32>("h02821080") @[Utility.scala 54:14]
    rom[53] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[54] <= UInt<32>("h02021031") @[Utility.scala 54:14]
    rom[55] <= UInt<32>("h04c800023") @[Utility.scala 54:14]
    rom[56] <= UInt<32>("h087c20000") @[Utility.scala 54:14]
    rom[57] <= UInt<32>("h0f0000000") @[Utility.scala 54:14]
    rom[58] <= UInt<32>("h02841080") @[Utility.scala 54:14]
    rom[59] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[60] <= UInt<32>("h0c42004") @[Utility.scala 54:14]
    rom[61] <= UInt<32>("h02c62009") @[Utility.scala 54:14]
    rom[62] <= UInt<32>("h02841080") @[Utility.scala 54:14]
    rom[63] <= UInt<32>("h0460001") @[Utility.scala 54:14]
    rom[64] <= UInt<32>("h0c42004") @[Utility.scala 54:14]
    rom[65] <= UInt<32>("h02c62188") @[Utility.scala 54:14]
    rom[66] <= UInt<32>("h02841080") @[Utility.scala 54:14]
    rom[67] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[68] <= UInt<32>("h0c42004") @[Utility.scala 54:14]
    rom[69] <= UInt<32>("h02c62007") @[Utility.scala 54:14]
    rom[70] <= UInt<32>("h02821080") @[Utility.scala 54:14]
    rom[71] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[72] <= UInt<32>("h0c21004") @[Utility.scala 54:14]
    rom[73] <= UInt<32>("h02c61006") @[Utility.scala 54:14]
    rom[74] <= UInt<32>("h040001") @[Utility.scala 54:14]
    rom[75] <= UInt<32>("h087c20000") @[Utility.scala 54:14]
    rom[76] <= UInt<32>("h0f0000000") @[Utility.scala 54:14]
    rom[77] <= UInt<32>("h02821080") @[Utility.scala 54:14]
    rom[78] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[79] <= UInt<32>("h0c21004") @[Utility.scala 54:14]
    rom[80] <= UInt<32>("h02c61109") @[Utility.scala 54:14]
    rom[81] <= UInt<32>("h02820185") @[Utility.scala 54:14]
    rom[82] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[83] <= UInt<32>("h020210e1") @[Utility.scala 54:14]
    rom[84] <= UInt<32>("h0cbffff7") @[Utility.scala 54:14]
    rom[85] <= UInt<32>("h02820185") @[Utility.scala 54:14]
    rom[86] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[87] <= UInt<32>("h02021161") @[Utility.scala 54:14]
    rom[88] <= UInt<32>("h0cbffffd") @[Utility.scala 54:14]
    rom[89] <= UInt<32>("h0480001d") @[Utility.scala 54:14]
    rom[90] <= UInt<32>("h087c40000") @[Utility.scala 54:14]
    rom[91] <= UInt<32>("h0f0000000") @[Utility.scala 54:14]
    rom[92] <= UInt<32>("h02842082") @[Utility.scala 54:14]
    rom[93] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[94] <= UInt<32>("h02022060") @[Utility.scala 54:14]
    rom[95] <= UInt<32>("h0cc00010") @[Utility.scala 54:14]
    rom[96] <= UInt<32>("h020010") @[Utility.scala 54:14]
    rom[97] <= UInt<32>("h040000") @[Utility.scala 54:14]
    rom[98] <= UInt<32>("h0c22004") @[Utility.scala 54:14]
    rom[99] <= UInt<32>("h02c61009") @[Utility.scala 54:14]
    rom[100] <= UInt<32>("h0460001") @[Utility.scala 54:14]
    rom[101] <= UInt<32>("h02c61188") @[Utility.scala 54:14]
    rom[102] <= UInt<32>("h02c61007") @[Utility.scala 54:14]
    rom[103] <= UInt<32>("h02c61006") @[Utility.scala 54:14]
    rom[104] <= UInt<32>("h020010") @[Utility.scala 54:14]
    rom[105] <= UInt<32>("h087c60000") @[Utility.scala 54:14]
    rom[106] <= UInt<32>("h0f0000000") @[Utility.scala 54:14]
    rom[107] <= UInt<32>("h02863082") @[Utility.scala 54:14]
    rom[108] <= UInt<32>("h042001") @[Utility.scala 54:14]
    rom[109] <= UInt<32>("h020221b4") @[Utility.scala 54:14]
    rom[110] <= UInt<32>("h0cbffff4") @[Utility.scala 54:14]
    rom[111] <= UInt<32>("h0421001") @[Utility.scala 54:14]
    rom[112] <= UInt<32>("h02021031") @[Utility.scala 54:14]
    rom[113] <= UInt<32>("h0cfffffe") @[Utility.scala 54:14]
    rom[114] <= UInt<32>("h040001") @[Utility.scala 54:14]
    rom[115] <= UInt<32>("h02c60105") @[Utility.scala 54:14]
    rom[116] <= UInt<32>("h04000143") @[Utility.scala 54:14]
    rom[117] <= UInt<32>("h02c60084") @[Utility.scala 54:14]
    rom[118] <= UInt<32>("h087c20000") @[Utility.scala 54:14]
    rom[119] <= UInt<32>("h0f0000000") @[Utility.scala 54:14]
    rom[120] <= UInt<32>("h0282108c") @[Utility.scala 54:14]
    rom[121] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[122] <= UInt<32>("h02021264") @[Utility.scala 54:14]
    rom[123] <= UInt<32>("h020000") @[Utility.scala 54:14]
    rom[124] <= UInt<32>("h0c80000d") @[Utility.scala 54:14]
    rom[125] <= UInt<32>("h087c4100d") @[Utility.scala 54:14]
    rom[126] <= UInt<32>("h010000") @[Utility.scala 54:14]
    rom[127] <= UInt<32>("h02862180") @[Utility.scala 54:14]
    rom[128] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[129] <= UInt<32>("h02c22180") @[Utility.scala 54:14]
    rom[130] <= UInt<32>("h087c40000") @[Utility.scala 54:14]
    rom[131] <= UInt<32>("h0f0000000") @[Utility.scala 54:14]
    rom[132] <= UInt<32>("h0284208c") @[Utility.scala 54:14]
    rom[133] <= UInt<32>("h021001") @[Utility.scala 54:14]
    rom[134] <= UInt<32>("h01042002") @[Utility.scala 54:14]
    rom[135] <= UInt<32>("h02021134") @[Utility.scala 54:14]
    rom[136] <= UInt<32>("h0cbffff5") @[Utility.scala 54:14]
    rom[137] <= UInt<32>("h087c20000") @[Utility.scala 54:14]
    rom[138] <= UInt<32>("h0f0000000") @[Utility.scala 54:14]
    rom[139] <= UInt<32>("h02821080") @[Utility.scala 54:14]
    rom[140] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[141] <= UInt<32>("h02021031") @[Utility.scala 54:14]
    rom[142] <= UInt<32>("h04c800008") @[Utility.scala 54:14]
    rom[143] <= UInt<32>("h087c20000") @[Utility.scala 54:14]
    rom[144] <= UInt<32>("h0f0000000") @[Utility.scala 54:14]
    rom[145] <= UInt<32>("h02821080") @[Utility.scala 54:14]
    rom[146] <= UInt<32>("h040002") @[Utility.scala 54:14]
    rom[147] <= UInt<32>("h04c00016") @[Utility.scala 54:14]
    rom[148] <= UInt<32>("h0c21004") @[Utility.scala 54:14]
    rom[149] <= UInt<32>("h02c61109") @[Utility.scala 54:14]
    rom[150] <= UInt<32>("h020002") @[Utility.scala 54:14]
    rom[151] <= UInt<32>("h02c60085") @[Utility.scala 54:14]
    rom[152] <= UInt<32>("h087c40000") @[Utility.scala 54:14]
    rom[153] <= UInt<32>("h0f0000000") @[Utility.scala 54:14]
    rom[154] <= UInt<32>("h02842082") @[Utility.scala 54:14]
    rom[155] <= UInt<32>("h020001") @[Utility.scala 54:14]
    rom[156] <= UInt<32>("h02022164") @[Utility.scala 54:14]
    rom[157] <= UInt<32>("h0c80000c") @[Utility.scala 54:14]
    rom[158] <= UInt<32>("h0c41004") @[Utility.scala 54:14]
    rom[159] <= UInt<32>("h02842189") @[Utility.scala 54:14]
    rom[160] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[161] <= UInt<32>("h02022161") @[Utility.scala 54:14]
    rom[162] <= UInt<32>("h0cbffffc") @[Utility.scala 54:14]
    rom[163] <= UInt<32>("h087c40000") @[Utility.scala 54:14]
    rom[164] <= UInt<32>("h0f0000000") @[Utility.scala 54:14]
    rom[165] <= UInt<32>("h02842082") @[Utility.scala 54:14]
    rom[166] <= UInt<32>("h021001") @[Utility.scala 54:14]
    rom[167] <= UInt<32>("h02021134") @[Utility.scala 54:14]
    rom[168] <= UInt<32>("h0cbffff6") @[Utility.scala 54:14]
    rom[169] <= UInt<32>("h02840184") @[Utility.scala 54:14]
    rom[170] <= UInt<32>("h0200ff") @[Utility.scala 54:14]
    rom[171] <= UInt<32>("h02022060") @[Utility.scala 54:14]
    rom[172] <= UInt<32>("h0c800023") @[Utility.scala 54:14]
    rom[173] <= UInt<32>("h087c20000") @[Utility.scala 54:14]
    rom[174] <= UInt<32>("h0f0010000") @[Utility.scala 54:14]
    rom[175] <= UInt<32>("h02821085") @[Utility.scala 54:14]
    rom[176] <= UInt<32>("h0440001") @[Utility.scala 54:14]
    rom[177] <= UInt<32>("h020220b2") @[Utility.scala 54:14]
    rom[178] <= UInt<32>("h0cfc40000") @[Utility.scala 54:14]
    rom[179] <= UInt<32>("h0f0010000") @[Utility.scala 54:14]
    rom[180] <= UInt<32>("h0cfc20000") @[Utility.scala 54:14]
    rom[181] <= UInt<32>("h080000000") @[Utility.scala 54:14]
    rom[182] <= UInt<32>("h04ac22085") @[Utility.scala 54:14]
    rom[183] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[184] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[185] <= UInt<32>("h02820184") @[Utility.scala 54:14]
    rom[186] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[187] <= UInt<32>("h06001004") @[Utility.scala 54:14]
    rom[188] <= UInt<32>("h087c40000") @[Utility.scala 54:14]
    rom[189] <= UInt<32>("h0f0010000") @[Utility.scala 54:14]
    rom[190] <= UInt<32>("h02842085") @[Utility.scala 54:14]
    rom[191] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[192] <= UInt<32>("h02022062") @[Utility.scala 54:14]
    rom[193] <= UInt<32>("h0cfc60000") @[Utility.scala 54:14]
    rom[194] <= UInt<32>("h0f0010000") @[Utility.scala 54:14]
    rom[195] <= UInt<32>("h0cfc40000") @[Utility.scala 54:14]
    rom[196] <= UInt<32>("h080000000") @[Utility.scala 54:14]
    rom[197] <= UInt<32>("h04ac23105") @[Utility.scala 54:14]
    rom[198] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[199] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[200] <= UInt<32>("h087c40000") @[Utility.scala 54:14]
    rom[201] <= UInt<32>("h0f0000000") @[Utility.scala 54:14]
    rom[202] <= UInt<32>("h02842080") @[Utility.scala 54:14]
    rom[203] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[204] <= UInt<32>("h0c42004") @[Utility.scala 54:14]
    rom[205] <= UInt<32>("h02c62088") @[Utility.scala 54:14]
    rom[206] <= UInt<32>("h01c210ff") @[Utility.scala 54:14]
    rom[207] <= UInt<32>("h087c40000") @[Utility.scala 54:14]
    rom[208] <= UInt<32>("h0f0000000") @[Utility.scala 54:14]
    rom[209] <= UInt<32>("h02842080") @[Utility.scala 54:14]
    rom[210] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[211] <= UInt<32>("h02022031") @[Utility.scala 54:14]
    rom[212] <= UInt<32>("h04c800012") @[Utility.scala 54:14]
    rom[213] <= UInt<32>("h040004") @[Utility.scala 54:14]
    rom[214] <= UInt<32>("h087c20000") @[Utility.scala 54:14]
    rom[215] <= UInt<32>("h0f0000000") @[Utility.scala 54:14]
    rom[216] <= UInt<32>("h02821080") @[Utility.scala 54:14]
    rom[217] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[218] <= UInt<32>("h0c21004") @[Utility.scala 54:14]
    rom[219] <= UInt<32>("h02c61109") @[Utility.scala 54:14]
    rom[220] <= UInt<32>("h02820185") @[Utility.scala 54:14]
    rom[221] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[222] <= UInt<32>("h02021261") @[Utility.scala 54:14]
    rom[223] <= UInt<32>("h0cbffff7") @[Utility.scala 54:14]
    rom[224] <= UInt<32>("h087c20000") @[Utility.scala 54:14]
    rom[225] <= UInt<32>("h0f0000000") @[Utility.scala 54:14]
    rom[226] <= UInt<32>("h02821080") @[Utility.scala 54:14]
    rom[227] <= UInt<32>("h04c00048") @[Utility.scala 54:14]
    rom[228] <= UInt<32>("h0c21004") @[Utility.scala 54:14]
    rom[229] <= UInt<32>("h02c61009") @[Utility.scala 54:14]
    rom[230] <= UInt<32>("h087c60000") @[Utility.scala 54:14]
    rom[231] <= UInt<32>("h0f0000000") @[Utility.scala 54:14]
    rom[232] <= UInt<32>("h02863082") @[Utility.scala 54:14]
    rom[233] <= UInt<32>("h040001") @[Utility.scala 54:14]
    rom[234] <= UInt<32>("h02023164") @[Utility.scala 54:14]
    rom[235] <= UInt<32>("h0c800011") @[Utility.scala 54:14]
    rom[236] <= UInt<32>("h0c62004") @[Utility.scala 54:14]
    rom[237] <= UInt<32>("h02863189") @[Utility.scala 54:14]
    rom[238] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[239] <= UInt<32>("h02023060") @[Utility.scala 54:14]
    rom[240] <= UInt<32>("h0c800006") @[Utility.scala 54:14]
    rom[241] <= UInt<32>("h0c62004") @[Utility.scala 54:14]
    rom[242] <= UInt<32>("h02863189") @[Utility.scala 54:14]
    rom[243] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[244] <= UInt<32>("h02023261") @[Utility.scala 54:14]
    rom[245] <= UInt<32>("h0cbffffc") @[Utility.scala 54:14]
    rom[246] <= UInt<32>("h087c60000") @[Utility.scala 54:14]
    rom[247] <= UInt<32>("h0f0000000") @[Utility.scala 54:14]
    rom[248] <= UInt<32>("h02863082") @[Utility.scala 54:14]
    rom[249] <= UInt<32>("h042001") @[Utility.scala 54:14]
    rom[250] <= UInt<32>("h020221b4") @[Utility.scala 54:14]
    rom[251] <= UInt<32>("h0cbffff1") @[Utility.scala 54:14]
    rom[252] <= UInt<32>("h087c40000") @[Utility.scala 54:14]
    rom[253] <= UInt<32>("h0f0080000") @[Utility.scala 54:14]
    rom[254] <= UInt<32>("h02842080") @[Utility.scala 54:14]
    rom[255] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[256] <= UInt<32>("h02022036") @[Utility.scala 54:14]
    rom[257] <= UInt<32>("h04cbffffb") @[Utility.scala 54:14]
    rom[258] <= UInt<32>("h087c40000") @[Utility.scala 54:14]
    rom[259] <= UInt<32>("h0f0080000") @[Utility.scala 54:14]
    rom[260] <= UInt<32>("h02c22001") @[Utility.scala 54:14]
    rom[261] <= UInt<32>("h087c40000") @[Utility.scala 54:14]
    rom[262] <= UInt<32>("h0f0080000") @[Utility.scala 54:14]
    rom[263] <= UInt<32>("h02842080") @[Utility.scala 54:14]
    rom[264] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[265] <= UInt<32>("h02022036") @[Utility.scala 54:14]
    rom[266] <= UInt<32>("h04cbffffb") @[Utility.scala 54:14]
    rom[267] <= UInt<32>("h040078") @[Utility.scala 54:14]
    rom[268] <= UInt<32>("h087c60000") @[Utility.scala 54:14]
    rom[269] <= UInt<32>("h0f0080000") @[Utility.scala 54:14]
    rom[270] <= UInt<32>("h02c23101") @[Utility.scala 54:14]
    rom[271] <= UInt<32>("h087c40000") @[Utility.scala 54:14]
    rom[272] <= UInt<32>("h0f0080000") @[Utility.scala 54:14]
    rom[273] <= UInt<32>("h02842080") @[Utility.scala 54:14]
    rom[274] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[275] <= UInt<32>("h02022036") @[Utility.scala 54:14]
    rom[276] <= UInt<32>("h04cbffffb") @[Utility.scala 54:14]
    rom[277] <= UInt<32>("h087c40000") @[Utility.scala 54:14]
    rom[278] <= UInt<32>("h0f0080000") @[Utility.scala 54:14]
    rom[279] <= UInt<32>("h02c22081") @[Utility.scala 54:14]
    rom[280] <= UInt<32>("h020004") @[Utility.scala 54:14]
    rom[281] <= UInt<32>("h02c60085") @[Utility.scala 54:14]
    rom[282] <= UInt<32>("h087c40000") @[Utility.scala 54:14]
    rom[283] <= UInt<32>("h0f0000000") @[Utility.scala 54:14]
    rom[284] <= UInt<32>("h02842082") @[Utility.scala 54:14]
    rom[285] <= UInt<32>("h020001") @[Utility.scala 54:14]
    rom[286] <= UInt<32>("h02022164") @[Utility.scala 54:14]
    rom[287] <= UInt<32>("h0c80000c") @[Utility.scala 54:14]
    rom[288] <= UInt<32>("h0c41004") @[Utility.scala 54:14]
    rom[289] <= UInt<32>("h02842189") @[Utility.scala 54:14]
    rom[290] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[291] <= UInt<32>("h02022260") @[Utility.scala 54:14]
    rom[292] <= UInt<32>("h0cbffffc") @[Utility.scala 54:14]
    rom[293] <= UInt<32>("h087c40000") @[Utility.scala 54:14]
    rom[294] <= UInt<32>("h0f0000000") @[Utility.scala 54:14]
    rom[295] <= UInt<32>("h02842082") @[Utility.scala 54:14]
    rom[296] <= UInt<32>("h021001") @[Utility.scala 54:14]
    rom[297] <= UInt<32>("h02021134") @[Utility.scala 54:14]
    rom[298] <= UInt<32>("h0cbffff6") @[Utility.scala 54:14]
    rom[299] <= UInt<32>("h087c40000") @[Utility.scala 54:14]
    rom[300] <= UInt<32>("h0f0010000") @[Utility.scala 54:14]
    rom[301] <= UInt<32>("h020001") @[Utility.scala 54:14]
    rom[302] <= UInt<32>("h04400001") @[Utility.scala 54:14]
    rom[303] <= UInt<32>("h02c22085") @[Utility.scala 54:14]
    rom[304] <= UInt<32>("h020002") @[Utility.scala 54:14]
    rom[305] <= UInt<32>("h02c22085") @[Utility.scala 54:14]
    rom[306] <= UInt<32>("h02adf104") @[Utility.scala 54:14]
    rom[307] <= UInt<32>("h02aff105") @[Utility.scala 54:14]
    rom[308] <= UInt<32>("h02b1f106") @[Utility.scala 54:14]
    rom[309] <= UInt<32>("h02b3f107") @[Utility.scala 54:14]
    rom[310] <= UInt<32>("h02b5f108") @[Utility.scala 54:14]
    rom[311] <= UInt<32>("h0293f102") @[Utility.scala 54:14]
    rom[312] <= UInt<32>("h02abf103") @[Utility.scala 54:14]
    rom[313] <= UInt<32>("h02409028") @[Utility.scala 54:14]
    rom[314] <= UInt<32>("h0293f101") @[Utility.scala 54:14]
    rom[315] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[316] <= UInt<32>("h02409027") @[Utility.scala 54:14]
    rom[317] <= UInt<32>("h0293f100") @[Utility.scala 54:14]
    rom[318] <= UInt<32>("h06400000") @[Utility.scala 54:14]
    rom[319] <= UInt<32>("h020000") @[Utility.scala 54:14]
    rom[320] <= UInt<32>("h02409020") @[Utility.scala 54:14]
    rom[321] <= UInt<32>("h03ff024") @[Utility.scala 54:14]
    rom[322] <= UInt<32>("h0340") @[Utility.scala 54:14]
    rom[323] <= UInt<32>("h07ff040") @[Utility.scala 54:14]
    rom[324] <= UInt<32>("h02520038") @[Utility.scala 54:14]
    rom[325] <= UInt<32>("h02c5f487") @[Utility.scala 54:14]
    rom[326] <= UInt<32>("h087c20000") @[Utility.scala 54:14]
    rom[327] <= UInt<32>("h020000") @[Utility.scala 54:14]
    rom[328] <= UInt<32>("h02c41000") @[Utility.scala 54:14]
    rom[329] <= UInt<32>("h02c5fe0f") @[Utility.scala 54:14]
    rom[330] <= UInt<32>("h02520037") @[Utility.scala 54:14]
    rom[331] <= UInt<32>("h02c5f486") @[Utility.scala 54:14]
    rom[332] <= UInt<32>("h02520030") @[Utility.scala 54:14]
    rom[333] <= UInt<32>("h02c5f485") @[Utility.scala 54:14]
    rom[334] <= UInt<32>("h02c5fa88") @[Utility.scala 54:14]
    rom[335] <= UInt<32>("h02c5fb09") @[Utility.scala 54:14]
    rom[336] <= UInt<32>("h02c5fb8a") @[Utility.scala 54:14]
    rom[337] <= UInt<32>("h02c5fc0b") @[Utility.scala 54:14]
    rom[338] <= UInt<32>("h02c5fc8c") @[Utility.scala 54:14]
    rom[339] <= UInt<32>("h02c5fd0d") @[Utility.scala 54:14]
    rom[340] <= UInt<32>("h02c5fd8e") @[Utility.scala 54:14]
    rom[341] <= UInt<32>("h020000") @[Utility.scala 54:14]
    rom[342] <= UInt<32>("h087c21000") @[Utility.scala 54:14]
    rom[343] <= UInt<32>("h020004") @[Utility.scala 54:14]
    rom[344] <= UInt<32>("h040020") @[Utility.scala 54:14]
    rom[345] <= UInt<32>("h02d41100") @[Utility.scala 54:14]
    rom[346] <= UInt<32>("h087c40000") @[Utility.scala 54:14]
    rom[347] <= UInt<32>("h020000") @[Utility.scala 54:14]
    rom[348] <= UInt<32>("h02822100") @[Utility.scala 54:14]
    rom[349] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[350] <= UInt<32>("h021001") @[Utility.scala 54:14]
    rom[351] <= UInt<32>("h02c42080") @[Utility.scala 54:14]
    rom[352] <= UInt<32>("h0403be") @[Utility.scala 54:14]
    rom[353] <= UInt<32>("h02021134") @[Utility.scala 54:14]
    rom[354] <= UInt<32>("h0cbffff4") @[Utility.scala 54:14]
    rom[355] <= UInt<32>("h087c40000") @[Utility.scala 54:14]
    rom[356] <= UInt<32>("h020404") @[Utility.scala 54:14]
    rom[357] <= UInt<32>("h02c42080") @[Utility.scala 54:14]
    rom[358] <= UInt<32>("h0460001") @[Utility.scala 54:14]
    rom[359] <= UInt<32>("h080000") @[Utility.scala 54:14]
    rom[360] <= UInt<32>("h0360000") @[Utility.scala 54:14]
    rom[361] <= UInt<32>("h02c5f003") @[Utility.scala 54:14]
    rom[362] <= UInt<32>("h02a0000") @[Utility.scala 54:14]
    rom[363] <= UInt<32>("h0340000") @[Utility.scala 54:14]
    rom[364] <= UInt<32>("h0300000") @[Utility.scala 54:14]
    rom[365] <= UInt<32>("h02c5f002") @[Utility.scala 54:14]
    rom[366] <= UInt<32>("h02c5f000") @[Utility.scala 54:14]
    rom[367] <= UInt<32>("h02c5f001") @[Utility.scala 54:14]
    rom[368] <= UInt<32>("h087c20000") @[Utility.scala 54:14]
    rom[369] <= UInt<32>("h020408") @[Utility.scala 54:14]
    rom[370] <= UInt<32>("h02c41000") @[Utility.scala 54:14]
    rom[371] <= UInt<32>("h0420001") @[Utility.scala 54:14]
    rom[372] <= UInt<32>("h02c5f084") @[Utility.scala 54:14]
    rom[373] <= UInt<32>("h040000") @[Utility.scala 54:14]
    rom[374] <= UInt<32>("h020000") @[Utility.scala 54:14]
    rom[375] <= UInt<32>("h0381000") @[Utility.scala 54:14]
    rom[376] <= UInt<32>("h0322000") @[Utility.scala 54:14]
    rom[377] <= UInt<32>("h02e3000") @[Utility.scala 54:14]
    rom[378] <= UInt<32>("h04400214") @[Utility.scala 54:14]
    rom[379] <= UInt<32>("h087c20000") @[Utility.scala 54:14]
    rom[380] <= UInt<32>("h0f0090000") @[Utility.scala 54:14]
    rom[381] <= UInt<32>("h02c21d80") @[Utility.scala 54:14]
    rom[382] <= UInt<32>("h02c4000") @[Utility.scala 54:14]
    rom[383] <= UInt<32>("h0440001") @[Utility.scala 54:14]
    rom[384] <= UInt<32>("h0203c060") @[Utility.scala 54:14]
    rom[385] <= UInt<32>("h0cfffff6") @[Utility.scala 54:14]
    rom[386] <= UInt<32>("h080000") @[Utility.scala 54:14]
    rom[387] <= UInt<32>("h060000") @[Utility.scala 54:14]
    rom[388] <= UInt<32>("h040003") @[Utility.scala 54:14]
    rom[389] <= UInt<32>("h02022b34") @[Utility.scala 54:14]
    rom[390] <= UInt<32>("h0c800005") @[Utility.scala 54:14]
    rom[391] <= UInt<32>("h0c57008") @[Utility.scala 54:14]
    rom[392] <= UInt<32>("h04c0005d") @[Utility.scala 54:14]
    rom[393] <= UInt<32>("h02061106") @[Utility.scala 54:14]
    rom[394] <= UInt<32>("h059000") @[Utility.scala 54:14]
    rom[395] <= UInt<32>("h05c004") @[Utility.scala 54:14]
    rom[396] <= UInt<32>("h02022b35") @[Utility.scala 54:14]
    rom[397] <= UInt<32>("h0c800025") @[Utility.scala 54:14]
    rom[398] <= UInt<32>("h02081c82") @[Utility.scala 54:14]
    rom[399] <= UInt<32>("h060008") @[Utility.scala 54:14]
    rom[400] <= UInt<32>("h01044001") @[Utility.scala 54:14]
    rom[401] <= UInt<32>("h02024036") @[Utility.scala 54:14]
    rom[402] <= UInt<32>("h087c42002") @[Utility.scala 54:14]
    rom[403] <= UInt<32>("h0edb88320") @[Utility.scala 54:14]
    rom[404] <= UInt<32>("h0202104a") @[Utility.scala 54:14]
    rom[405] <= UInt<32>("h09044001") @[Utility.scala 54:14]
    rom[406] <= UInt<32>("h082000") @[Utility.scala 54:14]
    rom[407] <= UInt<32>("h0463001") @[Utility.scala 54:14]
    rom[408] <= UInt<32>("h02023031") @[Utility.scala 54:14]
    rom[409] <= UInt<32>("h0cbffff7") @[Utility.scala 54:14]
    rom[410] <= UInt<32>("h0c75003") @[Utility.scala 54:14]
    rom[411] <= UInt<32>("h0206300b") @[Utility.scala 54:14]
    rom[412] <= UInt<32>("h01c63018") @[Utility.scala 54:14]
    rom[413] <= UInt<32>("h028bf103") @[Utility.scala 54:14]
    rom[414] <= UInt<32>("h02021183") @[Utility.scala 54:14]
    rom[415] <= UInt<32>("h020a1286") @[Utility.scala 54:14]
    rom[416] <= UInt<32>("h020004") @[Utility.scala 54:14]
    rom[417] <= UInt<32>("h02021db4") @[Utility.scala 54:14]
    rom[418] <= UInt<32>("h0cc00013") @[Utility.scala 54:14]
    rom[419] <= UInt<32>("h0289f102") @[Utility.scala 54:14]
    rom[420] <= UInt<32>("h075001") @[Utility.scala 54:14]
    rom[421] <= UInt<32>("h02023261") @[Utility.scala 54:14]
    rom[422] <= UInt<32>("h0c800013") @[Utility.scala 54:14]
    rom[423] <= UInt<32>("h020004") @[Utility.scala 54:14]
    rom[424] <= UInt<32>("h02021db4") @[Utility.scala 54:14]
    rom[425] <= UInt<32>("h0c800018") @[Utility.scala 54:14]
    rom[426] <= UInt<32>("h087c3b00d") @[Utility.scala 54:14]
    rom[427] <= UInt<32>("h0f0008010") @[Utility.scala 54:14]
    rom[428] <= UInt<32>("h02861100") @[Utility.scala 54:14]
    rom[429] <= UInt<32>("h025000") @[Utility.scala 54:14]
    rom[430] <= UInt<32>("h06003005") @[Utility.scala 54:14]
    rom[431] <= UInt<32>("h04c00012") @[Utility.scala 54:14]
    rom[432] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[433] <= UInt<32>("h02c5f284") @[Utility.scala 54:14]
    rom[434] <= UInt<32>("h04c00033") @[Utility.scala 54:14]
    rom[435] <= UInt<32>("h059000") @[Utility.scala 54:14]
    rom[436] <= UInt<32>("h077000") @[Utility.scala 54:14]
    rom[437] <= UInt<32>("h02035c00") @[Utility.scala 54:14]
    rom[438] <= UInt<32>("h087c21007") @[Utility.scala 54:14]
    rom[439] <= UInt<32>("h0fffffffc") @[Utility.scala 54:14]
    rom[440] <= UInt<32>("h02c61280") @[Utility.scala 54:14]
    rom[441] <= UInt<32>("h04c0000c") @[Utility.scala 54:14]
    rom[442] <= UInt<32>("h0283f101") @[Utility.scala 54:14]
    rom[443] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[444] <= UInt<32>("h085000") @[Utility.scala 54:14]
    rom[445] <= UInt<32>("h04800004") @[Utility.scala 54:14]
    rom[446] <= UInt<32>("h0305000") @[Utility.scala 54:14]
    rom[447] <= UInt<32>("h04800002") @[Utility.scala 54:14]
    rom[448] <= UInt<32>("h0345000") @[Utility.scala 54:14]
    rom[449] <= UInt<32>("h0283f101") @[Utility.scala 54:14]
    rom[450] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[451] <= UInt<32>("h037b001") @[Utility.scala 54:14]
    rom[452] <= UInt<32>("h060000") @[Utility.scala 54:14]
    rom[453] <= UInt<32>("h02023230") @[Utility.scala 54:14]
    rom[454] <= UInt<32>("h0205b2e0") @[Utility.scala 54:14]
    rom[455] <= UInt<32>("h020220c7") @[Utility.scala 54:14]
    rom[456] <= UInt<32>("h04c800015") @[Utility.scala 54:14]
    rom[457] <= UInt<32>("h064003") @[Utility.scala 54:14]
    rom[458] <= UInt<32>("h087c63007") @[Utility.scala 54:14]
    rom[459] <= UInt<32>("h0fffffffc") @[Utility.scala 54:14]
    rom[460] <= UInt<32>("h0203a1b5") @[Utility.scala 54:14]
    rom[461] <= UInt<32>("h0cc0000a") @[Utility.scala 54:14]
    rom[462] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[463] <= UInt<32>("h02c5f202") @[Utility.scala 54:14]
    rom[464] <= UInt<32>("h02098180") @[Utility.scala 54:14]
    rom[465] <= UInt<32>("h063004") @[Utility.scala 54:14]
    rom[466] <= UInt<32>("h02023d34") @[Utility.scala 54:14]
    rom[467] <= UInt<32>("h0cfffffd") @[Utility.scala 54:14]
    rom[468] <= UInt<32>("h087c84007") @[Utility.scala 54:14]
    rom[469] <= UInt<32>("h0fffffffc") @[Utility.scala 54:14]
    rom[470] <= UInt<32>("h02c64000") @[Utility.scala 54:14]
    rom[471] <= UInt<32>("h0360002") @[Utility.scala 54:14]
    rom[472] <= UInt<32>("h02a0000") @[Utility.scala 54:14]
    rom[473] <= UInt<32>("h0287f100") @[Utility.scala 54:14]
    rom[474] <= UInt<32>("h04c00005") @[Utility.scala 54:14]
    rom[475] <= UInt<32>("h063001") @[Utility.scala 54:14]
    rom[476] <= UInt<32>("h02c5f180") @[Utility.scala 54:14]
    rom[477] <= UInt<32>("h02c5f202") @[Utility.scala 54:14]
    rom[478] <= UInt<32>("h02a3000") @[Utility.scala 54:14]
    rom[479] <= UInt<32>("h01c75003") @[Utility.scala 54:14]
    rom[480] <= UInt<32>("h02023060") @[Utility.scala 54:14]
    rom[481] <= UInt<32>("h080a0000") @[Utility.scala 54:14]
    rom[482] <= UInt<32>("h02c5f283") @[Utility.scala 54:14]
    rom[483] <= UInt<32>("h02c5f081") @[Utility.scala 54:14]
    rom[484] <= UInt<32>("h077000") @[Utility.scala 54:14]
    rom[485] <= UInt<32>("h03c003") @[Utility.scala 54:14]
    rom[486] <= UInt<32>("h020360b1") @[Utility.scala 54:14]
    rom[487] <= UInt<32>("h0cffff90") @[Utility.scala 54:14]
    rom[488] <= UInt<32>("h096001") @[Utility.scala 54:14]
    rom[489] <= UInt<32>("h03c000") @[Utility.scala 54:14]
    rom[490] <= UInt<32>("h087c20000") @[Utility.scala 54:14]
    rom[491] <= UInt<32>("h0f0080000") @[Utility.scala 54:14]
    rom[492] <= UInt<32>("h02821080") @[Utility.scala 54:14]
    rom[493] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[494] <= UInt<32>("h02021036") @[Utility.scala 54:14]
    rom[495] <= UInt<32>("h04cbffffb") @[Utility.scala 54:14]
    rom[496] <= UInt<32>("h0202200b") @[Utility.scala 54:14]
    rom[497] <= UInt<32>("h01c410ff") @[Utility.scala 54:14]
    rom[498] <= UInt<32>("h087ca0000") @[Utility.scala 54:14]
    rom[499] <= UInt<32>("h0f0080000") @[Utility.scala 54:14]
    rom[500] <= UInt<32>("h020230b1") @[Utility.scala 54:14]
    rom[501] <= UInt<32>("h0cc0000c") @[Utility.scala 54:14]
    rom[502] <= UInt<32>("h02c25101") @[Utility.scala 54:14]
    rom[503] <= UInt<32>("h020000") @[Utility.scala 54:14]
    rom[504] <= UInt<32>("h0283f100") @[Utility.scala 54:14]
    rom[505] <= UInt<32>("h0285f104") @[Utility.scala 54:14]
    rom[506] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[507] <= UInt<32>("h02021131") @[Utility.scala 54:14]
    rom[508] <= UInt<32>("h0cffff7b") @[Utility.scala 54:14]
    rom[509] <= UInt<32>("h020000") @[Utility.scala 54:14]
    rom[510] <= UInt<32>("h043000") @[Utility.scala 54:14]
    rom[511] <= UInt<32>("h0283f101") @[Utility.scala 54:14]
    rom[512] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[513] <= UInt<32>("h02adf109") @[Utility.scala 54:14]
    rom[514] <= UInt<32>("h02aff10a") @[Utility.scala 54:14]
    rom[515] <= UInt<32>("h02b1f10b") @[Utility.scala 54:14]
    rom[516] <= UInt<32>("h02b3f10c") @[Utility.scala 54:14]
    rom[517] <= UInt<32>("h02b5f10d") @[Utility.scala 54:14]
    rom[518] <= UInt<32>("h02b7f10e") @[Utility.scala 54:14]
    rom[519] <= UInt<32>("h02b9f10f") @[Utility.scala 54:14]
    rom[520] <= UInt<32>("h0293f107") @[Utility.scala 54:14]
    rom[521] <= UInt<32>("h02abf108") @[Utility.scala 54:14]
    rom[522] <= UInt<32>("h02409028") @[Utility.scala 54:14]
    rom[523] <= UInt<32>("h0293f106") @[Utility.scala 54:14]
    rom[524] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[525] <= UInt<32>("h02409027") @[Utility.scala 54:14]
    rom[526] <= UInt<32>("h0293f105") @[Utility.scala 54:14]
    rom[527] <= UInt<32>("h06400000") @[Utility.scala 54:14]
    rom[528] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[529] <= UInt<32>("h02409020") @[Utility.scala 54:14]
    rom[530] <= UInt<32>("h03ff040") @[Utility.scala 54:14]
    rom[531] <= UInt<32>("h01a4") @[Utility.scala 54:14]
    rom[532] <= UInt<32>("h087c20000") @[Utility.scala 54:14]
    rom[533] <= UInt<32>("h020000") @[Utility.scala 54:14]
    rom[534] <= UInt<32>("h087c40000") @[Utility.scala 54:14]
    rom[535] <= UInt<32>("h020404") @[Utility.scala 54:14]
    rom[536] <= UInt<32>("h02821100") @[Utility.scala 54:14]
    rom[537] <= UInt<32>("h02842100") @[Utility.scala 54:14]
    rom[538] <= UInt<32>("h024c0030") @[Utility.scala 54:14]
    rom[539] <= UInt<32>("h020220b1") @[Utility.scala 54:14]
    rom[540] <= UInt<32>("h0c800055") @[Utility.scala 54:14]
    rom[541] <= UInt<32>("h087c40000") @[Utility.scala 54:14]
    rom[542] <= UInt<32>("h020408") @[Utility.scala 54:14]
    rom[543] <= UInt<32>("h02822100") @[Utility.scala 54:14]
    rom[544] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[545] <= UInt<32>("h01021001") @[Utility.scala 54:14]
    rom[546] <= UInt<32>("h02021466") @[Utility.scala 54:14]
    rom[547] <= UInt<32>("h0cc00012") @[Utility.scala 54:14]
    rom[548] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[549] <= UInt<32>("h02c42080") @[Utility.scala 54:14]
    rom[550] <= UInt<32>("h087c20000") @[Utility.scala 54:14]
    rom[551] <= UInt<32>("h0f0080000") @[Utility.scala 54:14]
    rom[552] <= UInt<32>("h02821080") @[Utility.scala 54:14]
    rom[553] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[554] <= UInt<32>("h01c21002") @[Utility.scala 54:14]
    rom[555] <= UInt<32>("h02021060") @[Utility.scala 54:14]
    rom[556] <= UInt<32>("h0cbffffa") @[Utility.scala 54:14]
    rom[557] <= UInt<32>("h087c20000") @[Utility.scala 54:14]
    rom[558] <= UInt<32>("h0f0080000") @[Utility.scala 54:14]
    rom[559] <= UInt<32>("h02821081") @[Utility.scala 54:14]
    rom[560] <= UInt<32>("h087c40000") @[Utility.scala 54:14]
    rom[561] <= UInt<32>("h020408") @[Utility.scala 54:14]
    rom[562] <= UInt<32>("h087c21006") @[Utility.scala 54:14]
    rom[563] <= UInt<32>("h0ff00") @[Utility.scala 54:14]
    rom[564] <= UInt<32>("h02c42080") @[Utility.scala 54:14]
    rom[565] <= UInt<32>("h01c41001") @[Utility.scala 54:14]
    rom[566] <= UInt<32>("h087c20000") @[Utility.scala 54:14]
    rom[567] <= UInt<32>("h0f0080000") @[Utility.scala 54:14]
    rom[568] <= UInt<32>("h02821080") @[Utility.scala 54:14]
    rom[569] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[570] <= UInt<32>("h01c21002") @[Utility.scala 54:14]
    rom[571] <= UInt<32>("h02021060") @[Utility.scala 54:14]
    rom[572] <= UInt<32>("h0cbffffa") @[Utility.scala 54:14]
    rom[573] <= UInt<32>("h02022060") @[Utility.scala 54:14]
    rom[574] <= UInt<32>("h087c20000") @[Utility.scala 54:14]
    rom[575] <= UInt<32>("h0f0080000") @[Utility.scala 54:14]
    rom[576] <= UInt<32>("h0cc0000e") @[Utility.scala 54:14]
    rom[577] <= UInt<32>("h02821081") @[Utility.scala 54:14]
    rom[578] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[579] <= UInt<32>("h087c40000") @[Utility.scala 54:14]
    rom[580] <= UInt<32>("h020000") @[Utility.scala 54:14]
    rom[581] <= UInt<32>("h02862100") @[Utility.scala 54:14]
    rom[582] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[583] <= UInt<32>("h087c83000") @[Utility.scala 54:14]
    rom[584] <= UInt<32>("h020004") @[Utility.scala 54:14]
    rom[585] <= UInt<32>("h02d44080") @[Utility.scala 54:14]
    rom[586] <= UInt<32>("h023001") @[Utility.scala 54:14]
    rom[587] <= UInt<32>("h04c00026") @[Utility.scala 54:14]
    rom[588] <= UInt<32>("h01c213ff") @[Utility.scala 54:14]
    rom[589] <= UInt<32>("h02c42080") @[Utility.scala 54:14]
    rom[590] <= UInt<32>("h087c40000") @[Utility.scala 54:14]
    rom[591] <= UInt<32>("h0f0080000") @[Utility.scala 54:14]
    rom[592] <= UInt<32>("h02842080") @[Utility.scala 54:14]
    rom[593] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[594] <= UInt<32>("h01c42002") @[Utility.scala 54:14]
    rom[595] <= UInt<32>("h02022060") @[Utility.scala 54:14]
    rom[596] <= UInt<32>("h0cbffffa") @[Utility.scala 54:14]
    rom[597] <= UInt<32>("h087c40000") @[Utility.scala 54:14]
    rom[598] <= UInt<32>("h0f0080000") @[Utility.scala 54:14]
    rom[599] <= UInt<32>("h02862081") @[Utility.scala 54:14]
    rom[600] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[601] <= UInt<32>("h0c43002") @[Utility.scala 54:14]
    rom[602] <= UInt<32>("h01c42300") @[Utility.scala 54:14]
    rom[603] <= UInt<32>("h02022086") @[Utility.scala 54:14]
    rom[604] <= UInt<32>("h087c40000") @[Utility.scala 54:14]
    rom[605] <= UInt<32>("h020000") @[Utility.scala 54:14]
    rom[606] <= UInt<32>("h02842100") @[Utility.scala 54:14]
    rom[607] <= UInt<32>("h01c6303f") @[Utility.scala 54:14]
    rom[608] <= UInt<32>("h02063080") @[Utility.scala 54:14]
    rom[609] <= UInt<32>("h063002") @[Utility.scala 54:14]
    rom[610] <= UInt<32>("h01c813ff") @[Utility.scala 54:14]
    rom[611] <= UInt<32>("h087c84000") @[Utility.scala 54:14]
    rom[612] <= UInt<32>("h020004") @[Utility.scala 54:14]
    rom[613] <= UInt<32>("h02884900") @[Utility.scala 54:14]
    rom[614] <= UInt<32>("h087ca2000") @[Utility.scala 54:14]
    rom[615] <= UInt<32>("h020004") @[Utility.scala 54:14]
    rom[616] <= UInt<32>("h02d45200") @[Utility.scala 54:14]
    rom[617] <= UInt<32>("h020211b2") @[Utility.scala 54:14]
    rom[618] <= UInt<32>("h021001") @[Utility.scala 54:14]
    rom[619] <= UInt<32>("h0cfffff7") @[Utility.scala 54:14]
    rom[620] <= UInt<32>("h042001") @[Utility.scala 54:14]
    rom[621] <= UInt<32>("h01c423ff") @[Utility.scala 54:14]
    rom[622] <= UInt<32>("h087c20000") @[Utility.scala 54:14]
    rom[623] <= UInt<32>("h020000") @[Utility.scala 54:14]
    rom[624] <= UInt<32>("h02c41100") @[Utility.scala 54:14]
    rom[625] <= UInt<32>("h087c40000") @[Utility.scala 54:14]
    rom[626] <= UInt<32>("h020404") @[Utility.scala 54:14]
    rom[627] <= UInt<32>("h02862100") @[Utility.scala 54:14]
    rom[628] <= UInt<32>("h0400000") @[Utility.scala 54:14]
    rom[629] <= UInt<32>("h087c23000") @[Utility.scala 54:14]
    rom[630] <= UInt<32>("h020004") @[Utility.scala 54:14]
    rom[631] <= UInt<32>("h063001") @[Utility.scala 54:14]
    rom[632] <= UInt<32>("h01c633ff") @[Utility.scala 54:14]
    rom[633] <= UInt<32>("h06400000") @[Utility.scala 54:14]
    rom[634] <= UInt<32>("h02821900") @[Utility.scala 54:14]
    rom[635] <= UInt<32>("h02c42180") @[Utility.scala 54:14]
    rom[636] <= UInt<32>("h02406020") @[Utility.scala 54:14]
    wire romEven : UInt<32>[512] @[Fetch.scala 32:20]
    romEven is invalid @[Fetch.scala 32:20]
    romEven[0] <= rom[0] @[Fetch.scala 32:20]
    romEven[1] <= rom[2] @[Fetch.scala 32:20]
    romEven[2] <= rom[4] @[Fetch.scala 32:20]
    romEven[3] <= rom[6] @[Fetch.scala 32:20]
    romEven[4] <= rom[8] @[Fetch.scala 32:20]
    romEven[5] <= rom[10] @[Fetch.scala 32:20]
    romEven[6] <= rom[12] @[Fetch.scala 32:20]
    romEven[7] <= rom[14] @[Fetch.scala 32:20]
    romEven[8] <= rom[16] @[Fetch.scala 32:20]
    romEven[9] <= rom[18] @[Fetch.scala 32:20]
    romEven[10] <= rom[20] @[Fetch.scala 32:20]
    romEven[11] <= rom[22] @[Fetch.scala 32:20]
    romEven[12] <= rom[24] @[Fetch.scala 32:20]
    romEven[13] <= rom[26] @[Fetch.scala 32:20]
    romEven[14] <= rom[28] @[Fetch.scala 32:20]
    romEven[15] <= rom[30] @[Fetch.scala 32:20]
    romEven[16] <= rom[32] @[Fetch.scala 32:20]
    romEven[17] <= rom[34] @[Fetch.scala 32:20]
    romEven[18] <= rom[36] @[Fetch.scala 32:20]
    romEven[19] <= rom[38] @[Fetch.scala 32:20]
    romEven[20] <= rom[40] @[Fetch.scala 32:20]
    romEven[21] <= rom[42] @[Fetch.scala 32:20]
    romEven[22] <= rom[44] @[Fetch.scala 32:20]
    romEven[23] <= rom[46] @[Fetch.scala 32:20]
    romEven[24] <= rom[48] @[Fetch.scala 32:20]
    romEven[25] <= rom[50] @[Fetch.scala 32:20]
    romEven[26] <= rom[52] @[Fetch.scala 32:20]
    romEven[27] <= rom[54] @[Fetch.scala 32:20]
    romEven[28] <= rom[56] @[Fetch.scala 32:20]
    romEven[29] <= rom[58] @[Fetch.scala 32:20]
    romEven[30] <= rom[60] @[Fetch.scala 32:20]
    romEven[31] <= rom[62] @[Fetch.scala 32:20]
    romEven[32] <= rom[64] @[Fetch.scala 32:20]
    romEven[33] <= rom[66] @[Fetch.scala 32:20]
    romEven[34] <= rom[68] @[Fetch.scala 32:20]
    romEven[35] <= rom[70] @[Fetch.scala 32:20]
    romEven[36] <= rom[72] @[Fetch.scala 32:20]
    romEven[37] <= rom[74] @[Fetch.scala 32:20]
    romEven[38] <= rom[76] @[Fetch.scala 32:20]
    romEven[39] <= rom[78] @[Fetch.scala 32:20]
    romEven[40] <= rom[80] @[Fetch.scala 32:20]
    romEven[41] <= rom[82] @[Fetch.scala 32:20]
    romEven[42] <= rom[84] @[Fetch.scala 32:20]
    romEven[43] <= rom[86] @[Fetch.scala 32:20]
    romEven[44] <= rom[88] @[Fetch.scala 32:20]
    romEven[45] <= rom[90] @[Fetch.scala 32:20]
    romEven[46] <= rom[92] @[Fetch.scala 32:20]
    romEven[47] <= rom[94] @[Fetch.scala 32:20]
    romEven[48] <= rom[96] @[Fetch.scala 32:20]
    romEven[49] <= rom[98] @[Fetch.scala 32:20]
    romEven[50] <= rom[100] @[Fetch.scala 32:20]
    romEven[51] <= rom[102] @[Fetch.scala 32:20]
    romEven[52] <= rom[104] @[Fetch.scala 32:20]
    romEven[53] <= rom[106] @[Fetch.scala 32:20]
    romEven[54] <= rom[108] @[Fetch.scala 32:20]
    romEven[55] <= rom[110] @[Fetch.scala 32:20]
    romEven[56] <= rom[112] @[Fetch.scala 32:20]
    romEven[57] <= rom[114] @[Fetch.scala 32:20]
    romEven[58] <= rom[116] @[Fetch.scala 32:20]
    romEven[59] <= rom[118] @[Fetch.scala 32:20]
    romEven[60] <= rom[120] @[Fetch.scala 32:20]
    romEven[61] <= rom[122] @[Fetch.scala 32:20]
    romEven[62] <= rom[124] @[Fetch.scala 32:20]
    romEven[63] <= rom[126] @[Fetch.scala 32:20]
    romEven[64] <= rom[128] @[Fetch.scala 32:20]
    romEven[65] <= rom[130] @[Fetch.scala 32:20]
    romEven[66] <= rom[132] @[Fetch.scala 32:20]
    romEven[67] <= rom[134] @[Fetch.scala 32:20]
    romEven[68] <= rom[136] @[Fetch.scala 32:20]
    romEven[69] <= rom[138] @[Fetch.scala 32:20]
    romEven[70] <= rom[140] @[Fetch.scala 32:20]
    romEven[71] <= rom[142] @[Fetch.scala 32:20]
    romEven[72] <= rom[144] @[Fetch.scala 32:20]
    romEven[73] <= rom[146] @[Fetch.scala 32:20]
    romEven[74] <= rom[148] @[Fetch.scala 32:20]
    romEven[75] <= rom[150] @[Fetch.scala 32:20]
    romEven[76] <= rom[152] @[Fetch.scala 32:20]
    romEven[77] <= rom[154] @[Fetch.scala 32:20]
    romEven[78] <= rom[156] @[Fetch.scala 32:20]
    romEven[79] <= rom[158] @[Fetch.scala 32:20]
    romEven[80] <= rom[160] @[Fetch.scala 32:20]
    romEven[81] <= rom[162] @[Fetch.scala 32:20]
    romEven[82] <= rom[164] @[Fetch.scala 32:20]
    romEven[83] <= rom[166] @[Fetch.scala 32:20]
    romEven[84] <= rom[168] @[Fetch.scala 32:20]
    romEven[85] <= rom[170] @[Fetch.scala 32:20]
    romEven[86] <= rom[172] @[Fetch.scala 32:20]
    romEven[87] <= rom[174] @[Fetch.scala 32:20]
    romEven[88] <= rom[176] @[Fetch.scala 32:20]
    romEven[89] <= rom[178] @[Fetch.scala 32:20]
    romEven[90] <= rom[180] @[Fetch.scala 32:20]
    romEven[91] <= rom[182] @[Fetch.scala 32:20]
    romEven[92] <= rom[184] @[Fetch.scala 32:20]
    romEven[93] <= rom[186] @[Fetch.scala 32:20]
    romEven[94] <= rom[188] @[Fetch.scala 32:20]
    romEven[95] <= rom[190] @[Fetch.scala 32:20]
    romEven[96] <= rom[192] @[Fetch.scala 32:20]
    romEven[97] <= rom[194] @[Fetch.scala 32:20]
    romEven[98] <= rom[196] @[Fetch.scala 32:20]
    romEven[99] <= rom[198] @[Fetch.scala 32:20]
    romEven[100] <= rom[200] @[Fetch.scala 32:20]
    romEven[101] <= rom[202] @[Fetch.scala 32:20]
    romEven[102] <= rom[204] @[Fetch.scala 32:20]
    romEven[103] <= rom[206] @[Fetch.scala 32:20]
    romEven[104] <= rom[208] @[Fetch.scala 32:20]
    romEven[105] <= rom[210] @[Fetch.scala 32:20]
    romEven[106] <= rom[212] @[Fetch.scala 32:20]
    romEven[107] <= rom[214] @[Fetch.scala 32:20]
    romEven[108] <= rom[216] @[Fetch.scala 32:20]
    romEven[109] <= rom[218] @[Fetch.scala 32:20]
    romEven[110] <= rom[220] @[Fetch.scala 32:20]
    romEven[111] <= rom[222] @[Fetch.scala 32:20]
    romEven[112] <= rom[224] @[Fetch.scala 32:20]
    romEven[113] <= rom[226] @[Fetch.scala 32:20]
    romEven[114] <= rom[228] @[Fetch.scala 32:20]
    romEven[115] <= rom[230] @[Fetch.scala 32:20]
    romEven[116] <= rom[232] @[Fetch.scala 32:20]
    romEven[117] <= rom[234] @[Fetch.scala 32:20]
    romEven[118] <= rom[236] @[Fetch.scala 32:20]
    romEven[119] <= rom[238] @[Fetch.scala 32:20]
    romEven[120] <= rom[240] @[Fetch.scala 32:20]
    romEven[121] <= rom[242] @[Fetch.scala 32:20]
    romEven[122] <= rom[244] @[Fetch.scala 32:20]
    romEven[123] <= rom[246] @[Fetch.scala 32:20]
    romEven[124] <= rom[248] @[Fetch.scala 32:20]
    romEven[125] <= rom[250] @[Fetch.scala 32:20]
    romEven[126] <= rom[252] @[Fetch.scala 32:20]
    romEven[127] <= rom[254] @[Fetch.scala 32:20]
    romEven[128] <= rom[256] @[Fetch.scala 32:20]
    romEven[129] <= rom[258] @[Fetch.scala 32:20]
    romEven[130] <= rom[260] @[Fetch.scala 32:20]
    romEven[131] <= rom[262] @[Fetch.scala 32:20]
    romEven[132] <= rom[264] @[Fetch.scala 32:20]
    romEven[133] <= rom[266] @[Fetch.scala 32:20]
    romEven[134] <= rom[268] @[Fetch.scala 32:20]
    romEven[135] <= rom[270] @[Fetch.scala 32:20]
    romEven[136] <= rom[272] @[Fetch.scala 32:20]
    romEven[137] <= rom[274] @[Fetch.scala 32:20]
    romEven[138] <= rom[276] @[Fetch.scala 32:20]
    romEven[139] <= rom[278] @[Fetch.scala 32:20]
    romEven[140] <= rom[280] @[Fetch.scala 32:20]
    romEven[141] <= rom[282] @[Fetch.scala 32:20]
    romEven[142] <= rom[284] @[Fetch.scala 32:20]
    romEven[143] <= rom[286] @[Fetch.scala 32:20]
    romEven[144] <= rom[288] @[Fetch.scala 32:20]
    romEven[145] <= rom[290] @[Fetch.scala 32:20]
    romEven[146] <= rom[292] @[Fetch.scala 32:20]
    romEven[147] <= rom[294] @[Fetch.scala 32:20]
    romEven[148] <= rom[296] @[Fetch.scala 32:20]
    romEven[149] <= rom[298] @[Fetch.scala 32:20]
    romEven[150] <= rom[300] @[Fetch.scala 32:20]
    romEven[151] <= rom[302] @[Fetch.scala 32:20]
    romEven[152] <= rom[304] @[Fetch.scala 32:20]
    romEven[153] <= rom[306] @[Fetch.scala 32:20]
    romEven[154] <= rom[308] @[Fetch.scala 32:20]
    romEven[155] <= rom[310] @[Fetch.scala 32:20]
    romEven[156] <= rom[312] @[Fetch.scala 32:20]
    romEven[157] <= rom[314] @[Fetch.scala 32:20]
    romEven[158] <= rom[316] @[Fetch.scala 32:20]
    romEven[159] <= rom[318] @[Fetch.scala 32:20]
    romEven[160] <= rom[320] @[Fetch.scala 32:20]
    romEven[161] <= rom[322] @[Fetch.scala 32:20]
    romEven[162] <= rom[324] @[Fetch.scala 32:20]
    romEven[163] <= rom[326] @[Fetch.scala 32:20]
    romEven[164] <= rom[328] @[Fetch.scala 32:20]
    romEven[165] <= rom[330] @[Fetch.scala 32:20]
    romEven[166] <= rom[332] @[Fetch.scala 32:20]
    romEven[167] <= rom[334] @[Fetch.scala 32:20]
    romEven[168] <= rom[336] @[Fetch.scala 32:20]
    romEven[169] <= rom[338] @[Fetch.scala 32:20]
    romEven[170] <= rom[340] @[Fetch.scala 32:20]
    romEven[171] <= rom[342] @[Fetch.scala 32:20]
    romEven[172] <= rom[344] @[Fetch.scala 32:20]
    romEven[173] <= rom[346] @[Fetch.scala 32:20]
    romEven[174] <= rom[348] @[Fetch.scala 32:20]
    romEven[175] <= rom[350] @[Fetch.scala 32:20]
    romEven[176] <= rom[352] @[Fetch.scala 32:20]
    romEven[177] <= rom[354] @[Fetch.scala 32:20]
    romEven[178] <= rom[356] @[Fetch.scala 32:20]
    romEven[179] <= rom[358] @[Fetch.scala 32:20]
    romEven[180] <= rom[360] @[Fetch.scala 32:20]
    romEven[181] <= rom[362] @[Fetch.scala 32:20]
    romEven[182] <= rom[364] @[Fetch.scala 32:20]
    romEven[183] <= rom[366] @[Fetch.scala 32:20]
    romEven[184] <= rom[368] @[Fetch.scala 32:20]
    romEven[185] <= rom[370] @[Fetch.scala 32:20]
    romEven[186] <= rom[372] @[Fetch.scala 32:20]
    romEven[187] <= rom[374] @[Fetch.scala 32:20]
    romEven[188] <= rom[376] @[Fetch.scala 32:20]
    romEven[189] <= rom[378] @[Fetch.scala 32:20]
    romEven[190] <= rom[380] @[Fetch.scala 32:20]
    romEven[191] <= rom[382] @[Fetch.scala 32:20]
    romEven[192] <= rom[384] @[Fetch.scala 32:20]
    romEven[193] <= rom[386] @[Fetch.scala 32:20]
    romEven[194] <= rom[388] @[Fetch.scala 32:20]
    romEven[195] <= rom[390] @[Fetch.scala 32:20]
    romEven[196] <= rom[392] @[Fetch.scala 32:20]
    romEven[197] <= rom[394] @[Fetch.scala 32:20]
    romEven[198] <= rom[396] @[Fetch.scala 32:20]
    romEven[199] <= rom[398] @[Fetch.scala 32:20]
    romEven[200] <= rom[400] @[Fetch.scala 32:20]
    romEven[201] <= rom[402] @[Fetch.scala 32:20]
    romEven[202] <= rom[404] @[Fetch.scala 32:20]
    romEven[203] <= rom[406] @[Fetch.scala 32:20]
    romEven[204] <= rom[408] @[Fetch.scala 32:20]
    romEven[205] <= rom[410] @[Fetch.scala 32:20]
    romEven[206] <= rom[412] @[Fetch.scala 32:20]
    romEven[207] <= rom[414] @[Fetch.scala 32:20]
    romEven[208] <= rom[416] @[Fetch.scala 32:20]
    romEven[209] <= rom[418] @[Fetch.scala 32:20]
    romEven[210] <= rom[420] @[Fetch.scala 32:20]
    romEven[211] <= rom[422] @[Fetch.scala 32:20]
    romEven[212] <= rom[424] @[Fetch.scala 32:20]
    romEven[213] <= rom[426] @[Fetch.scala 32:20]
    romEven[214] <= rom[428] @[Fetch.scala 32:20]
    romEven[215] <= rom[430] @[Fetch.scala 32:20]
    romEven[216] <= rom[432] @[Fetch.scala 32:20]
    romEven[217] <= rom[434] @[Fetch.scala 32:20]
    romEven[218] <= rom[436] @[Fetch.scala 32:20]
    romEven[219] <= rom[438] @[Fetch.scala 32:20]
    romEven[220] <= rom[440] @[Fetch.scala 32:20]
    romEven[221] <= rom[442] @[Fetch.scala 32:20]
    romEven[222] <= rom[444] @[Fetch.scala 32:20]
    romEven[223] <= rom[446] @[Fetch.scala 32:20]
    romEven[224] <= rom[448] @[Fetch.scala 32:20]
    romEven[225] <= rom[450] @[Fetch.scala 32:20]
    romEven[226] <= rom[452] @[Fetch.scala 32:20]
    romEven[227] <= rom[454] @[Fetch.scala 32:20]
    romEven[228] <= rom[456] @[Fetch.scala 32:20]
    romEven[229] <= rom[458] @[Fetch.scala 32:20]
    romEven[230] <= rom[460] @[Fetch.scala 32:20]
    romEven[231] <= rom[462] @[Fetch.scala 32:20]
    romEven[232] <= rom[464] @[Fetch.scala 32:20]
    romEven[233] <= rom[466] @[Fetch.scala 32:20]
    romEven[234] <= rom[468] @[Fetch.scala 32:20]
    romEven[235] <= rom[470] @[Fetch.scala 32:20]
    romEven[236] <= rom[472] @[Fetch.scala 32:20]
    romEven[237] <= rom[474] @[Fetch.scala 32:20]
    romEven[238] <= rom[476] @[Fetch.scala 32:20]
    romEven[239] <= rom[478] @[Fetch.scala 32:20]
    romEven[240] <= rom[480] @[Fetch.scala 32:20]
    romEven[241] <= rom[482] @[Fetch.scala 32:20]
    romEven[242] <= rom[484] @[Fetch.scala 32:20]
    romEven[243] <= rom[486] @[Fetch.scala 32:20]
    romEven[244] <= rom[488] @[Fetch.scala 32:20]
    romEven[245] <= rom[490] @[Fetch.scala 32:20]
    romEven[246] <= rom[492] @[Fetch.scala 32:20]
    romEven[247] <= rom[494] @[Fetch.scala 32:20]
    romEven[248] <= rom[496] @[Fetch.scala 32:20]
    romEven[249] <= rom[498] @[Fetch.scala 32:20]
    romEven[250] <= rom[500] @[Fetch.scala 32:20]
    romEven[251] <= rom[502] @[Fetch.scala 32:20]
    romEven[252] <= rom[504] @[Fetch.scala 32:20]
    romEven[253] <= rom[506] @[Fetch.scala 32:20]
    romEven[254] <= rom[508] @[Fetch.scala 32:20]
    romEven[255] <= rom[510] @[Fetch.scala 32:20]
    romEven[256] <= rom[512] @[Fetch.scala 32:20]
    romEven[257] <= rom[514] @[Fetch.scala 32:20]
    romEven[258] <= rom[516] @[Fetch.scala 32:20]
    romEven[259] <= rom[518] @[Fetch.scala 32:20]
    romEven[260] <= rom[520] @[Fetch.scala 32:20]
    romEven[261] <= rom[522] @[Fetch.scala 32:20]
    romEven[262] <= rom[524] @[Fetch.scala 32:20]
    romEven[263] <= rom[526] @[Fetch.scala 32:20]
    romEven[264] <= rom[528] @[Fetch.scala 32:20]
    romEven[265] <= rom[530] @[Fetch.scala 32:20]
    romEven[266] <= rom[532] @[Fetch.scala 32:20]
    romEven[267] <= rom[534] @[Fetch.scala 32:20]
    romEven[268] <= rom[536] @[Fetch.scala 32:20]
    romEven[269] <= rom[538] @[Fetch.scala 32:20]
    romEven[270] <= rom[540] @[Fetch.scala 32:20]
    romEven[271] <= rom[542] @[Fetch.scala 32:20]
    romEven[272] <= rom[544] @[Fetch.scala 32:20]
    romEven[273] <= rom[546] @[Fetch.scala 32:20]
    romEven[274] <= rom[548] @[Fetch.scala 32:20]
    romEven[275] <= rom[550] @[Fetch.scala 32:20]
    romEven[276] <= rom[552] @[Fetch.scala 32:20]
    romEven[277] <= rom[554] @[Fetch.scala 32:20]
    romEven[278] <= rom[556] @[Fetch.scala 32:20]
    romEven[279] <= rom[558] @[Fetch.scala 32:20]
    romEven[280] <= rom[560] @[Fetch.scala 32:20]
    romEven[281] <= rom[562] @[Fetch.scala 32:20]
    romEven[282] <= rom[564] @[Fetch.scala 32:20]
    romEven[283] <= rom[566] @[Fetch.scala 32:20]
    romEven[284] <= rom[568] @[Fetch.scala 32:20]
    romEven[285] <= rom[570] @[Fetch.scala 32:20]
    romEven[286] <= rom[572] @[Fetch.scala 32:20]
    romEven[287] <= rom[574] @[Fetch.scala 32:20]
    romEven[288] <= rom[576] @[Fetch.scala 32:20]
    romEven[289] <= rom[578] @[Fetch.scala 32:20]
    romEven[290] <= rom[580] @[Fetch.scala 32:20]
    romEven[291] <= rom[582] @[Fetch.scala 32:20]
    romEven[292] <= rom[584] @[Fetch.scala 32:20]
    romEven[293] <= rom[586] @[Fetch.scala 32:20]
    romEven[294] <= rom[588] @[Fetch.scala 32:20]
    romEven[295] <= rom[590] @[Fetch.scala 32:20]
    romEven[296] <= rom[592] @[Fetch.scala 32:20]
    romEven[297] <= rom[594] @[Fetch.scala 32:20]
    romEven[298] <= rom[596] @[Fetch.scala 32:20]
    romEven[299] <= rom[598] @[Fetch.scala 32:20]
    romEven[300] <= rom[600] @[Fetch.scala 32:20]
    romEven[301] <= rom[602] @[Fetch.scala 32:20]
    romEven[302] <= rom[604] @[Fetch.scala 32:20]
    romEven[303] <= rom[606] @[Fetch.scala 32:20]
    romEven[304] <= rom[608] @[Fetch.scala 32:20]
    romEven[305] <= rom[610] @[Fetch.scala 32:20]
    romEven[306] <= rom[612] @[Fetch.scala 32:20]
    romEven[307] <= rom[614] @[Fetch.scala 32:20]
    romEven[308] <= rom[616] @[Fetch.scala 32:20]
    romEven[309] <= rom[618] @[Fetch.scala 32:20]
    romEven[310] <= rom[620] @[Fetch.scala 32:20]
    romEven[311] <= rom[622] @[Fetch.scala 32:20]
    romEven[312] <= rom[624] @[Fetch.scala 32:20]
    romEven[313] <= rom[626] @[Fetch.scala 32:20]
    romEven[314] <= rom[628] @[Fetch.scala 32:20]
    romEven[315] <= rom[630] @[Fetch.scala 32:20]
    romEven[316] <= rom[632] @[Fetch.scala 32:20]
    romEven[317] <= rom[634] @[Fetch.scala 32:20]
    romEven[318] <= rom[636] @[Fetch.scala 32:20]
    romEven[319] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[320] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[321] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[322] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[323] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[324] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[325] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[326] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[327] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[328] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[329] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[330] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[331] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[332] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[333] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[334] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[335] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[336] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[337] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[338] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[339] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[340] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[341] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[342] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[343] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[344] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[345] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[346] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[347] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[348] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[349] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[350] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[351] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[352] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[353] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[354] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[355] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[356] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[357] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[358] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[359] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[360] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[361] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[362] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[363] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[364] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[365] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[366] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[367] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[368] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[369] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[370] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[371] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[372] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[373] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[374] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[375] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[376] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[377] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[378] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[379] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[380] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[381] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[382] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[383] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[384] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[385] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[386] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[387] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[388] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[389] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[390] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[391] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[392] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[393] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[394] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[395] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[396] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[397] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[398] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[399] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[400] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[401] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[402] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[403] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[404] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[405] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[406] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[407] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[408] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[409] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[410] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[411] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[412] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[413] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[414] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[415] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[416] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[417] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[418] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[419] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[420] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[421] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[422] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[423] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[424] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[425] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[426] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[427] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[428] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[429] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[430] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[431] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[432] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[433] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[434] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[435] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[436] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[437] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[438] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[439] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[440] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[441] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[442] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[443] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[444] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[445] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[446] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[447] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[448] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[449] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[450] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[451] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[452] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[453] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[454] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[455] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[456] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[457] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[458] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[459] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[460] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[461] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[462] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[463] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[464] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[465] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[466] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[467] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[468] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[469] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[470] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[471] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[472] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[473] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[474] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[475] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[476] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[477] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[478] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[479] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[480] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[481] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[482] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[483] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[484] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[485] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[486] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[487] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[488] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[489] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[490] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[491] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[492] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[493] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[494] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[495] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[496] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[497] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[498] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[499] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[500] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[501] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[502] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[503] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[504] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[505] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[506] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[507] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[508] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[509] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[510] <= UInt<1>("h00") @[Fetch.scala 32:20]
    romEven[511] <= UInt<1>("h00") @[Fetch.scala 32:20]
    wire romOdd : UInt<32>[512] @[Fetch.scala 33:20]
    romOdd is invalid @[Fetch.scala 33:20]
    romOdd[0] <= rom[1] @[Fetch.scala 33:20]
    romOdd[1] <= rom[3] @[Fetch.scala 33:20]
    romOdd[2] <= rom[5] @[Fetch.scala 33:20]
    romOdd[3] <= rom[7] @[Fetch.scala 33:20]
    romOdd[4] <= rom[9] @[Fetch.scala 33:20]
    romOdd[5] <= rom[11] @[Fetch.scala 33:20]
    romOdd[6] <= rom[13] @[Fetch.scala 33:20]
    romOdd[7] <= rom[15] @[Fetch.scala 33:20]
    romOdd[8] <= rom[17] @[Fetch.scala 33:20]
    romOdd[9] <= rom[19] @[Fetch.scala 33:20]
    romOdd[10] <= rom[21] @[Fetch.scala 33:20]
    romOdd[11] <= rom[23] @[Fetch.scala 33:20]
    romOdd[12] <= rom[25] @[Fetch.scala 33:20]
    romOdd[13] <= rom[27] @[Fetch.scala 33:20]
    romOdd[14] <= rom[29] @[Fetch.scala 33:20]
    romOdd[15] <= rom[31] @[Fetch.scala 33:20]
    romOdd[16] <= rom[33] @[Fetch.scala 33:20]
    romOdd[17] <= rom[35] @[Fetch.scala 33:20]
    romOdd[18] <= rom[37] @[Fetch.scala 33:20]
    romOdd[19] <= rom[39] @[Fetch.scala 33:20]
    romOdd[20] <= rom[41] @[Fetch.scala 33:20]
    romOdd[21] <= rom[43] @[Fetch.scala 33:20]
    romOdd[22] <= rom[45] @[Fetch.scala 33:20]
    romOdd[23] <= rom[47] @[Fetch.scala 33:20]
    romOdd[24] <= rom[49] @[Fetch.scala 33:20]
    romOdd[25] <= rom[51] @[Fetch.scala 33:20]
    romOdd[26] <= rom[53] @[Fetch.scala 33:20]
    romOdd[27] <= rom[55] @[Fetch.scala 33:20]
    romOdd[28] <= rom[57] @[Fetch.scala 33:20]
    romOdd[29] <= rom[59] @[Fetch.scala 33:20]
    romOdd[30] <= rom[61] @[Fetch.scala 33:20]
    romOdd[31] <= rom[63] @[Fetch.scala 33:20]
    romOdd[32] <= rom[65] @[Fetch.scala 33:20]
    romOdd[33] <= rom[67] @[Fetch.scala 33:20]
    romOdd[34] <= rom[69] @[Fetch.scala 33:20]
    romOdd[35] <= rom[71] @[Fetch.scala 33:20]
    romOdd[36] <= rom[73] @[Fetch.scala 33:20]
    romOdd[37] <= rom[75] @[Fetch.scala 33:20]
    romOdd[38] <= rom[77] @[Fetch.scala 33:20]
    romOdd[39] <= rom[79] @[Fetch.scala 33:20]
    romOdd[40] <= rom[81] @[Fetch.scala 33:20]
    romOdd[41] <= rom[83] @[Fetch.scala 33:20]
    romOdd[42] <= rom[85] @[Fetch.scala 33:20]
    romOdd[43] <= rom[87] @[Fetch.scala 33:20]
    romOdd[44] <= rom[89] @[Fetch.scala 33:20]
    romOdd[45] <= rom[91] @[Fetch.scala 33:20]
    romOdd[46] <= rom[93] @[Fetch.scala 33:20]
    romOdd[47] <= rom[95] @[Fetch.scala 33:20]
    romOdd[48] <= rom[97] @[Fetch.scala 33:20]
    romOdd[49] <= rom[99] @[Fetch.scala 33:20]
    romOdd[50] <= rom[101] @[Fetch.scala 33:20]
    romOdd[51] <= rom[103] @[Fetch.scala 33:20]
    romOdd[52] <= rom[105] @[Fetch.scala 33:20]
    romOdd[53] <= rom[107] @[Fetch.scala 33:20]
    romOdd[54] <= rom[109] @[Fetch.scala 33:20]
    romOdd[55] <= rom[111] @[Fetch.scala 33:20]
    romOdd[56] <= rom[113] @[Fetch.scala 33:20]
    romOdd[57] <= rom[115] @[Fetch.scala 33:20]
    romOdd[58] <= rom[117] @[Fetch.scala 33:20]
    romOdd[59] <= rom[119] @[Fetch.scala 33:20]
    romOdd[60] <= rom[121] @[Fetch.scala 33:20]
    romOdd[61] <= rom[123] @[Fetch.scala 33:20]
    romOdd[62] <= rom[125] @[Fetch.scala 33:20]
    romOdd[63] <= rom[127] @[Fetch.scala 33:20]
    romOdd[64] <= rom[129] @[Fetch.scala 33:20]
    romOdd[65] <= rom[131] @[Fetch.scala 33:20]
    romOdd[66] <= rom[133] @[Fetch.scala 33:20]
    romOdd[67] <= rom[135] @[Fetch.scala 33:20]
    romOdd[68] <= rom[137] @[Fetch.scala 33:20]
    romOdd[69] <= rom[139] @[Fetch.scala 33:20]
    romOdd[70] <= rom[141] @[Fetch.scala 33:20]
    romOdd[71] <= rom[143] @[Fetch.scala 33:20]
    romOdd[72] <= rom[145] @[Fetch.scala 33:20]
    romOdd[73] <= rom[147] @[Fetch.scala 33:20]
    romOdd[74] <= rom[149] @[Fetch.scala 33:20]
    romOdd[75] <= rom[151] @[Fetch.scala 33:20]
    romOdd[76] <= rom[153] @[Fetch.scala 33:20]
    romOdd[77] <= rom[155] @[Fetch.scala 33:20]
    romOdd[78] <= rom[157] @[Fetch.scala 33:20]
    romOdd[79] <= rom[159] @[Fetch.scala 33:20]
    romOdd[80] <= rom[161] @[Fetch.scala 33:20]
    romOdd[81] <= rom[163] @[Fetch.scala 33:20]
    romOdd[82] <= rom[165] @[Fetch.scala 33:20]
    romOdd[83] <= rom[167] @[Fetch.scala 33:20]
    romOdd[84] <= rom[169] @[Fetch.scala 33:20]
    romOdd[85] <= rom[171] @[Fetch.scala 33:20]
    romOdd[86] <= rom[173] @[Fetch.scala 33:20]
    romOdd[87] <= rom[175] @[Fetch.scala 33:20]
    romOdd[88] <= rom[177] @[Fetch.scala 33:20]
    romOdd[89] <= rom[179] @[Fetch.scala 33:20]
    romOdd[90] <= rom[181] @[Fetch.scala 33:20]
    romOdd[91] <= rom[183] @[Fetch.scala 33:20]
    romOdd[92] <= rom[185] @[Fetch.scala 33:20]
    romOdd[93] <= rom[187] @[Fetch.scala 33:20]
    romOdd[94] <= rom[189] @[Fetch.scala 33:20]
    romOdd[95] <= rom[191] @[Fetch.scala 33:20]
    romOdd[96] <= rom[193] @[Fetch.scala 33:20]
    romOdd[97] <= rom[195] @[Fetch.scala 33:20]
    romOdd[98] <= rom[197] @[Fetch.scala 33:20]
    romOdd[99] <= rom[199] @[Fetch.scala 33:20]
    romOdd[100] <= rom[201] @[Fetch.scala 33:20]
    romOdd[101] <= rom[203] @[Fetch.scala 33:20]
    romOdd[102] <= rom[205] @[Fetch.scala 33:20]
    romOdd[103] <= rom[207] @[Fetch.scala 33:20]
    romOdd[104] <= rom[209] @[Fetch.scala 33:20]
    romOdd[105] <= rom[211] @[Fetch.scala 33:20]
    romOdd[106] <= rom[213] @[Fetch.scala 33:20]
    romOdd[107] <= rom[215] @[Fetch.scala 33:20]
    romOdd[108] <= rom[217] @[Fetch.scala 33:20]
    romOdd[109] <= rom[219] @[Fetch.scala 33:20]
    romOdd[110] <= rom[221] @[Fetch.scala 33:20]
    romOdd[111] <= rom[223] @[Fetch.scala 33:20]
    romOdd[112] <= rom[225] @[Fetch.scala 33:20]
    romOdd[113] <= rom[227] @[Fetch.scala 33:20]
    romOdd[114] <= rom[229] @[Fetch.scala 33:20]
    romOdd[115] <= rom[231] @[Fetch.scala 33:20]
    romOdd[116] <= rom[233] @[Fetch.scala 33:20]
    romOdd[117] <= rom[235] @[Fetch.scala 33:20]
    romOdd[118] <= rom[237] @[Fetch.scala 33:20]
    romOdd[119] <= rom[239] @[Fetch.scala 33:20]
    romOdd[120] <= rom[241] @[Fetch.scala 33:20]
    romOdd[121] <= rom[243] @[Fetch.scala 33:20]
    romOdd[122] <= rom[245] @[Fetch.scala 33:20]
    romOdd[123] <= rom[247] @[Fetch.scala 33:20]
    romOdd[124] <= rom[249] @[Fetch.scala 33:20]
    romOdd[125] <= rom[251] @[Fetch.scala 33:20]
    romOdd[126] <= rom[253] @[Fetch.scala 33:20]
    romOdd[127] <= rom[255] @[Fetch.scala 33:20]
    romOdd[128] <= rom[257] @[Fetch.scala 33:20]
    romOdd[129] <= rom[259] @[Fetch.scala 33:20]
    romOdd[130] <= rom[261] @[Fetch.scala 33:20]
    romOdd[131] <= rom[263] @[Fetch.scala 33:20]
    romOdd[132] <= rom[265] @[Fetch.scala 33:20]
    romOdd[133] <= rom[267] @[Fetch.scala 33:20]
    romOdd[134] <= rom[269] @[Fetch.scala 33:20]
    romOdd[135] <= rom[271] @[Fetch.scala 33:20]
    romOdd[136] <= rom[273] @[Fetch.scala 33:20]
    romOdd[137] <= rom[275] @[Fetch.scala 33:20]
    romOdd[138] <= rom[277] @[Fetch.scala 33:20]
    romOdd[139] <= rom[279] @[Fetch.scala 33:20]
    romOdd[140] <= rom[281] @[Fetch.scala 33:20]
    romOdd[141] <= rom[283] @[Fetch.scala 33:20]
    romOdd[142] <= rom[285] @[Fetch.scala 33:20]
    romOdd[143] <= rom[287] @[Fetch.scala 33:20]
    romOdd[144] <= rom[289] @[Fetch.scala 33:20]
    romOdd[145] <= rom[291] @[Fetch.scala 33:20]
    romOdd[146] <= rom[293] @[Fetch.scala 33:20]
    romOdd[147] <= rom[295] @[Fetch.scala 33:20]
    romOdd[148] <= rom[297] @[Fetch.scala 33:20]
    romOdd[149] <= rom[299] @[Fetch.scala 33:20]
    romOdd[150] <= rom[301] @[Fetch.scala 33:20]
    romOdd[151] <= rom[303] @[Fetch.scala 33:20]
    romOdd[152] <= rom[305] @[Fetch.scala 33:20]
    romOdd[153] <= rom[307] @[Fetch.scala 33:20]
    romOdd[154] <= rom[309] @[Fetch.scala 33:20]
    romOdd[155] <= rom[311] @[Fetch.scala 33:20]
    romOdd[156] <= rom[313] @[Fetch.scala 33:20]
    romOdd[157] <= rom[315] @[Fetch.scala 33:20]
    romOdd[158] <= rom[317] @[Fetch.scala 33:20]
    romOdd[159] <= rom[319] @[Fetch.scala 33:20]
    romOdd[160] <= rom[321] @[Fetch.scala 33:20]
    romOdd[161] <= rom[323] @[Fetch.scala 33:20]
    romOdd[162] <= rom[325] @[Fetch.scala 33:20]
    romOdd[163] <= rom[327] @[Fetch.scala 33:20]
    romOdd[164] <= rom[329] @[Fetch.scala 33:20]
    romOdd[165] <= rom[331] @[Fetch.scala 33:20]
    romOdd[166] <= rom[333] @[Fetch.scala 33:20]
    romOdd[167] <= rom[335] @[Fetch.scala 33:20]
    romOdd[168] <= rom[337] @[Fetch.scala 33:20]
    romOdd[169] <= rom[339] @[Fetch.scala 33:20]
    romOdd[170] <= rom[341] @[Fetch.scala 33:20]
    romOdd[171] <= rom[343] @[Fetch.scala 33:20]
    romOdd[172] <= rom[345] @[Fetch.scala 33:20]
    romOdd[173] <= rom[347] @[Fetch.scala 33:20]
    romOdd[174] <= rom[349] @[Fetch.scala 33:20]
    romOdd[175] <= rom[351] @[Fetch.scala 33:20]
    romOdd[176] <= rom[353] @[Fetch.scala 33:20]
    romOdd[177] <= rom[355] @[Fetch.scala 33:20]
    romOdd[178] <= rom[357] @[Fetch.scala 33:20]
    romOdd[179] <= rom[359] @[Fetch.scala 33:20]
    romOdd[180] <= rom[361] @[Fetch.scala 33:20]
    romOdd[181] <= rom[363] @[Fetch.scala 33:20]
    romOdd[182] <= rom[365] @[Fetch.scala 33:20]
    romOdd[183] <= rom[367] @[Fetch.scala 33:20]
    romOdd[184] <= rom[369] @[Fetch.scala 33:20]
    romOdd[185] <= rom[371] @[Fetch.scala 33:20]
    romOdd[186] <= rom[373] @[Fetch.scala 33:20]
    romOdd[187] <= rom[375] @[Fetch.scala 33:20]
    romOdd[188] <= rom[377] @[Fetch.scala 33:20]
    romOdd[189] <= rom[379] @[Fetch.scala 33:20]
    romOdd[190] <= rom[381] @[Fetch.scala 33:20]
    romOdd[191] <= rom[383] @[Fetch.scala 33:20]
    romOdd[192] <= rom[385] @[Fetch.scala 33:20]
    romOdd[193] <= rom[387] @[Fetch.scala 33:20]
    romOdd[194] <= rom[389] @[Fetch.scala 33:20]
    romOdd[195] <= rom[391] @[Fetch.scala 33:20]
    romOdd[196] <= rom[393] @[Fetch.scala 33:20]
    romOdd[197] <= rom[395] @[Fetch.scala 33:20]
    romOdd[198] <= rom[397] @[Fetch.scala 33:20]
    romOdd[199] <= rom[399] @[Fetch.scala 33:20]
    romOdd[200] <= rom[401] @[Fetch.scala 33:20]
    romOdd[201] <= rom[403] @[Fetch.scala 33:20]
    romOdd[202] <= rom[405] @[Fetch.scala 33:20]
    romOdd[203] <= rom[407] @[Fetch.scala 33:20]
    romOdd[204] <= rom[409] @[Fetch.scala 33:20]
    romOdd[205] <= rom[411] @[Fetch.scala 33:20]
    romOdd[206] <= rom[413] @[Fetch.scala 33:20]
    romOdd[207] <= rom[415] @[Fetch.scala 33:20]
    romOdd[208] <= rom[417] @[Fetch.scala 33:20]
    romOdd[209] <= rom[419] @[Fetch.scala 33:20]
    romOdd[210] <= rom[421] @[Fetch.scala 33:20]
    romOdd[211] <= rom[423] @[Fetch.scala 33:20]
    romOdd[212] <= rom[425] @[Fetch.scala 33:20]
    romOdd[213] <= rom[427] @[Fetch.scala 33:20]
    romOdd[214] <= rom[429] @[Fetch.scala 33:20]
    romOdd[215] <= rom[431] @[Fetch.scala 33:20]
    romOdd[216] <= rom[433] @[Fetch.scala 33:20]
    romOdd[217] <= rom[435] @[Fetch.scala 33:20]
    romOdd[218] <= rom[437] @[Fetch.scala 33:20]
    romOdd[219] <= rom[439] @[Fetch.scala 33:20]
    romOdd[220] <= rom[441] @[Fetch.scala 33:20]
    romOdd[221] <= rom[443] @[Fetch.scala 33:20]
    romOdd[222] <= rom[445] @[Fetch.scala 33:20]
    romOdd[223] <= rom[447] @[Fetch.scala 33:20]
    romOdd[224] <= rom[449] @[Fetch.scala 33:20]
    romOdd[225] <= rom[451] @[Fetch.scala 33:20]
    romOdd[226] <= rom[453] @[Fetch.scala 33:20]
    romOdd[227] <= rom[455] @[Fetch.scala 33:20]
    romOdd[228] <= rom[457] @[Fetch.scala 33:20]
    romOdd[229] <= rom[459] @[Fetch.scala 33:20]
    romOdd[230] <= rom[461] @[Fetch.scala 33:20]
    romOdd[231] <= rom[463] @[Fetch.scala 33:20]
    romOdd[232] <= rom[465] @[Fetch.scala 33:20]
    romOdd[233] <= rom[467] @[Fetch.scala 33:20]
    romOdd[234] <= rom[469] @[Fetch.scala 33:20]
    romOdd[235] <= rom[471] @[Fetch.scala 33:20]
    romOdd[236] <= rom[473] @[Fetch.scala 33:20]
    romOdd[237] <= rom[475] @[Fetch.scala 33:20]
    romOdd[238] <= rom[477] @[Fetch.scala 33:20]
    romOdd[239] <= rom[479] @[Fetch.scala 33:20]
    romOdd[240] <= rom[481] @[Fetch.scala 33:20]
    romOdd[241] <= rom[483] @[Fetch.scala 33:20]
    romOdd[242] <= rom[485] @[Fetch.scala 33:20]
    romOdd[243] <= rom[487] @[Fetch.scala 33:20]
    romOdd[244] <= rom[489] @[Fetch.scala 33:20]
    romOdd[245] <= rom[491] @[Fetch.scala 33:20]
    romOdd[246] <= rom[493] @[Fetch.scala 33:20]
    romOdd[247] <= rom[495] @[Fetch.scala 33:20]
    romOdd[248] <= rom[497] @[Fetch.scala 33:20]
    romOdd[249] <= rom[499] @[Fetch.scala 33:20]
    romOdd[250] <= rom[501] @[Fetch.scala 33:20]
    romOdd[251] <= rom[503] @[Fetch.scala 33:20]
    romOdd[252] <= rom[505] @[Fetch.scala 33:20]
    romOdd[253] <= rom[507] @[Fetch.scala 33:20]
    romOdd[254] <= rom[509] @[Fetch.scala 33:20]
    romOdd[255] <= rom[511] @[Fetch.scala 33:20]
    romOdd[256] <= rom[513] @[Fetch.scala 33:20]
    romOdd[257] <= rom[515] @[Fetch.scala 33:20]
    romOdd[258] <= rom[517] @[Fetch.scala 33:20]
    romOdd[259] <= rom[519] @[Fetch.scala 33:20]
    romOdd[260] <= rom[521] @[Fetch.scala 33:20]
    romOdd[261] <= rom[523] @[Fetch.scala 33:20]
    romOdd[262] <= rom[525] @[Fetch.scala 33:20]
    romOdd[263] <= rom[527] @[Fetch.scala 33:20]
    romOdd[264] <= rom[529] @[Fetch.scala 33:20]
    romOdd[265] <= rom[531] @[Fetch.scala 33:20]
    romOdd[266] <= rom[533] @[Fetch.scala 33:20]
    romOdd[267] <= rom[535] @[Fetch.scala 33:20]
    romOdd[268] <= rom[537] @[Fetch.scala 33:20]
    romOdd[269] <= rom[539] @[Fetch.scala 33:20]
    romOdd[270] <= rom[541] @[Fetch.scala 33:20]
    romOdd[271] <= rom[543] @[Fetch.scala 33:20]
    romOdd[272] <= rom[545] @[Fetch.scala 33:20]
    romOdd[273] <= rom[547] @[Fetch.scala 33:20]
    romOdd[274] <= rom[549] @[Fetch.scala 33:20]
    romOdd[275] <= rom[551] @[Fetch.scala 33:20]
    romOdd[276] <= rom[553] @[Fetch.scala 33:20]
    romOdd[277] <= rom[555] @[Fetch.scala 33:20]
    romOdd[278] <= rom[557] @[Fetch.scala 33:20]
    romOdd[279] <= rom[559] @[Fetch.scala 33:20]
    romOdd[280] <= rom[561] @[Fetch.scala 33:20]
    romOdd[281] <= rom[563] @[Fetch.scala 33:20]
    romOdd[282] <= rom[565] @[Fetch.scala 33:20]
    romOdd[283] <= rom[567] @[Fetch.scala 33:20]
    romOdd[284] <= rom[569] @[Fetch.scala 33:20]
    romOdd[285] <= rom[571] @[Fetch.scala 33:20]
    romOdd[286] <= rom[573] @[Fetch.scala 33:20]
    romOdd[287] <= rom[575] @[Fetch.scala 33:20]
    romOdd[288] <= rom[577] @[Fetch.scala 33:20]
    romOdd[289] <= rom[579] @[Fetch.scala 33:20]
    romOdd[290] <= rom[581] @[Fetch.scala 33:20]
    romOdd[291] <= rom[583] @[Fetch.scala 33:20]
    romOdd[292] <= rom[585] @[Fetch.scala 33:20]
    romOdd[293] <= rom[587] @[Fetch.scala 33:20]
    romOdd[294] <= rom[589] @[Fetch.scala 33:20]
    romOdd[295] <= rom[591] @[Fetch.scala 33:20]
    romOdd[296] <= rom[593] @[Fetch.scala 33:20]
    romOdd[297] <= rom[595] @[Fetch.scala 33:20]
    romOdd[298] <= rom[597] @[Fetch.scala 33:20]
    romOdd[299] <= rom[599] @[Fetch.scala 33:20]
    romOdd[300] <= rom[601] @[Fetch.scala 33:20]
    romOdd[301] <= rom[603] @[Fetch.scala 33:20]
    romOdd[302] <= rom[605] @[Fetch.scala 33:20]
    romOdd[303] <= rom[607] @[Fetch.scala 33:20]
    romOdd[304] <= rom[609] @[Fetch.scala 33:20]
    romOdd[305] <= rom[611] @[Fetch.scala 33:20]
    romOdd[306] <= rom[613] @[Fetch.scala 33:20]
    romOdd[307] <= rom[615] @[Fetch.scala 33:20]
    romOdd[308] <= rom[617] @[Fetch.scala 33:20]
    romOdd[309] <= rom[619] @[Fetch.scala 33:20]
    romOdd[310] <= rom[621] @[Fetch.scala 33:20]
    romOdd[311] <= rom[623] @[Fetch.scala 33:20]
    romOdd[312] <= rom[625] @[Fetch.scala 33:20]
    romOdd[313] <= rom[627] @[Fetch.scala 33:20]
    romOdd[314] <= rom[629] @[Fetch.scala 33:20]
    romOdd[315] <= rom[631] @[Fetch.scala 33:20]
    romOdd[316] <= rom[633] @[Fetch.scala 33:20]
    romOdd[317] <= rom[635] @[Fetch.scala 33:20]
    romOdd[318] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[319] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[320] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[321] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[322] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[323] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[324] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[325] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[326] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[327] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[328] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[329] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[330] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[331] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[332] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[333] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[334] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[335] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[336] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[337] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[338] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[339] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[340] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[341] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[342] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[343] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[344] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[345] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[346] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[347] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[348] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[349] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[350] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[351] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[352] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[353] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[354] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[355] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[356] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[357] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[358] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[359] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[360] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[361] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[362] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[363] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[364] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[365] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[366] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[367] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[368] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[369] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[370] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[371] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[372] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[373] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[374] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[375] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[376] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[377] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[378] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[379] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[380] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[381] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[382] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[383] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[384] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[385] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[386] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[387] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[388] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[389] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[390] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[391] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[392] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[393] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[394] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[395] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[396] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[397] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[398] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[399] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[400] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[401] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[402] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[403] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[404] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[405] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[406] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[407] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[408] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[409] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[410] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[411] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[412] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[413] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[414] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[415] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[416] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[417] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[418] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[419] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[420] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[421] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[422] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[423] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[424] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[425] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[426] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[427] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[428] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[429] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[430] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[431] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[432] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[433] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[434] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[435] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[436] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[437] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[438] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[439] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[440] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[441] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[442] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[443] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[444] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[445] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[446] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[447] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[448] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[449] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[450] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[451] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[452] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[453] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[454] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[455] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[456] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[457] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[458] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[459] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[460] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[461] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[462] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[463] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[464] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[465] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[466] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[467] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[468] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[469] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[470] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[471] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[472] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[473] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[474] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[475] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[476] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[477] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[478] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[479] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[480] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[481] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[482] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[483] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[484] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[485] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[486] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[487] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[488] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[489] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[490] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[491] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[492] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[493] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[494] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[495] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[496] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[497] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[498] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[499] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[500] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[501] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[502] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[503] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[504] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[505] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[506] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[507] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[508] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[509] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[510] <= UInt<1>("h00") @[Fetch.scala 33:20]
    romOdd[511] <= UInt<1>("h00") @[Fetch.scala 33:20]
    wire instr_a_ispm : UInt @[Fetch.scala 35:26]
    instr_a_ispm is invalid @[Fetch.scala 35:26]
    wire instr_b_ispm : UInt @[Fetch.scala 36:26]
    instr_b_ispm is invalid @[Fetch.scala 36:26]
    instr_a_ispm <= UInt<1>("h00") @[Fetch.scala 37:16]
    instr_b_ispm <= UInt<1>("h00") @[Fetch.scala 38:16]
    inst MemBlock of MemBlock_2 @[MemBlock.scala 15:11]
    MemBlock.io is invalid
    MemBlock.clock <= clock
    MemBlock.reset <= reset
    inst MemBlock_1 of MemBlock_3 @[MemBlock.scala 15:11]
    MemBlock_1.io is invalid
    MemBlock_1.clock <= clock
    MemBlock_1.reset <= reset
    node _T = bits(io.memfe.addr, 31, 16) @[Fetch.scala 48:52]
    node _T_1 = eq(_T, UInt<1>("h01")) @[Fetch.scala 48:81]
    node _T_2 = and(io.memfe.store, _T_1) @[Fetch.scala 48:36]
    node _T_3 = bits(io.memfe.addr, 2, 2) @[Fetch.scala 49:43]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[Fetch.scala 49:47]
    node _T_5 = and(_T_2, _T_4) @[Fetch.scala 49:27]
    node _T_6 = bits(io.memfe.addr, 2, 2) @[Fetch.scala 50:42]
    node _T_7 = eq(_T_6, UInt<1>("h01")) @[Fetch.scala 50:46]
    node _T_8 = and(_T_2, _T_7) @[Fetch.scala 50:26]
    node _T_9 = bits(io.memfe.addr, 9, 3) @[Fetch.scala 51:41]
    MemBlock.io.wrAddr <= _T_9 @[MemBlock.scala 34:12]
    MemBlock.io.wrEna <= _T_5 @[MemBlock.scala 35:11]
    MemBlock.io.wrData <= io.memfe.data @[MemBlock.scala 36:12]
    node _T_10 = bits(io.memfe.addr, 9, 3) @[Fetch.scala 52:39]
    MemBlock_1.io.wrAddr <= _T_10 @[MemBlock.scala 34:12]
    MemBlock_1.io.wrEna <= _T_8 @[MemBlock.scala 35:11]
    MemBlock_1.io.wrData <= io.memfe.data @[MemBlock.scala 36:12]
    node _T_11 = bits(addrEven, 7, 1) @[Fetch.scala 55:40]
    MemBlock.io.rdAddr <= _T_11 @[MemBlock.scala 44:12]
    node _T_12 = bits(addrOdd, 7, 1) @[Fetch.scala 56:37]
    MemBlock_1.io.rdAddr <= _T_12 @[MemBlock.scala 44:12]
    node _T_13 = bits(pcReg, 0, 0) @[Fetch.scala 57:30]
    node _T_14 = eq(_T_13, UInt<1>("h00")) @[Fetch.scala 57:34]
    node _T_15 = mux(_T_14, MemBlock.io.rdData, MemBlock_1.io.rdData) @[Fetch.scala 57:24]
    instr_a_ispm <= _T_15 @[Fetch.scala 57:18]
    node _T_16 = bits(pcReg, 0, 0) @[Fetch.scala 58:30]
    node _T_17 = eq(_T_16, UInt<1>("h00")) @[Fetch.scala 58:34]
    node _T_18 = mux(_T_17, MemBlock_1.io.rdData, MemBlock.io.rdData) @[Fetch.scala 58:24]
    instr_b_ispm <= _T_18 @[Fetch.scala 58:18]
    reg selSpm : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Fetch.scala 65:23]
    reg selCache : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Fetch.scala 66:25]
    wire selSpmNext : UInt<1> @[Fetch.scala 67:34]
    selSpmNext is invalid @[Fetch.scala 67:34]
    wire selCacheNext : UInt<1> @[Fetch.scala 68:36]
    selCacheNext is invalid @[Fetch.scala 68:36]
    selSpmNext <= selSpm @[Fetch.scala 69:14]
    selSpm <= selSpmNext @[Fetch.scala 70:10]
    selCacheNext <= selCache @[Fetch.scala 71:16]
    selCache <= selCacheNext @[Fetch.scala 72:12]
    when io.ena : @[Fetch.scala 73:17]
      node _T_19 = bits(io.icachefe.memSel, 1, 1) @[Fetch.scala 74:37]
      selSpmNext <= _T_19 @[Fetch.scala 74:16]
      node _T_20 = bits(io.icachefe.memSel, 0, 0) @[Fetch.scala 75:39]
      selCacheNext <= _T_20 @[Fetch.scala 75:18]
      skip @[Fetch.scala 73:17]
    reg baseReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Fetch.scala 79:24]
    reg relBaseReg : UInt<11>, clock with : (reset => (reset, UInt<11>("h01"))) @[Fetch.scala 80:27]
    reg relocReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Fetch.scala 81:25]
    wire relBaseNext : UInt<11> @[Fetch.scala 82:35]
    relBaseNext is invalid @[Fetch.scala 82:35]
    wire relocNext : UInt<32> @[Fetch.scala 83:33]
    relocNext is invalid @[Fetch.scala 83:33]
    relBaseNext <= relBaseReg @[Fetch.scala 85:15]
    relBaseReg <= relBaseNext @[Fetch.scala 86:14]
    relocNext <= relocReg @[Fetch.scala 87:13]
    relocReg <= relocNext @[Fetch.scala 88:12]
    when io.ena : @[Fetch.scala 89:16]
      baseReg <= io.icachefe.base @[Fetch.scala 90:13]
      when io.memfe.doCallRet : @[Fetch.scala 91:31]
        relBaseNext <= io.icachefe.relBase @[Fetch.scala 92:19]
        relocNext <= io.icachefe.reloc @[Fetch.scala 93:17]
        skip @[Fetch.scala 91:31]
      skip @[Fetch.scala 89:16]
    node _T_21 = bits(addrEven, 9, 1) @[Fetch.scala 100:43]
    reg data_even : UInt, clock @[Fetch.scala 100:26]
    data_even <= romEven[_T_21] @[Fetch.scala 100:26]
    node _T_22 = bits(addrOdd, 9, 1) @[Fetch.scala 101:40]
    reg data_odd : UInt, clock @[Fetch.scala 101:25]
    data_odd <= romOdd[_T_22] @[Fetch.scala 101:25]
    node _T_23 = bits(pcReg, 0, 0) @[Fetch.scala 102:30]
    node _T_24 = eq(_T_23, UInt<1>("h00")) @[Fetch.scala 102:34]
    node instr_a_rom = mux(_T_24, data_even, data_odd) @[Fetch.scala 102:24]
    node _T_25 = bits(pcReg, 0, 0) @[Fetch.scala 103:30]
    node _T_26 = eq(_T_25, UInt<1>("h00")) @[Fetch.scala 103:34]
    node instr_b_rom = mux(_T_26, data_odd, data_even) @[Fetch.scala 103:24]
    node _T_27 = bits(pcReg, 0, 0) @[Fetch.scala 106:32]
    node _T_28 = eq(_T_27, UInt<1>("h00")) @[Fetch.scala 106:36]
    node instr_a_cache = mux(_T_28, io.icachefe.instrEven, io.icachefe.instrOdd) @[Fetch.scala 106:26]
    node _T_29 = bits(pcReg, 0, 0) @[Fetch.scala 107:32]
    node _T_30 = eq(_T_29, UInt<1>("h00")) @[Fetch.scala 107:36]
    node instr_b_cache = mux(_T_30, io.icachefe.instrOdd, io.icachefe.instrEven) @[Fetch.scala 107:26]
    node _T_31 = mux(selCache, instr_a_cache, instr_a_rom) @[Fetch.scala 111:24]
    node instr_a = mux(selSpm, instr_a_ispm, _T_31) @[Fetch.scala 110:20]
    node _T_32 = mux(selCache, instr_b_cache, instr_b_rom) @[Fetch.scala 113:24]
    node instr_b = mux(selSpm, instr_b_ispm, _T_32) @[Fetch.scala 112:20]
    node _T_33 = bits(instr_a, 31, 31) @[Fetch.scala 115:24]
    node b_valid = eq(_T_33, UInt<1>("h01")) @[Fetch.scala 115:29]
    node _T_34 = add(pcReg, UInt<2>("h02")) @[Fetch.scala 117:36]
    node _T_35 = tail(_T_34, 1) @[Fetch.scala 117:36]
    node _T_36 = add(pcReg, UInt<1>("h01")) @[Fetch.scala 117:53]
    node _T_37 = tail(_T_36, 1) @[Fetch.scala 117:53]
    node pc_cont = mux(b_valid, _T_35, _T_37) @[Fetch.scala 117:20]
    node _T_38 = mux(io.exfe.doBranch, io.exfe.branchPc, pc_cont) @[Fetch.scala 120:16]
    node pc_next = mux(io.memfe.doCallRet, io.icachefe.relPc, _T_38) @[Fetch.scala 119:8]
    pcNext <= pc_next @[Fetch.scala 122:10]
    node _T_39 = add(pcReg, UInt<3>("h04")) @[Fetch.scala 123:37]
    node _T_40 = tail(_T_39, 1) @[Fetch.scala 123:37]
    node _T_41 = add(pcReg, UInt<2>("h03")) @[Fetch.scala 123:54]
    node _T_42 = tail(_T_41, 1) @[Fetch.scala 123:54]
    node pc_cont2 = mux(b_valid, _T_40, _T_42) @[Fetch.scala 123:21]
    node _T_43 = add(io.icachefe.relPc, UInt<2>("h02")) @[Fetch.scala 125:54]
    node _T_44 = tail(_T_43, 1) @[Fetch.scala 125:54]
    node _T_45 = add(io.exfe.branchPc, UInt<2>("h02")) @[Fetch.scala 126:48]
    node _T_46 = tail(_T_45, 1) @[Fetch.scala 126:48]
    node _T_47 = mux(io.exfe.doBranch, _T_46, pc_cont2) @[Fetch.scala 126:12]
    node pc_next2 = mux(io.memfe.doCallRet, _T_44, _T_47) @[Fetch.scala 125:8]
    node _T_48 = bits(pc_next, 0, 0) @[Fetch.scala 129:27]
    node pc_inc = mux(_T_48, pc_next2, pc_next) @[Fetch.scala 129:19]
    addrEven <= addrEvenReg @[Fetch.scala 130:12]
    addrOdd <= addrOddReg @[Fetch.scala 131:11]
    node _T_49 = bits(reset, 0, 0) @[compatibility.scala 260:56]
    node _T_50 = eq(_T_49, UInt<1>("h00")) @[Fetch.scala 132:18]
    node _T_51 = and(io.ena, _T_50) @[Fetch.scala 132:15]
    when _T_51 : @[Fetch.scala 132:26]
      node hi = bits(pc_inc, 29, 1) @[Fetch.scala 133:29]
      node _T_52 = cat(hi, UInt<1>("h00")) @[Cat.scala 30:58]
      addrEven <= _T_52 @[Fetch.scala 133:14]
      node hi_1 = bits(pc_next, 29, 1) @[Fetch.scala 134:29]
      node _T_53 = cat(hi_1, UInt<1>("h01")) @[Cat.scala 30:58]
      addrOdd <= _T_53 @[Fetch.scala 134:13]
      pcReg <= pcNext @[Fetch.scala 135:11]
      skip @[Fetch.scala 132:26]
    node _T_54 = sub(pcReg, relBaseReg) @[Fetch.scala 138:21]
    node relPc = tail(_T_54, 1) @[Fetch.scala 138:21]
    io.fedec.pc <= pcReg @[Fetch.scala 140:15]
    io.fedec.base <= baseReg @[Fetch.scala 141:17]
    io.fedec.reloc <= relocReg @[Fetch.scala 142:18]
    io.fedec.relPc <= relPc @[Fetch.scala 143:18]
    io.fedec.instr_a <= instr_a @[Fetch.scala 144:20]
    io.fedec.instr_b <= instr_b @[Fetch.scala 145:20]
    node _T_55 = add(relPc, UInt<2>("h02")) @[Fetch.scala 147:36]
    node _T_56 = tail(_T_55, 1) @[Fetch.scala 147:36]
    node _T_57 = add(relPc, UInt<1>("h01")) @[Fetch.scala 147:53]
    node _T_58 = tail(_T_57, 1) @[Fetch.scala 147:53]
    node _T_59 = mux(b_valid, _T_56, _T_58) @[Fetch.scala 147:20]
    io.feex.pc <= _T_59 @[Fetch.scala 147:14]
    io.feicache.addrEven <= addrEven @[Fetch.scala 150:24]
    io.feicache.addrOdd <= addrOdd @[Fetch.scala 151:23]
    
  module RegisterFile : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip ena : UInt<1>, rfRead : {flip rsAddr : UInt<5>[4], rsData : UInt<32>[4]}, flip rfWrite : {addr : UInt<5>, data : UInt<32>, valid : UInt<1>}[2]}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem rf : UInt<32>[32]
    reg addrReg : UInt<5>[4], clock @[RegisterFile.scala 22:20]
    reg wrReg : {addr : UInt<5>, data : UInt<32>, valid : UInt<1>}[2], clock @[RegisterFile.scala 23:20]
    reg fwReg : UInt<1>[2][4], clock @[RegisterFile.scala 24:20]
    when io.ena : @[RegisterFile.scala 26:17]
      addrReg <- io.rfRead.rsAddr @[RegisterFile.scala 27:13]
      wrReg <- io.rfWrite @[RegisterFile.scala 28:11]
      node _T = eq(io.rfRead.rsAddr[0], io.rfWrite[0].addr) @[RegisterFile.scala 31:44]
      node _T_1 = and(_T, io.rfWrite[0].valid) @[RegisterFile.scala 31:67]
      fwReg[0][0] <= _T_1 @[RegisterFile.scala 31:21]
      node _T_2 = eq(io.rfRead.rsAddr[0], io.rfWrite[1].addr) @[RegisterFile.scala 31:44]
      node _T_3 = and(_T_2, io.rfWrite[1].valid) @[RegisterFile.scala 31:67]
      fwReg[0][1] <= _T_3 @[RegisterFile.scala 31:21]
      node _T_4 = eq(io.rfRead.rsAddr[1], io.rfWrite[0].addr) @[RegisterFile.scala 31:44]
      node _T_5 = and(_T_4, io.rfWrite[0].valid) @[RegisterFile.scala 31:67]
      fwReg[1][0] <= _T_5 @[RegisterFile.scala 31:21]
      node _T_6 = eq(io.rfRead.rsAddr[1], io.rfWrite[1].addr) @[RegisterFile.scala 31:44]
      node _T_7 = and(_T_6, io.rfWrite[1].valid) @[RegisterFile.scala 31:67]
      fwReg[1][1] <= _T_7 @[RegisterFile.scala 31:21]
      node _T_8 = eq(io.rfRead.rsAddr[2], io.rfWrite[0].addr) @[RegisterFile.scala 31:44]
      node _T_9 = and(_T_8, io.rfWrite[0].valid) @[RegisterFile.scala 31:67]
      fwReg[2][0] <= _T_9 @[RegisterFile.scala 31:21]
      node _T_10 = eq(io.rfRead.rsAddr[2], io.rfWrite[1].addr) @[RegisterFile.scala 31:44]
      node _T_11 = and(_T_10, io.rfWrite[1].valid) @[RegisterFile.scala 31:67]
      fwReg[2][1] <= _T_11 @[RegisterFile.scala 31:21]
      node _T_12 = eq(io.rfRead.rsAddr[3], io.rfWrite[0].addr) @[RegisterFile.scala 31:44]
      node _T_13 = and(_T_12, io.rfWrite[0].valid) @[RegisterFile.scala 31:67]
      fwReg[3][0] <= _T_13 @[RegisterFile.scala 31:21]
      node _T_14 = eq(io.rfRead.rsAddr[3], io.rfWrite[1].addr) @[RegisterFile.scala 31:44]
      node _T_15 = and(_T_14, io.rfWrite[1].valid) @[RegisterFile.scala 31:67]
      fwReg[3][1] <= _T_15 @[RegisterFile.scala 31:21]
      skip @[RegisterFile.scala 26:17]
    infer mport MPORT = rf[addrReg[0]], clock @[RegisterFile.scala 38:30]
    io.rfRead.rsData[0] <= MPORT @[RegisterFile.scala 38:25]
    when fwReg[0][0] : @[RegisterFile.scala 40:26]
      io.rfRead.rsData[0] <= wrReg[0].data @[RegisterFile.scala 41:29]
      skip @[RegisterFile.scala 40:26]
    when fwReg[0][1] : @[RegisterFile.scala 40:26]
      io.rfRead.rsData[0] <= wrReg[1].data @[RegisterFile.scala 41:29]
      skip @[RegisterFile.scala 40:26]
    node _T_16 = eq(addrReg[0], UInt<1>("h00")) @[RegisterFile.scala 44:21]
    when _T_16 : @[RegisterFile.scala 44:34]
      io.rfRead.rsData[0] <= UInt<1>("h00") @[RegisterFile.scala 45:27]
      skip @[RegisterFile.scala 44:34]
    infer mport MPORT_1 = rf[addrReg[1]], clock @[RegisterFile.scala 38:30]
    io.rfRead.rsData[1] <= MPORT_1 @[RegisterFile.scala 38:25]
    when fwReg[1][0] : @[RegisterFile.scala 40:26]
      io.rfRead.rsData[1] <= wrReg[0].data @[RegisterFile.scala 41:29]
      skip @[RegisterFile.scala 40:26]
    when fwReg[1][1] : @[RegisterFile.scala 40:26]
      io.rfRead.rsData[1] <= wrReg[1].data @[RegisterFile.scala 41:29]
      skip @[RegisterFile.scala 40:26]
    node _T_17 = eq(addrReg[1], UInt<1>("h00")) @[RegisterFile.scala 44:21]
    when _T_17 : @[RegisterFile.scala 44:34]
      io.rfRead.rsData[1] <= UInt<1>("h00") @[RegisterFile.scala 45:27]
      skip @[RegisterFile.scala 44:34]
    infer mport MPORT_2 = rf[addrReg[2]], clock @[RegisterFile.scala 38:30]
    io.rfRead.rsData[2] <= MPORT_2 @[RegisterFile.scala 38:25]
    when fwReg[2][0] : @[RegisterFile.scala 40:26]
      io.rfRead.rsData[2] <= wrReg[0].data @[RegisterFile.scala 41:29]
      skip @[RegisterFile.scala 40:26]
    when fwReg[2][1] : @[RegisterFile.scala 40:26]
      io.rfRead.rsData[2] <= wrReg[1].data @[RegisterFile.scala 41:29]
      skip @[RegisterFile.scala 40:26]
    node _T_18 = eq(addrReg[2], UInt<1>("h00")) @[RegisterFile.scala 44:21]
    when _T_18 : @[RegisterFile.scala 44:34]
      io.rfRead.rsData[2] <= UInt<1>("h00") @[RegisterFile.scala 45:27]
      skip @[RegisterFile.scala 44:34]
    infer mport MPORT_3 = rf[addrReg[3]], clock @[RegisterFile.scala 38:30]
    io.rfRead.rsData[3] <= MPORT_3 @[RegisterFile.scala 38:25]
    when fwReg[3][0] : @[RegisterFile.scala 40:26]
      io.rfRead.rsData[3] <= wrReg[0].data @[RegisterFile.scala 41:29]
      skip @[RegisterFile.scala 40:26]
    when fwReg[3][1] : @[RegisterFile.scala 40:26]
      io.rfRead.rsData[3] <= wrReg[1].data @[RegisterFile.scala 41:29]
      skip @[RegisterFile.scala 40:26]
    node _T_19 = eq(addrReg[3], UInt<1>("h00")) @[RegisterFile.scala 44:21]
    when _T_19 : @[RegisterFile.scala 44:34]
      io.rfRead.rsData[3] <= UInt<1>("h00") @[RegisterFile.scala 45:27]
      skip @[RegisterFile.scala 44:34]
    when io.rfWrite[1].valid : @[RegisterFile.scala 52:31]
      infer mport MPORT_4 = rf[io.rfWrite[1].addr], clock @[RegisterFile.scala 53:9]
      MPORT_4 <= io.rfWrite[1].data @[RegisterFile.scala 53:37]
      skip @[RegisterFile.scala 52:31]
    when io.rfWrite[0].valid : @[RegisterFile.scala 52:31]
      infer mport MPORT_5 = rf[io.rfWrite[0].addr], clock @[RegisterFile.scala 53:9]
      MPORT_5 <= io.rfWrite[0].data @[RegisterFile.scala 53:37]
      skip @[RegisterFile.scala 52:31]
    
  module Decode : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip ena : UInt<1>, flip flush : UInt<1>, flip fedec : {instr_a : UInt<32>, instr_b : UInt<32>, pc : UInt<30>, base : UInt<30>, reloc : UInt<32>, relPc : UInt<30>}, decex : {pc : UInt<30>, base : UInt<30>, relPc : UInt<30>, pred : UInt<4>[2], aluOp : {func : UInt<4>, isMul : UInt<1>, isCmp : UInt<1>, isPred : UInt<1>, isBCpy : UInt<1>, isMTS : UInt<1>, isMFS : UInt<1>}[2], predOp : {func : UInt<2>, dest : UInt<3>, s1Addr : UInt<4>, s2Addr : UInt<4>}[2], jmpOp : {branch : UInt<1>, target : UInt<30>, reloc : UInt<32>}, memOp : {load : UInt<1>, store : UInt<1>, hword : UInt<1>, byte : UInt<1>, zext : UInt<1>, typ : UInt<2>}, stackOp : UInt<3>, rsAddr : UInt<5>[4], rsData : UInt<32>[4], rdAddr : UInt<5>[2], immVal : UInt<32>[2], immOp : UInt<1>[2], wrRd : UInt<1>[2], callAddr : UInt<32>, call : UInt<1>, ret : UInt<1>, brcf : UInt<1>, trap : UInt<1>, xcall : UInt<1>, xret : UInt<1>, xsrc : UInt<5>, nonDelayed : UInt<1>, illOp : UInt<1>}, flip rfWrite : {addr : UInt<5>, data : UInt<32>, valid : UInt<1>}[2], flip exc : {exc : UInt<1>, excBase : UInt<30>, excAddr : UInt<30>, intr : UInt<1>, addr : UInt<32>, src : UInt<5>, local : UInt<1>}}
    
    clock is invalid
    reset is invalid
    io is invalid
    inst rf of RegisterFile @[Decode.scala 19:18]
    rf.io is invalid
    rf.clock <= clock
    rf.reset <= reset
    node _T = bits(io.fedec.instr_a, 16, 12) @[Decode.scala 21:45]
    rf.io.rfRead.rsAddr[0] <= _T @[Decode.scala 21:26]
    node _T_1 = bits(io.fedec.instr_a, 11, 7) @[Decode.scala 22:45]
    rf.io.rfRead.rsAddr[1] <= _T_1 @[Decode.scala 22:26]
    node _T_2 = bits(io.fedec.instr_b, 16, 12) @[Decode.scala 24:47]
    rf.io.rfRead.rsAddr[2] <= _T_2 @[Decode.scala 24:28]
    node _T_3 = bits(io.fedec.instr_b, 11, 7) @[Decode.scala 25:47]
    rf.io.rfRead.rsAddr[3] <= _T_3 @[Decode.scala 25:28]
    rf.io.ena <= io.ena @[Decode.scala 27:13]
    rf.io.rfWrite <- io.rfWrite @[Decode.scala 29:17]
    reg decReg : {instr_a : UInt<32>, instr_b : UInt<32>, pc : UInt<30>, base : UInt<30>, reloc : UInt<32>, relPc : UInt<30>}, clock @[Decode.scala 32:19]
    when io.ena : @[Decode.scala 33:16]
      decReg <- io.fedec @[Decode.scala 34:12]
      when io.flush : @[Decode.scala 35:20]
        decReg.instr_a <= UInt<1>("h00") @[connections.scala 31:13]
        decReg.instr_b <= UInt<1>("h00") @[connections.scala 32:13]
        decReg.relPc <= io.fedec.relPc @[Decode.scala 37:20]
        skip @[Decode.scala 35:20]
      skip @[Decode.scala 33:16]
    io.decex.pc <= UInt<1>("h00") @[connections.scala 139:8]
    io.decex.relPc <= UInt<1>("h00") @[connections.scala 140:11]
    node _T_4 = cat(UInt<1>("h01"), UInt<3>("h00")) @[Constants.scala 100:33]
    node _T_5 = cat(UInt<1>("h01"), UInt<3>("h00")) @[Constants.scala 100:33]
    wire _WIRE : UInt<4>[2] @[compatibility.scala 127:12]
    _WIRE is invalid @[compatibility.scala 127:12]
    _WIRE[0] <= _T_4 @[compatibility.scala 127:12]
    _WIRE[1] <= _T_5 @[compatibility.scala 127:12]
    io.decex.pred <- _WIRE @[connections.scala 141:10]
    io.decex.aluOp[0].func <= UInt<1>("h00") @[connections.scala 46:10]
    io.decex.aluOp[0].isMul <= UInt<1>("h00") @[connections.scala 47:11]
    io.decex.aluOp[0].isCmp <= UInt<1>("h00") @[connections.scala 48:11]
    io.decex.aluOp[0].isPred <= UInt<1>("h00") @[connections.scala 49:12]
    io.decex.aluOp[0].isBCpy <= UInt<1>("h00") @[connections.scala 50:12]
    io.decex.aluOp[0].isMTS <= UInt<1>("h00") @[connections.scala 51:11]
    io.decex.aluOp[0].isMFS <= UInt<1>("h00") @[connections.scala 52:11]
    io.decex.aluOp[1].func <= UInt<1>("h00") @[connections.scala 46:10]
    io.decex.aluOp[1].isMul <= UInt<1>("h00") @[connections.scala 47:11]
    io.decex.aluOp[1].isCmp <= UInt<1>("h00") @[connections.scala 48:11]
    io.decex.aluOp[1].isPred <= UInt<1>("h00") @[connections.scala 49:12]
    io.decex.aluOp[1].isBCpy <= UInt<1>("h00") @[connections.scala 50:12]
    io.decex.aluOp[1].isMTS <= UInt<1>("h00") @[connections.scala 51:11]
    io.decex.aluOp[1].isMFS <= UInt<1>("h00") @[connections.scala 52:11]
    io.decex.predOp[0].func <= UInt<1>("h00") @[connections.scala 63:10]
    io.decex.predOp[0].dest <= UInt<1>("h00") @[connections.scala 64:10]
    io.decex.predOp[0].s1Addr <= UInt<1>("h00") @[connections.scala 65:12]
    io.decex.predOp[0].s2Addr <= UInt<1>("h00") @[connections.scala 66:12]
    io.decex.predOp[1].func <= UInt<1>("h00") @[connections.scala 63:10]
    io.decex.predOp[1].dest <= UInt<1>("h00") @[connections.scala 64:10]
    io.decex.predOp[1].s1Addr <= UInt<1>("h00") @[connections.scala 65:12]
    io.decex.predOp[1].s2Addr <= UInt<1>("h00") @[connections.scala 66:12]
    io.decex.jmpOp.branch <= UInt<1>("h00") @[connections.scala 76:12]
    io.decex.jmpOp.target <= UInt<1>("h00") @[connections.scala 77:12]
    io.decex.jmpOp.reloc <= UInt<1>("h00") @[connections.scala 78:11]
    io.decex.memOp.load <= UInt<1>("h00") @[connections.scala 91:10]
    io.decex.memOp.store <= UInt<1>("h00") @[connections.scala 92:11]
    io.decex.memOp.hword <= UInt<1>("h00") @[connections.scala 93:11]
    io.decex.memOp.byte <= UInt<1>("h00") @[connections.scala 94:10]
    io.decex.memOp.zext <= UInt<1>("h00") @[connections.scala 95:10]
    io.decex.memOp.typ <= UInt<1>("h00") @[connections.scala 96:9]
    io.decex.stackOp <= UInt<3>("h00") @[connections.scala 146:13]
    wire _WIRE_1 : UInt<1>[4] @[compatibility.scala 127:12]
    _WIRE_1 is invalid @[compatibility.scala 127:12]
    _WIRE_1[0] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_1[1] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_1[2] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_1[3] <= UInt<1>("h00") @[compatibility.scala 127:12]
    io.decex.rsAddr <- _WIRE_1 @[connections.scala 147:12]
    wire _WIRE_2 : UInt<1>[4] @[compatibility.scala 127:12]
    _WIRE_2 is invalid @[compatibility.scala 127:12]
    _WIRE_2[0] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_2[1] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_2[2] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_2[3] <= UInt<1>("h00") @[compatibility.scala 127:12]
    io.decex.rsData <- _WIRE_2 @[connections.scala 148:12]
    wire _WIRE_3 : UInt<1>[2] @[compatibility.scala 127:12]
    _WIRE_3 is invalid @[compatibility.scala 127:12]
    _WIRE_3[0] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_3[1] <= UInt<1>("h00") @[compatibility.scala 127:12]
    io.decex.rdAddr <- _WIRE_3 @[connections.scala 149:12]
    wire _WIRE_4 : UInt<1>[2] @[compatibility.scala 127:12]
    _WIRE_4 is invalid @[compatibility.scala 127:12]
    _WIRE_4[0] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_4[1] <= UInt<1>("h00") @[compatibility.scala 127:12]
    io.decex.immVal <- _WIRE_4 @[connections.scala 150:12]
    wire _WIRE_5 : UInt<1>[2] @[compatibility.scala 127:12]
    _WIRE_5 is invalid @[compatibility.scala 127:12]
    _WIRE_5[0] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_5[1] <= UInt<1>("h00") @[compatibility.scala 127:12]
    io.decex.immOp <- _WIRE_5 @[connections.scala 151:11]
    wire _WIRE_6 : UInt<1>[2] @[compatibility.scala 127:12]
    _WIRE_6 is invalid @[compatibility.scala 127:12]
    _WIRE_6[0] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_6[1] <= UInt<1>("h00") @[compatibility.scala 127:12]
    io.decex.wrRd <- _WIRE_6 @[connections.scala 152:10]
    io.decex.callAddr <= UInt<1>("h00") @[connections.scala 153:14]
    io.decex.call <= UInt<1>("h00") @[connections.scala 154:10]
    io.decex.ret <= UInt<1>("h00") @[connections.scala 155:9]
    io.decex.brcf <= UInt<1>("h00") @[connections.scala 156:10]
    io.decex.trap <= UInt<1>("h00") @[connections.scala 157:10]
    io.decex.xcall <= UInt<1>("h00") @[connections.scala 158:11]
    io.decex.xret <= UInt<1>("h00") @[connections.scala 159:10]
    io.decex.xsrc <= UInt<1>("h00") @[connections.scala 160:10]
    io.decex.nonDelayed <= UInt<1>("h00") @[connections.scala 161:16]
    io.decex.illOp <= UInt<1>("h00") @[connections.scala 162:11]
    node _T_6 = bits(decReg.instr_a, 16, 12) @[Decode.scala 45:39]
    io.decex.rsAddr[0] <= _T_6 @[Decode.scala 45:22]
    node _T_7 = bits(decReg.instr_a, 11, 7) @[Decode.scala 46:39]
    io.decex.rsAddr[1] <= _T_7 @[Decode.scala 46:22]
    node _T_8 = bits(decReg.instr_b, 16, 12) @[Decode.scala 48:41]
    io.decex.rsAddr[2] <= _T_8 @[Decode.scala 48:24]
    node _T_9 = bits(decReg.instr_b, 11, 7) @[Decode.scala 49:41]
    io.decex.rsAddr[3] <= _T_9 @[Decode.scala 49:24]
    io.decex.rsData[0] <= rf.io.rfRead.rsData[0] @[Decode.scala 52:22]
    io.decex.rsData[1] <= rf.io.rfRead.rsData[1] @[Decode.scala 53:22]
    io.decex.rsData[2] <= rf.io.rfRead.rsData[2] @[Decode.scala 55:24]
    io.decex.rsData[3] <= rf.io.rfRead.rsData[3] @[Decode.scala 56:24]
    wire decoded : UInt<1>[2] @[Decode.scala 59:21]
    decoded is invalid @[Decode.scala 59:21]
    wire _WIRE_7 : UInt<1>[2] @[compatibility.scala 127:12]
    _WIRE_7 is invalid @[compatibility.scala 127:12]
    _WIRE_7[0] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_7[1] <= UInt<1>("h00") @[compatibility.scala 127:12]
    decoded <- _WIRE_7 @[Decode.scala 60:11]
    node _T_10 = bits(decReg.instr_a, 31, 31) @[Decode.scala 63:28]
    node _T_11 = bits(decReg.instr_a, 26, 22) @[Decode.scala 63:63]
    node _T_12 = neq(_T_11, UInt<5>("h01f")) @[Decode.scala 63:72]
    node dual = and(_T_10, _T_12) @[Decode.scala 63:46]
    node _T_13 = bits(decReg.instr_a, 26, 22) @[Decode.scala 66:24]
    node _T_14 = bits(decReg.instr_a, 6, 4) @[Decode.scala 67:24]
    wire _WIRE_8 : UInt @[Decode.scala 70:22]
    _WIRE_8 is invalid @[Decode.scala 70:22]
    node lo = bits(decReg.instr_a, 11, 0) @[Decode.scala 72:33]
    node _T_15 = cat(UInt<1>("h00"), lo) @[Cat.scala 30:58]
    _WIRE_8 <= _T_15 @[Decode.scala 72:12]
    node _T_16 = bits(decReg.instr_a, 3, 0) @[Decode.scala 75:36]
    io.decex.aluOp[0].func <= _T_16 @[Decode.scala 75:28]
    node _T_17 = bits(_T_13, 4, 3) @[Decode.scala 78:16]
    node _T_18 = eq(_T_17, UInt<2>("h00")) @[Decode.scala 78:23]
    when _T_18 : @[Decode.scala 78:40]
      node lo_1 = bits(decReg.instr_a, 24, 22) @[Decode.scala 79:51]
      node _T_19 = cat(UInt<1>("h00"), lo_1) @[Cat.scala 30:58]
      io.decex.aluOp[0].func <= _T_19 @[Decode.scala 79:30]
      io.decex.immOp[0] <= UInt<1>("h01") @[Decode.scala 80:25]
      io.decex.wrRd[0] <= UInt<1>("h01") @[Decode.scala 81:24]
      decoded[0] <= UInt<1>("h01") @[Decode.scala 82:18]
      skip @[Decode.scala 78:40]
    node _T_20 = eq(_T_13, UInt<5>("h08")) @[Decode.scala 85:17]
    when _T_20 : @[Decode.scala 85:33]
      node _T_21 = eq(UInt<3>("h00"), _T_14) @[Conditional.scala 37:30]
      when _T_21 : @[Conditional.scala 40:58]
        io.decex.wrRd[0] <= UInt<1>("h01") @[Decode.scala 88:28]
        decoded[0] <= UInt<1>("h01") @[Decode.scala 89:22]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_22 = eq(UInt<3>("h01"), _T_14) @[Conditional.scala 37:30]
        when _T_22 : @[Conditional.scala 39:67]
          io.decex.wrRd[0] <= UInt<1>("h01") @[Decode.scala 92:28]
          decoded[0] <= UInt<1>("h01") @[Decode.scala 93:22]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_23 = eq(UInt<3>("h02"), _T_14) @[Conditional.scala 37:30]
          when _T_23 : @[Conditional.scala 39:67]
            io.decex.aluOp[0].isMul <= UInt<1>("h01") @[Decode.scala 96:35]
            decoded[0] <= UInt<1>("h01") @[Decode.scala 97:22]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_24 = eq(UInt<3>("h03"), _T_14) @[Conditional.scala 37:30]
            when _T_24 : @[Conditional.scala 39:67]
              io.decex.aluOp[0].isCmp <= UInt<1>("h01") @[Decode.scala 100:35]
              decoded[0] <= UInt<1>("h01") @[Decode.scala 101:22]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_25 = eq(UInt<3>("h06"), _T_14) @[Conditional.scala 37:30]
              when _T_25 : @[Conditional.scala 39:67]
                io.decex.aluOp[0].isCmp <= UInt<1>("h01") @[Decode.scala 104:35]
                io.decex.immOp[0] <= UInt<1>("h01") @[Decode.scala 105:29]
                node lo_2 = bits(decReg.instr_a, 11, 7) @[Decode.scala 106:39]
                node _T_26 = cat(UInt<1>("h00"), lo_2) @[Cat.scala 30:58]
                _WIRE_8 <= _T_26 @[Decode.scala 106:18]
                decoded[0] <= UInt<1>("h01") @[Decode.scala 107:22]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_27 = eq(UInt<3>("h04"), _T_14) @[Conditional.scala 37:30]
                when _T_27 : @[Conditional.scala 39:67]
                  io.decex.aluOp[0].isPred <= UInt<1>("h01") @[Decode.scala 110:36]
                  decoded[0] <= UInt<1>("h01") @[Decode.scala 111:22]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_28 = eq(UInt<3>("h05"), _T_14) @[Conditional.scala 37:30]
                  when _T_28 : @[Conditional.scala 39:67]
                    io.decex.wrRd[0] <= UInt<1>("h01") @[Decode.scala 114:28]
                    io.decex.aluOp[0].isBCpy <= UInt<1>("h01") @[Decode.scala 115:36]
                    io.decex.immOp[0] <= UInt<1>("h01") @[Decode.scala 116:29]
                    node lo_3 = bits(decReg.instr_a, 11, 7) @[Decode.scala 117:39]
                    node _T_29 = cat(UInt<1>("h00"), lo_3) @[Cat.scala 30:58]
                    _WIRE_8 <= _T_29 @[Decode.scala 117:18]
                    decoded[0] <= UInt<1>("h01") @[Decode.scala 118:22]
                    skip @[Conditional.scala 39:67]
      skip @[Decode.scala 85:33]
    node _T_30 = eq(_T_13, UInt<5>("h09")) @[Decode.scala 123:17]
    when _T_30 : @[Decode.scala 123:33]
      node _T_31 = eq(UInt<3>("h02"), _T_14) @[Conditional.scala 37:30]
      when _T_31 : @[Conditional.scala 40:58]
        io.decex.aluOp[0].isMTS <= UInt<1>("h01") @[Decode.scala 126:35]
        decoded[0] <= UInt<1>("h01") @[Decode.scala 127:22]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_32 = eq(UInt<3>("h03"), _T_14) @[Conditional.scala 37:30]
        when _T_32 : @[Conditional.scala 39:67]
          io.decex.aluOp[0].isMFS <= UInt<1>("h01") @[Decode.scala 130:35]
          io.decex.wrRd[0] <= UInt<1>("h01") @[Decode.scala 131:28]
          decoded[0] <= UInt<1>("h01") @[Decode.scala 132:22]
          skip @[Conditional.scala 39:67]
      skip @[Decode.scala 123:33]
    io.decex.immVal[0] <= _WIRE_8 @[Decode.scala 138:24]
    node hi = bits(decReg.instr_a, 3, 3) @[Decode.scala 141:41]
    node lo_4 = bits(decReg.instr_a, 0, 0) @[Decode.scala 141:51]
    node _T_33 = cat(hi, lo_4) @[Cat.scala 30:58]
    io.decex.predOp[0].func <= _T_33 @[Decode.scala 141:29]
    node _T_34 = bits(decReg.instr_a, 15, 12) @[Decode.scala 142:39]
    io.decex.predOp[0].s1Addr <= _T_34 @[Decode.scala 142:31]
    node _T_35 = bits(decReg.instr_a, 10, 7) @[Decode.scala 143:39]
    io.decex.predOp[0].s2Addr <= _T_35 @[Decode.scala 143:31]
    node _T_36 = bits(decReg.instr_a, 19, 17) @[Decode.scala 144:37]
    io.decex.predOp[0].dest <= _T_36 @[Decode.scala 144:29]
    node _T_37 = bits(decReg.instr_a, 30, 27) @[Decode.scala 145:30]
    io.decex.pred[0] <= _T_37 @[Decode.scala 145:22]
    node _T_38 = bits(decReg.instr_a, 21, 17) @[Decode.scala 148:32]
    io.decex.rdAddr[0] <= _T_38 @[Decode.scala 148:24]
    node _T_39 = bits(decReg.instr_b, 26, 22) @[Decode.scala 66:24]
    node _T_40 = bits(decReg.instr_b, 6, 4) @[Decode.scala 67:24]
    wire _WIRE_9 : UInt @[Decode.scala 70:22]
    _WIRE_9 is invalid @[Decode.scala 70:22]
    node lo_5 = bits(decReg.instr_b, 11, 0) @[Decode.scala 72:33]
    node _T_41 = cat(UInt<1>("h00"), lo_5) @[Cat.scala 30:58]
    _WIRE_9 <= _T_41 @[Decode.scala 72:12]
    node _T_42 = bits(decReg.instr_b, 3, 0) @[Decode.scala 75:36]
    io.decex.aluOp[1].func <= _T_42 @[Decode.scala 75:28]
    node _T_43 = bits(_T_39, 4, 3) @[Decode.scala 78:16]
    node _T_44 = eq(_T_43, UInt<2>("h00")) @[Decode.scala 78:23]
    when _T_44 : @[Decode.scala 78:40]
      node lo_6 = bits(decReg.instr_b, 24, 22) @[Decode.scala 79:51]
      node _T_45 = cat(UInt<1>("h00"), lo_6) @[Cat.scala 30:58]
      io.decex.aluOp[1].func <= _T_45 @[Decode.scala 79:30]
      io.decex.immOp[1] <= dual @[Decode.scala 80:25]
      io.decex.wrRd[1] <= dual @[Decode.scala 81:24]
      decoded[1] <= UInt<1>("h01") @[Decode.scala 82:18]
      skip @[Decode.scala 78:40]
    node _T_46 = eq(_T_39, UInt<5>("h08")) @[Decode.scala 85:17]
    when _T_46 : @[Decode.scala 85:33]
      node _T_47 = eq(UInt<3>("h00"), _T_40) @[Conditional.scala 37:30]
      when _T_47 : @[Conditional.scala 40:58]
        io.decex.wrRd[1] <= dual @[Decode.scala 88:28]
        decoded[1] <= UInt<1>("h01") @[Decode.scala 89:22]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_48 = eq(UInt<3>("h01"), _T_40) @[Conditional.scala 37:30]
        when _T_48 : @[Conditional.scala 39:67]
          io.decex.wrRd[1] <= dual @[Decode.scala 92:28]
          decoded[1] <= UInt<1>("h01") @[Decode.scala 93:22]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_49 = eq(UInt<3>("h02"), _T_40) @[Conditional.scala 37:30]
          when _T_49 : @[Conditional.scala 39:67]
            io.decex.aluOp[1].isMul <= dual @[Decode.scala 96:35]
            decoded[1] <= UInt<1>("h01") @[Decode.scala 97:22]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_50 = eq(UInt<3>("h03"), _T_40) @[Conditional.scala 37:30]
            when _T_50 : @[Conditional.scala 39:67]
              io.decex.aluOp[1].isCmp <= dual @[Decode.scala 100:35]
              decoded[1] <= UInt<1>("h01") @[Decode.scala 101:22]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_51 = eq(UInt<3>("h06"), _T_40) @[Conditional.scala 37:30]
              when _T_51 : @[Conditional.scala 39:67]
                io.decex.aluOp[1].isCmp <= dual @[Decode.scala 104:35]
                io.decex.immOp[1] <= dual @[Decode.scala 105:29]
                node lo_7 = bits(decReg.instr_b, 11, 7) @[Decode.scala 106:39]
                node _T_52 = cat(UInt<1>("h00"), lo_7) @[Cat.scala 30:58]
                _WIRE_9 <= _T_52 @[Decode.scala 106:18]
                decoded[1] <= UInt<1>("h01") @[Decode.scala 107:22]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_53 = eq(UInt<3>("h04"), _T_40) @[Conditional.scala 37:30]
                when _T_53 : @[Conditional.scala 39:67]
                  io.decex.aluOp[1].isPred <= dual @[Decode.scala 110:36]
                  decoded[1] <= UInt<1>("h01") @[Decode.scala 111:22]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_54 = eq(UInt<3>("h05"), _T_40) @[Conditional.scala 37:30]
                  when _T_54 : @[Conditional.scala 39:67]
                    io.decex.wrRd[1] <= dual @[Decode.scala 114:28]
                    io.decex.aluOp[1].isBCpy <= dual @[Decode.scala 115:36]
                    io.decex.immOp[1] <= dual @[Decode.scala 116:29]
                    node lo_8 = bits(decReg.instr_b, 11, 7) @[Decode.scala 117:39]
                    node _T_55 = cat(UInt<1>("h00"), lo_8) @[Cat.scala 30:58]
                    _WIRE_9 <= _T_55 @[Decode.scala 117:18]
                    decoded[1] <= UInt<1>("h01") @[Decode.scala 118:22]
                    skip @[Conditional.scala 39:67]
      skip @[Decode.scala 85:33]
    node _T_56 = eq(_T_39, UInt<5>("h09")) @[Decode.scala 123:17]
    when _T_56 : @[Decode.scala 123:33]
      node _T_57 = eq(UInt<3>("h02"), _T_40) @[Conditional.scala 37:30]
      when _T_57 : @[Conditional.scala 40:58]
        io.decex.aluOp[1].isMTS <= dual @[Decode.scala 126:35]
        decoded[1] <= UInt<1>("h01") @[Decode.scala 127:22]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_58 = eq(UInt<3>("h03"), _T_40) @[Conditional.scala 37:30]
        when _T_58 : @[Conditional.scala 39:67]
          io.decex.aluOp[1].isMFS <= dual @[Decode.scala 130:35]
          io.decex.wrRd[1] <= dual @[Decode.scala 131:28]
          decoded[1] <= UInt<1>("h01") @[Decode.scala 132:22]
          skip @[Conditional.scala 39:67]
      skip @[Decode.scala 123:33]
    io.decex.immVal[1] <= _WIRE_9 @[Decode.scala 138:24]
    node hi_1 = bits(decReg.instr_b, 3, 3) @[Decode.scala 141:41]
    node lo_9 = bits(decReg.instr_b, 0, 0) @[Decode.scala 141:51]
    node _T_59 = cat(hi_1, lo_9) @[Cat.scala 30:58]
    io.decex.predOp[1].func <= _T_59 @[Decode.scala 141:29]
    node _T_60 = bits(decReg.instr_b, 15, 12) @[Decode.scala 142:39]
    io.decex.predOp[1].s1Addr <= _T_60 @[Decode.scala 142:31]
    node _T_61 = bits(decReg.instr_b, 10, 7) @[Decode.scala 143:39]
    io.decex.predOp[1].s2Addr <= _T_61 @[Decode.scala 143:31]
    node _T_62 = bits(decReg.instr_b, 19, 17) @[Decode.scala 144:37]
    io.decex.predOp[1].dest <= _T_62 @[Decode.scala 144:29]
    node _T_63 = bits(decReg.instr_b, 30, 27) @[Decode.scala 145:30]
    io.decex.pred[1] <= _T_63 @[Decode.scala 145:22]
    node _T_64 = bits(decReg.instr_b, 21, 17) @[Decode.scala 148:32]
    io.decex.rdAddr[1] <= _T_64 @[Decode.scala 148:24]
    node opcode = bits(decReg.instr_a, 26, 22) @[Decode.scala 153:21]
    node func = bits(decReg.instr_a, 3, 0) @[Decode.scala 154:19]
    node ldsize = bits(decReg.instr_a, 11, 9) @[Decode.scala 156:21]
    node ldtype = bits(decReg.instr_a, 8, 7) @[Decode.scala 157:21]
    node stsize = bits(decReg.instr_a, 21, 19) @[Decode.scala 158:21]
    node sttype = bits(decReg.instr_a, 18, 17) @[Decode.scala 159:21]
    node stcfun = bits(decReg.instr_a, 21, 18) @[Decode.scala 160:21]
    wire dest : UInt<5> @[Decode.scala 162:18]
    dest is invalid @[Decode.scala 162:18]
    wire longImm : UInt<1> @[Decode.scala 163:21]
    longImm is invalid @[Decode.scala 163:21]
    wire isMem : UInt<1> @[Decode.scala 165:19]
    isMem is invalid @[Decode.scala 165:19]
    wire isStack : UInt<1> @[Decode.scala 166:21]
    isStack is invalid @[Decode.scala 166:21]
    wire isSTC : UInt<1> @[Decode.scala 168:19]
    isSTC is invalid @[Decode.scala 168:19]
    node hi_lo = bits(decReg.instr_a, 17, 0) @[Decode.scala 169:34]
    node hi_2 = cat(UInt<1>("h00"), hi_lo) @[Cat.scala 30:58]
    node stcImm = cat(hi_2, UInt<2>("h00")) @[Cat.scala 30:58]
    longImm <= UInt<1>("h00") @[Decode.scala 172:11]
    isMem <= UInt<1>("h00") @[Decode.scala 175:9]
    isStack <= UInt<1>("h00") @[Decode.scala 176:11]
    isSTC <= UInt<1>("h00") @[Decode.scala 177:9]
    node _T_65 = bits(decReg.instr_a, 21, 17) @[Decode.scala 180:16]
    dest <= _T_65 @[Decode.scala 180:8]
    node _T_66 = eq(opcode, UInt<5>("h01f")) @[Decode.scala 183:15]
    node _T_67 = bits(decReg.instr_a, 6, 4) @[Decode.scala 183:39]
    node _T_68 = eq(_T_67, UInt<1>("h00")) @[Decode.scala 183:46]
    node _T_69 = and(_T_66, _T_68) @[Decode.scala 183:31]
    when _T_69 : @[Decode.scala 183:59]
      io.decex.aluOp[0].func <= func @[Decode.scala 184:28]
      io.decex.immOp[0] <= UInt<1>("h01") @[Decode.scala 185:23]
      longImm <= UInt<1>("h01") @[Decode.scala 186:13]
      io.decex.wrRd[0] <= UInt<1>("h01") @[Decode.scala 187:22]
      decoded[0] <= UInt<1>("h01") @[Decode.scala 188:16]
      skip @[Decode.scala 183:59]
    node _T_70 = eq(opcode, UInt<5>("h0c")) @[Decode.scala 191:15]
    when _T_70 : @[Decode.scala 191:31]
      node _T_71 = eq(UInt<4>("h00"), stcfun) @[Conditional.scala 37:30]
      when _T_71 : @[Conditional.scala 40:58]
        isSTC <= UInt<1>("h01") @[Decode.scala 194:15]
        io.decex.stackOp <= UInt<3>("h03") @[Decode.scala 195:26]
        io.decex.immOp[0] <= UInt<1>("h01") @[Decode.scala 196:27]
        decoded[0] <= UInt<1>("h01") @[Decode.scala 197:20]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_72 = eq(UInt<4>("h04"), stcfun) @[Conditional.scala 37:30]
        when _T_72 : @[Conditional.scala 39:67]
          isSTC <= UInt<1>("h01") @[Decode.scala 200:15]
          io.decex.stackOp <= UInt<3>("h04") @[Decode.scala 201:26]
          io.decex.immOp[0] <= UInt<1>("h01") @[Decode.scala 202:27]
          decoded[0] <= UInt<1>("h01") @[Decode.scala 203:20]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_73 = eq(UInt<4>("h05"), stcfun) @[Conditional.scala 37:30]
          when _T_73 : @[Conditional.scala 39:67]
            isSTC <= UInt<1>("h01") @[Decode.scala 206:15]
            io.decex.stackOp <= UInt<3>("h04") @[Decode.scala 207:26]
            decoded[0] <= UInt<1>("h01") @[Decode.scala 208:20]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_74 = eq(UInt<4>("h08"), stcfun) @[Conditional.scala 37:30]
            when _T_74 : @[Conditional.scala 39:67]
              isSTC <= UInt<1>("h01") @[Decode.scala 211:15]
              io.decex.stackOp <= UInt<3>("h05") @[Decode.scala 212:26]
              io.decex.immOp[0] <= UInt<1>("h01") @[Decode.scala 213:27]
              decoded[0] <= UInt<1>("h01") @[Decode.scala 214:20]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_75 = eq(UInt<4>("h0c"), stcfun) @[Conditional.scala 37:30]
              when _T_75 : @[Conditional.scala 39:67]
                isSTC <= UInt<1>("h01") @[Decode.scala 217:15]
                io.decex.stackOp <= UInt<3>("h06") @[Decode.scala 218:26]
                io.decex.immOp[0] <= UInt<1>("h01") @[Decode.scala 219:27]
                decoded[0] <= UInt<1>("h01") @[Decode.scala 220:20]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_76 = eq(UInt<4>("h0d"), stcfun) @[Conditional.scala 37:30]
                when _T_76 : @[Conditional.scala 39:67]
                  isSTC <= UInt<1>("h01") @[Decode.scala 223:15]
                  io.decex.stackOp <= UInt<3>("h06") @[Decode.scala 224:26]
                  decoded[0] <= UInt<1>("h01") @[Decode.scala 225:20]
                  skip @[Conditional.scala 39:67]
      skip @[Decode.scala 191:31]
    node _T_77 = eq(opcode, UInt<5>("h016")) @[Decode.scala 231:15]
    when _T_77 : @[Decode.scala 231:36]
      io.decex.trap <= UInt<1>("h01") @[Decode.scala 232:19]
      node _T_78 = bits(decReg.instr_a, 4, 0) @[Decode.scala 233:27]
      io.decex.xsrc <= _T_78 @[Decode.scala 233:19]
      decoded[0] <= UInt<1>("h01") @[Decode.scala 234:16]
      skip @[Decode.scala 231:36]
    node _T_79 = eq(opcode, UInt<5>("h011")) @[Decode.scala 236:15]
    node _T_80 = eq(opcode, UInt<5>("h010")) @[Decode.scala 236:45]
    node _T_81 = or(_T_79, _T_80) @[Decode.scala 236:35]
    when _T_81 : @[Decode.scala 236:68]
      io.decex.immOp[0] <= UInt<1>("h01") @[Decode.scala 237:23]
      io.decex.call <= UInt<1>("h01") @[Decode.scala 238:19]
      node _T_82 = eq(opcode, UInt<5>("h010")) @[Decode.scala 239:35]
      io.decex.nonDelayed <= _T_82 @[Decode.scala 239:25]
      decoded[0] <= UInt<1>("h01") @[Decode.scala 240:16]
      skip @[Decode.scala 236:68]
    node _T_83 = eq(opcode, UInt<5>("h013")) @[Decode.scala 242:15]
    node _T_84 = eq(opcode, UInt<5>("h012")) @[Decode.scala 242:43]
    node _T_85 = or(_T_83, _T_84) @[Decode.scala 242:33]
    when _T_85 : @[Decode.scala 242:64]
      io.decex.immOp[0] <= UInt<1>("h01") @[Decode.scala 243:23]
      io.decex.jmpOp.branch <= UInt<1>("h01") @[Decode.scala 244:27]
      node _T_86 = eq(opcode, UInt<5>("h012")) @[Decode.scala 245:35]
      io.decex.nonDelayed <= _T_86 @[Decode.scala 245:25]
      decoded[0] <= UInt<1>("h01") @[Decode.scala 246:16]
      skip @[Decode.scala 242:64]
    node _T_87 = eq(opcode, UInt<5>("h015")) @[Decode.scala 248:15]
    node _T_88 = eq(opcode, UInt<5>("h014")) @[Decode.scala 248:45]
    node _T_89 = or(_T_87, _T_88) @[Decode.scala 248:35]
    when _T_89 : @[Decode.scala 248:68]
      io.decex.immOp[0] <= UInt<1>("h01") @[Decode.scala 249:23]
      io.decex.brcf <= UInt<1>("h01") @[Decode.scala 250:19]
      node _T_90 = eq(opcode, UInt<5>("h014")) @[Decode.scala 251:35]
      io.decex.nonDelayed <= _T_90 @[Decode.scala 251:25]
      decoded[0] <= UInt<1>("h01") @[Decode.scala 252:16]
      skip @[Decode.scala 248:68]
    node _T_91 = eq(opcode, UInt<5>("h019")) @[Decode.scala 254:15]
    node _T_92 = eq(opcode, UInt<5>("h018")) @[Decode.scala 254:45]
    node _T_93 = or(_T_91, _T_92) @[Decode.scala 254:35]
    when _T_93 : @[Decode.scala 254:68]
      node _T_94 = eq(UInt<4>("h00"), func) @[Conditional.scala 37:30]
      when _T_94 : @[Conditional.scala 40:58]
        io.decex.ret <= UInt<1>("h01") @[Decode.scala 257:22]
        decoded[0] <= UInt<1>("h01") @[Decode.scala 258:20]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_95 = eq(UInt<4>("h01"), func) @[Conditional.scala 37:30]
        when _T_95 : @[Conditional.scala 39:67]
          io.decex.xret <= UInt<1>("h01") @[Decode.scala 261:23]
          decoded[0] <= UInt<1>("h01") @[Decode.scala 262:20]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_96 = eq(UInt<4>("h04"), func) @[Conditional.scala 37:30]
          when _T_96 : @[Conditional.scala 39:67]
            io.decex.call <= UInt<1>("h01") @[Decode.scala 265:23]
            decoded[0] <= UInt<1>("h01") @[Decode.scala 266:20]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_97 = eq(UInt<4>("h05"), func) @[Conditional.scala 37:30]
            when _T_97 : @[Conditional.scala 39:67]
              io.decex.jmpOp.branch <= UInt<1>("h01") @[Decode.scala 269:31]
              decoded[0] <= UInt<1>("h01") @[Decode.scala 270:20]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_98 = eq(UInt<4>("h0a"), func) @[Conditional.scala 37:30]
              when _T_98 : @[Conditional.scala 39:67]
                io.decex.brcf <= UInt<1>("h01") @[Decode.scala 273:23]
                decoded[0] <= UInt<1>("h01") @[Decode.scala 274:20]
                skip @[Conditional.scala 39:67]
      node _T_99 = eq(opcode, UInt<5>("h018")) @[Decode.scala 277:35]
      io.decex.nonDelayed <= _T_99 @[Decode.scala 277:25]
      skip @[Decode.scala 254:68]
    wire shamt : UInt @[Decode.scala 280:19]
    shamt is invalid @[Decode.scala 280:19]
    shamt <= UInt<1>("h00") @[Decode.scala 281:9]
    node _T_100 = eq(opcode, UInt<5>("h0a")) @[Decode.scala 283:15]
    when _T_100 : @[Decode.scala 283:31]
      isMem <= UInt<1>("h01") @[Decode.scala 284:11]
      io.decex.memOp.load <= UInt<1>("h01") @[Decode.scala 285:25]
      io.decex.wrRd[0] <= UInt<1>("h01") @[Decode.scala 286:22]
      node _T_101 = eq(UInt<3>("h00"), ldsize) @[Conditional.scala 37:30]
      when _T_101 : @[Conditional.scala 40:58]
        shamt <= UInt<2>("h02") @[Decode.scala 289:15]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_102 = eq(UInt<3>("h01"), ldsize) @[Conditional.scala 37:30]
        when _T_102 : @[Conditional.scala 39:67]
          shamt <= UInt<1>("h01") @[Decode.scala 292:15]
          io.decex.memOp.hword <= UInt<1>("h01") @[Decode.scala 293:30]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_103 = eq(UInt<3>("h02"), ldsize) @[Conditional.scala 37:30]
          when _T_103 : @[Conditional.scala 39:67]
            io.decex.memOp.byte <= UInt<1>("h01") @[Decode.scala 296:29]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_104 = eq(UInt<3>("h03"), ldsize) @[Conditional.scala 37:30]
            when _T_104 : @[Conditional.scala 39:67]
              shamt <= UInt<1>("h01") @[Decode.scala 299:15]
              io.decex.memOp.hword <= UInt<1>("h01") @[Decode.scala 300:30]
              io.decex.memOp.zext <= UInt<1>("h01") @[Decode.scala 301:29]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_105 = eq(UInt<3>("h04"), ldsize) @[Conditional.scala 37:30]
              when _T_105 : @[Conditional.scala 39:67]
                io.decex.memOp.byte <= UInt<1>("h01") @[Decode.scala 304:29]
                io.decex.memOp.zext <= UInt<1>("h01") @[Decode.scala 305:29]
                skip @[Conditional.scala 39:67]
      io.decex.memOp.typ <= ldtype @[Decode.scala 308:24]
      node _T_106 = eq(ldtype, UInt<2>("h02")) @[Decode.scala 309:17]
      node _T_107 = and(_T_106, io.exc.local) @[Decode.scala 309:29]
      when _T_107 : @[Decode.scala 309:46]
        io.decex.memOp.typ <= UInt<2>("h01") @[Decode.scala 310:26]
        skip @[Decode.scala 309:46]
      node _T_108 = eq(ldtype, UInt<2>("h00")) @[Decode.scala 312:17]
      when _T_108 : @[Decode.scala 312:30]
        isStack <= UInt<1>("h01") @[Decode.scala 313:15]
        skip @[Decode.scala 312:30]
      decoded[0] <= UInt<1>("h01") @[Decode.scala 315:16]
      skip @[Decode.scala 283:31]
    node _T_109 = eq(opcode, UInt<5>("h0b")) @[Decode.scala 318:15]
    when _T_109 : @[Decode.scala 318:31]
      isMem <= UInt<1>("h01") @[Decode.scala 319:11]
      io.decex.memOp.store <= UInt<1>("h01") @[Decode.scala 320:26]
      node _T_110 = eq(UInt<3>("h00"), stsize) @[Conditional.scala 37:30]
      when _T_110 : @[Conditional.scala 40:58]
        shamt <= UInt<2>("h02") @[Decode.scala 323:15]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_111 = eq(UInt<3>("h01"), stsize) @[Conditional.scala 37:30]
        when _T_111 : @[Conditional.scala 39:67]
          shamt <= UInt<1>("h01") @[Decode.scala 326:15]
          io.decex.memOp.hword <= UInt<1>("h01") @[Decode.scala 327:30]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_112 = eq(UInt<3>("h02"), stsize) @[Conditional.scala 37:30]
          when _T_112 : @[Conditional.scala 39:67]
            io.decex.memOp.byte <= UInt<1>("h01") @[Decode.scala 330:29]
            skip @[Conditional.scala 39:67]
      io.decex.memOp.typ <= sttype @[Decode.scala 333:24]
      node _T_113 = eq(sttype, UInt<2>("h02")) @[Decode.scala 334:17]
      node _T_114 = and(_T_113, io.exc.local) @[Decode.scala 334:29]
      when _T_114 : @[Decode.scala 334:46]
        io.decex.memOp.typ <= UInt<2>("h01") @[Decode.scala 335:26]
        skip @[Decode.scala 334:46]
      node _T_115 = eq(sttype, UInt<2>("h00")) @[Decode.scala 337:17]
      when _T_115 : @[Decode.scala 337:30]
        isStack <= UInt<1>("h01") @[Decode.scala 338:15]
        skip @[Decode.scala 337:30]
      decoded[0] <= UInt<1>("h01") @[Decode.scala 340:16]
      skip @[Decode.scala 318:31]
    wire addrImm : UInt @[Decode.scala 344:21]
    addrImm is invalid @[Decode.scala 344:21]
    node lo_10 = bits(decReg.instr_a, 6, 0) @[Decode.scala 345:32]
    node _T_116 = cat(UInt<1>("h00"), lo_10) @[Cat.scala 30:58]
    addrImm <= _T_116 @[Decode.scala 345:11]
    node _T_117 = eq(UInt<1>("h01"), shamt) @[Conditional.scala 37:30]
    when _T_117 : @[Conditional.scala 40:58]
      node hi_lo_1 = bits(decReg.instr_a, 6, 0) @[Decode.scala 347:48]
      node hi_3 = cat(UInt<1>("h00"), hi_lo_1) @[Cat.scala 30:58]
      node _T_118 = cat(hi_3, UInt<1>("h00")) @[Cat.scala 30:58]
      addrImm <= _T_118 @[Decode.scala 347:27]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_119 = eq(UInt<2>("h02"), shamt) @[Conditional.scala 37:30]
      when _T_119 : @[Conditional.scala 39:67]
        node hi_lo_2 = bits(decReg.instr_a, 6, 0) @[Decode.scala 348:48]
        node hi_4 = cat(UInt<1>("h00"), hi_lo_2) @[Cat.scala 30:58]
        node _T_120 = cat(hi_4, UInt<2>("h00")) @[Cat.scala 30:58]
        addrImm <= _T_120 @[Decode.scala 348:27]
        skip @[Conditional.scala 39:67]
    node _T_121 = or(isSTC, isStack) @[Decode.scala 352:15]
    node _T_122 = or(_T_121, isMem) @[Decode.scala 352:26]
    node _T_123 = or(_T_122, longImm) @[Decode.scala 352:35]
    when _T_123 : @[Decode.scala 352:47]
      node _T_124 = mux(isMem, addrImm, decReg.instr_b) @[Decode.scala 355:38]
      node _T_125 = mux(isStack, addrImm, _T_124) @[Decode.scala 354:34]
      node _T_126 = mux(isSTC, stcImm, _T_125) @[Decode.scala 353:30]
      io.decex.immVal[0] <= _T_126 @[Decode.scala 353:24]
      skip @[Decode.scala 352:47]
    node hi_lo_3 = bits(decReg.instr_a, 21, 0) @[Decode.scala 361:42]
    node hi_5 = cat(UInt<1>("h00"), hi_lo_3) @[Cat.scala 30:58]
    node _T_127 = cat(hi_5, UInt<2>("h00")) @[Cat.scala 30:58]
    io.decex.callAddr <= _T_127 @[Decode.scala 361:21]
    node _T_128 = bits(decReg.instr_a, 21, 21) @[Decode.scala 365:68]
    node _T_129 = bits(_T_128, 0, 0) @[Bitwise.scala 72:15]
    node hi_6 = mux(_T_129, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node lo_11 = bits(decReg.instr_a, 21, 0) @[Decode.scala 365:80]
    node _T_130 = cat(hi_6, lo_11) @[Cat.scala 30:58]
    node _T_131 = add(decReg.pc, _T_130) @[Decode.scala 365:38]
    node _T_132 = tail(_T_131, 1) @[Decode.scala 365:38]
    io.decex.jmpOp.target <= _T_132 @[Decode.scala 365:25]
    io.decex.jmpOp.reloc <= decReg.reloc @[Decode.scala 366:24]
    io.decex.pc <= decReg.pc @[Decode.scala 369:15]
    io.decex.base <= decReg.base @[Decode.scala 370:17]
    io.decex.relPc <= decReg.relPc @[Decode.scala 371:18]
    io.decex.rdAddr[0] <= dest @[Decode.scala 374:22]
    node _T_133 = eq(io.decex.rdAddr[0], UInt<1>("h00")) @[Decode.scala 378:29]
    when _T_133 : @[Decode.scala 378:49]
      io.decex.wrRd[0] <= UInt<1>("h00") @[Decode.scala 379:24]
      skip @[Decode.scala 378:49]
    node _T_134 = eq(io.decex.rdAddr[1], UInt<1>("h00")) @[Decode.scala 378:29]
    when _T_134 : @[Decode.scala 378:49]
      io.decex.wrRd[1] <= UInt<1>("h00") @[Decode.scala 379:24]
      skip @[Decode.scala 378:49]
    node _T_135 = and(decoded[0], decoded[1]) @[Decode.scala 384:48]
    node _T_136 = mux(dual, _T_135, decoded[0]) @[Decode.scala 384:25]
    node _T_137 = eq(_T_136, UInt<1>("h00")) @[Decode.scala 384:21]
    io.decex.illOp <= _T_137 @[Decode.scala 384:18]
    reg inDelaySlot : UInt<2>, clock @[Decode.scala 387:24]
    node _T_138 = eq(inDelaySlot, UInt<1>("h00")) @[Decode.scala 390:36]
    node _T_139 = and(io.exc.intr, _T_138) @[Decode.scala 390:21]
    node _T_140 = or(io.exc.exc, _T_139) @[Decode.scala 389:19]
    when _T_140 : @[Decode.scala 390:50]
      io.decex.pc <= UInt<1>("h00") @[connections.scala 139:8]
      io.decex.relPc <= UInt<1>("h00") @[connections.scala 140:11]
      node _T_141 = cat(UInt<1>("h01"), UInt<3>("h00")) @[Constants.scala 100:33]
      node _T_142 = cat(UInt<1>("h01"), UInt<3>("h00")) @[Constants.scala 100:33]
      wire _WIRE_10 : UInt<4>[2] @[compatibility.scala 127:12]
      _WIRE_10 is invalid @[compatibility.scala 127:12]
      _WIRE_10[0] <= _T_141 @[compatibility.scala 127:12]
      _WIRE_10[1] <= _T_142 @[compatibility.scala 127:12]
      io.decex.pred <- _WIRE_10 @[connections.scala 141:10]
      io.decex.aluOp[0].func <= UInt<1>("h00") @[connections.scala 46:10]
      io.decex.aluOp[0].isMul <= UInt<1>("h00") @[connections.scala 47:11]
      io.decex.aluOp[0].isCmp <= UInt<1>("h00") @[connections.scala 48:11]
      io.decex.aluOp[0].isPred <= UInt<1>("h00") @[connections.scala 49:12]
      io.decex.aluOp[0].isBCpy <= UInt<1>("h00") @[connections.scala 50:12]
      io.decex.aluOp[0].isMTS <= UInt<1>("h00") @[connections.scala 51:11]
      io.decex.aluOp[0].isMFS <= UInt<1>("h00") @[connections.scala 52:11]
      io.decex.aluOp[1].func <= UInt<1>("h00") @[connections.scala 46:10]
      io.decex.aluOp[1].isMul <= UInt<1>("h00") @[connections.scala 47:11]
      io.decex.aluOp[1].isCmp <= UInt<1>("h00") @[connections.scala 48:11]
      io.decex.aluOp[1].isPred <= UInt<1>("h00") @[connections.scala 49:12]
      io.decex.aluOp[1].isBCpy <= UInt<1>("h00") @[connections.scala 50:12]
      io.decex.aluOp[1].isMTS <= UInt<1>("h00") @[connections.scala 51:11]
      io.decex.aluOp[1].isMFS <= UInt<1>("h00") @[connections.scala 52:11]
      io.decex.predOp[0].func <= UInt<1>("h00") @[connections.scala 63:10]
      io.decex.predOp[0].dest <= UInt<1>("h00") @[connections.scala 64:10]
      io.decex.predOp[0].s1Addr <= UInt<1>("h00") @[connections.scala 65:12]
      io.decex.predOp[0].s2Addr <= UInt<1>("h00") @[connections.scala 66:12]
      io.decex.predOp[1].func <= UInt<1>("h00") @[connections.scala 63:10]
      io.decex.predOp[1].dest <= UInt<1>("h00") @[connections.scala 64:10]
      io.decex.predOp[1].s1Addr <= UInt<1>("h00") @[connections.scala 65:12]
      io.decex.predOp[1].s2Addr <= UInt<1>("h00") @[connections.scala 66:12]
      io.decex.jmpOp.branch <= UInt<1>("h00") @[connections.scala 76:12]
      io.decex.jmpOp.target <= UInt<1>("h00") @[connections.scala 77:12]
      io.decex.jmpOp.reloc <= UInt<1>("h00") @[connections.scala 78:11]
      io.decex.memOp.load <= UInt<1>("h00") @[connections.scala 91:10]
      io.decex.memOp.store <= UInt<1>("h00") @[connections.scala 92:11]
      io.decex.memOp.hword <= UInt<1>("h00") @[connections.scala 93:11]
      io.decex.memOp.byte <= UInt<1>("h00") @[connections.scala 94:10]
      io.decex.memOp.zext <= UInt<1>("h00") @[connections.scala 95:10]
      io.decex.memOp.typ <= UInt<1>("h00") @[connections.scala 96:9]
      io.decex.stackOp <= UInt<3>("h00") @[connections.scala 146:13]
      wire _WIRE_11 : UInt<1>[4] @[compatibility.scala 127:12]
      _WIRE_11 is invalid @[compatibility.scala 127:12]
      _WIRE_11[0] <= UInt<1>("h00") @[compatibility.scala 127:12]
      _WIRE_11[1] <= UInt<1>("h00") @[compatibility.scala 127:12]
      _WIRE_11[2] <= UInt<1>("h00") @[compatibility.scala 127:12]
      _WIRE_11[3] <= UInt<1>("h00") @[compatibility.scala 127:12]
      io.decex.rsAddr <- _WIRE_11 @[connections.scala 147:12]
      wire _WIRE_12 : UInt<1>[4] @[compatibility.scala 127:12]
      _WIRE_12 is invalid @[compatibility.scala 127:12]
      _WIRE_12[0] <= UInt<1>("h00") @[compatibility.scala 127:12]
      _WIRE_12[1] <= UInt<1>("h00") @[compatibility.scala 127:12]
      _WIRE_12[2] <= UInt<1>("h00") @[compatibility.scala 127:12]
      _WIRE_12[3] <= UInt<1>("h00") @[compatibility.scala 127:12]
      io.decex.rsData <- _WIRE_12 @[connections.scala 148:12]
      wire _WIRE_13 : UInt<1>[2] @[compatibility.scala 127:12]
      _WIRE_13 is invalid @[compatibility.scala 127:12]
      _WIRE_13[0] <= UInt<1>("h00") @[compatibility.scala 127:12]
      _WIRE_13[1] <= UInt<1>("h00") @[compatibility.scala 127:12]
      io.decex.rdAddr <- _WIRE_13 @[connections.scala 149:12]
      wire _WIRE_14 : UInt<1>[2] @[compatibility.scala 127:12]
      _WIRE_14 is invalid @[compatibility.scala 127:12]
      _WIRE_14[0] <= UInt<1>("h00") @[compatibility.scala 127:12]
      _WIRE_14[1] <= UInt<1>("h00") @[compatibility.scala 127:12]
      io.decex.immVal <- _WIRE_14 @[connections.scala 150:12]
      wire _WIRE_15 : UInt<1>[2] @[compatibility.scala 127:12]
      _WIRE_15 is invalid @[compatibility.scala 127:12]
      _WIRE_15[0] <= UInt<1>("h00") @[compatibility.scala 127:12]
      _WIRE_15[1] <= UInt<1>("h00") @[compatibility.scala 127:12]
      io.decex.immOp <- _WIRE_15 @[connections.scala 151:11]
      wire _WIRE_16 : UInt<1>[2] @[compatibility.scala 127:12]
      _WIRE_16 is invalid @[compatibility.scala 127:12]
      _WIRE_16[0] <= UInt<1>("h00") @[compatibility.scala 127:12]
      _WIRE_16[1] <= UInt<1>("h00") @[compatibility.scala 127:12]
      io.decex.wrRd <- _WIRE_16 @[connections.scala 152:10]
      io.decex.callAddr <= UInt<1>("h00") @[connections.scala 153:14]
      io.decex.call <= UInt<1>("h00") @[connections.scala 154:10]
      io.decex.ret <= UInt<1>("h00") @[connections.scala 155:9]
      io.decex.brcf <= UInt<1>("h00") @[connections.scala 156:10]
      io.decex.trap <= UInt<1>("h00") @[connections.scala 157:10]
      io.decex.xcall <= UInt<1>("h00") @[connections.scala 158:11]
      io.decex.xret <= UInt<1>("h00") @[connections.scala 159:10]
      io.decex.xsrc <= UInt<1>("h00") @[connections.scala 160:10]
      io.decex.nonDelayed <= UInt<1>("h00") @[connections.scala 161:16]
      io.decex.illOp <= UInt<1>("h00") @[connections.scala 162:11]
      io.decex.pred[0] <= UInt<1>("h00") @[Decode.scala 392:22]
      io.decex.xcall <= UInt<1>("h01") @[Decode.scala 393:20]
      io.decex.xsrc <= io.exc.src @[Decode.scala 394:19]
      io.decex.callAddr <= io.exc.addr @[Decode.scala 395:23]
      io.decex.immOp[0] <= UInt<1>("h01") @[Decode.scala 396:23]
      node _T_143 = mux(io.exc.exc, io.exc.excBase, decReg.base) @[Decode.scala 397:25]
      io.decex.base <= _T_143 @[Decode.scala 397:19]
      node _T_144 = mux(io.exc.exc, io.exc.excAddr, decReg.relPc) @[Decode.scala 398:26]
      io.decex.relPc <= _T_144 @[Decode.scala 398:20]
      skip @[Decode.scala 390:50]
    when io.ena : @[Decode.scala 402:16]
      node _T_145 = sub(inDelaySlot, UInt<1>("h01")) @[Decode.scala 403:36]
      node _T_146 = tail(_T_145, 1) @[Decode.scala 403:36]
      node _T_147 = or(io.decex.call, io.decex.ret) @[Decode.scala 405:42]
      node _T_148 = or(_T_147, io.decex.brcf) @[Decode.scala 405:58]
      node _T_149 = or(_T_148, io.decex.xcall) @[Decode.scala 405:75]
      node _T_150 = or(_T_149, io.decex.xret) @[Decode.scala 406:43]
      node _T_151 = gt(inDelaySlot, UInt<1>("h01")) @[Decode.scala 409:52]
      node _T_152 = mux(_T_151, _T_146, UInt<1>("h01")) @[Decode.scala 409:39]
      node _T_153 = neq(inDelaySlot, UInt<1>("h00")) @[Decode.scala 410:52]
      node _T_154 = mux(_T_153, _T_146, UInt<1>("h00")) @[Decode.scala 410:39]
      node _T_155 = mux(io.decex.aluOp[0].isMul, _T_152, _T_154) @[Decode.scala 408:35]
      node _T_156 = mux(io.decex.jmpOp.branch, UInt<2>("h02"), _T_155) @[Decode.scala 407:31]
      node _T_157 = mux(_T_150, UInt<2>("h03"), _T_156) @[Decode.scala 405:27]
      node _T_158 = mux(io.flush, UInt<1>("h01"), _T_157) @[Decode.scala 404:23]
      inDelaySlot <= _T_158 @[Decode.scala 404:17]
      skip @[Decode.scala 402:16]
    node _T_159 = bits(reset, 0, 0) @[compatibility.scala 260:56]
    when _T_159 : @[Decode.scala 414:15]
      decReg.instr_a <= UInt<1>("h00") @[connections.scala 31:13]
      decReg.instr_b <= UInt<1>("h00") @[connections.scala 32:13]
      skip @[Decode.scala 414:15]
    
  module Execute : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip ena : UInt<1>, flip flush : UInt<1>, brflush : UInt<1>, flip decex : {pc : UInt<30>, base : UInt<30>, relPc : UInt<30>, pred : UInt<4>[2], aluOp : {func : UInt<4>, isMul : UInt<1>, isCmp : UInt<1>, isPred : UInt<1>, isBCpy : UInt<1>, isMTS : UInt<1>, isMFS : UInt<1>}[2], predOp : {func : UInt<2>, dest : UInt<3>, s1Addr : UInt<4>, s2Addr : UInt<4>}[2], jmpOp : {branch : UInt<1>, target : UInt<30>, reloc : UInt<32>}, memOp : {load : UInt<1>, store : UInt<1>, hword : UInt<1>, byte : UInt<1>, zext : UInt<1>, typ : UInt<2>}, stackOp : UInt<3>, rsAddr : UInt<5>[4], rsData : UInt<32>[4], rdAddr : UInt<5>[2], immVal : UInt<32>[2], immOp : UInt<1>[2], wrRd : UInt<1>[2], callAddr : UInt<32>, call : UInt<1>, ret : UInt<1>, brcf : UInt<1>, trap : UInt<1>, xcall : UInt<1>, xret : UInt<1>, xsrc : UInt<5>, nonDelayed : UInt<1>, illOp : UInt<1>}, exmem : {rd : {addr : UInt<5>, data : UInt<32>, valid : UInt<1>}[2], mem : {load : UInt<1>, store : UInt<1>, hword : UInt<1>, byte : UInt<1>, zext : UInt<1>, typ : UInt<2>, addr : UInt<32>, data : UInt<32>, call : UInt<1>, ret : UInt<1>, brcf : UInt<1>, trap : UInt<1>, xcall : UInt<1>, xret : UInt<1>, xsrc : UInt<5>, illOp : UInt<1>, callRetAddr : UInt<32>, callRetBase : UInt<32>, nonDelayed : UInt<1>}, pc : UInt<30>, base : UInt<30>, relPc : UInt<30>}, exicache : {doCallRet : UInt<1>, callRetBase : UInt<32>, callRetAddr : UInt<32>}, flip feex : {pc : UInt<30>}, flip exResult : {addr : UInt<5>, data : UInt<32>, valid : UInt<1>}[2], flip memResult : {addr : UInt<5>, data : UInt<32>, valid : UInt<1>}[2], exfe : {doBranch : UInt<1>, branchPc : UInt<30>}, exsc : {op : UInt<3>, opData : UInt<32>, opOff : UInt<32>}, flip scex : {stackTop : UInt<32>, memTop : UInt<32>}}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg exReg : {pc : UInt<30>, base : UInt<30>, relPc : UInt<30>, pred : UInt<4>[2], aluOp : {func : UInt<4>, isMul : UInt<1>, isCmp : UInt<1>, isPred : UInt<1>, isBCpy : UInt<1>, isMTS : UInt<1>, isMFS : UInt<1>}[2], predOp : {func : UInt<2>, dest : UInt<3>, s1Addr : UInt<4>, s2Addr : UInt<4>}[2], jmpOp : {branch : UInt<1>, target : UInt<30>, reloc : UInt<32>}, memOp : {load : UInt<1>, store : UInt<1>, hword : UInt<1>, byte : UInt<1>, zext : UInt<1>, typ : UInt<2>}, stackOp : UInt<3>, rsAddr : UInt<5>[4], rsData : UInt<32>[4], rdAddr : UInt<5>[2], immVal : UInt<32>[2], immOp : UInt<1>[2], wrRd : UInt<1>[2], callAddr : UInt<32>, call : UInt<1>, ret : UInt<1>, brcf : UInt<1>, trap : UInt<1>, xcall : UInt<1>, xret : UInt<1>, xsrc : UInt<5>, nonDelayed : UInt<1>, illOp : UInt<1>}, clock @[Execute.scala 18:18]
    when io.ena : @[Execute.scala 19:16]
      exReg <- io.decex @[Execute.scala 20:11]
      node _T = or(io.flush, io.brflush) @[Execute.scala 21:19]
      when _T : @[Execute.scala 21:34]
        node _T_1 = cat(UInt<1>("h01"), UInt<3>("h00")) @[Constants.scala 100:33]
        node _T_2 = cat(UInt<1>("h01"), UInt<3>("h00")) @[Constants.scala 100:33]
        wire _WIRE : UInt<4>[2] @[compatibility.scala 127:12]
        _WIRE is invalid @[compatibility.scala 127:12]
        _WIRE[0] <= _T_1 @[compatibility.scala 127:12]
        _WIRE[1] <= _T_2 @[compatibility.scala 127:12]
        exReg.pred <- _WIRE @[connections.scala 134:10]
        exReg.illOp <= UInt<1>("h00") @[connections.scala 135:11]
        exReg.relPc <= io.decex.relPc @[Execute.scala 23:19]
        skip @[Execute.scala 21:34]
      skip @[Execute.scala 19:16]
    reg fwReg : UInt<3>[4], clock @[Execute.scala 81:19]
    reg fwSrcReg : UInt<1>[4], clock @[Execute.scala 82:22]
    reg memResultDataReg : UInt<32>[2], clock @[Execute.scala 83:29]
    reg exResultDataReg : UInt<32>[2], clock @[Execute.scala 84:29]
    wire op : UInt<32>[4] @[Execute.scala 85:16]
    op is invalid @[Execute.scala 85:16]
    fwReg[0] <= UInt<3>("h00") @[Execute.scala 89:14]
    fwSrcReg[0] <= UInt<1>("h00") @[Execute.scala 90:17]
    node _T_3 = eq(io.decex.rsAddr[0], io.memResult[0].addr) @[Execute.scala 92:31]
    node _T_4 = and(_T_3, io.memResult[0].valid) @[Execute.scala 92:56]
    when _T_4 : @[Execute.scala 92:82]
      fwReg[0] <= UInt<3>("h02") @[Execute.scala 93:18]
      fwSrcReg[0] <= UInt<1>("h00") @[Execute.scala 94:21]
      skip @[Execute.scala 92:82]
    node _T_5 = eq(io.decex.rsAddr[0], io.memResult[1].addr) @[Execute.scala 92:31]
    node _T_6 = and(_T_5, io.memResult[1].valid) @[Execute.scala 92:56]
    when _T_6 : @[Execute.scala 92:82]
      fwReg[0] <= UInt<3>("h02") @[Execute.scala 93:18]
      fwSrcReg[0] <= UInt<1>("h01") @[Execute.scala 94:21]
      skip @[Execute.scala 92:82]
    node _T_7 = eq(io.decex.rsAddr[0], io.exResult[0].addr) @[Execute.scala 98:31]
    node _T_8 = and(_T_7, io.exResult[0].valid) @[Execute.scala 98:55]
    when _T_8 : @[Execute.scala 98:80]
      fwReg[0] <= UInt<3>("h01") @[Execute.scala 99:18]
      fwSrcReg[0] <= UInt<1>("h00") @[Execute.scala 100:21]
      skip @[Execute.scala 98:80]
    node _T_9 = eq(io.decex.rsAddr[0], io.exResult[1].addr) @[Execute.scala 98:31]
    node _T_10 = and(_T_9, io.exResult[1].valid) @[Execute.scala 98:55]
    when _T_10 : @[Execute.scala 98:80]
      fwReg[0] <= UInt<3>("h01") @[Execute.scala 99:18]
      fwSrcReg[0] <= UInt<1>("h01") @[Execute.scala 100:21]
      skip @[Execute.scala 98:80]
    fwReg[1] <= UInt<3>("h00") @[Execute.scala 89:14]
    fwSrcReg[1] <= UInt<1>("h00") @[Execute.scala 90:17]
    node _T_11 = eq(io.decex.rsAddr[1], io.memResult[0].addr) @[Execute.scala 92:31]
    node _T_12 = and(_T_11, io.memResult[0].valid) @[Execute.scala 92:56]
    when _T_12 : @[Execute.scala 92:82]
      fwReg[1] <= UInt<3>("h02") @[Execute.scala 93:18]
      fwSrcReg[1] <= UInt<1>("h00") @[Execute.scala 94:21]
      skip @[Execute.scala 92:82]
    node _T_13 = eq(io.decex.rsAddr[1], io.memResult[1].addr) @[Execute.scala 92:31]
    node _T_14 = and(_T_13, io.memResult[1].valid) @[Execute.scala 92:56]
    when _T_14 : @[Execute.scala 92:82]
      fwReg[1] <= UInt<3>("h02") @[Execute.scala 93:18]
      fwSrcReg[1] <= UInt<1>("h01") @[Execute.scala 94:21]
      skip @[Execute.scala 92:82]
    node _T_15 = eq(io.decex.rsAddr[1], io.exResult[0].addr) @[Execute.scala 98:31]
    node _T_16 = and(_T_15, io.exResult[0].valid) @[Execute.scala 98:55]
    when _T_16 : @[Execute.scala 98:80]
      fwReg[1] <= UInt<3>("h01") @[Execute.scala 99:18]
      fwSrcReg[1] <= UInt<1>("h00") @[Execute.scala 100:21]
      skip @[Execute.scala 98:80]
    node _T_17 = eq(io.decex.rsAddr[1], io.exResult[1].addr) @[Execute.scala 98:31]
    node _T_18 = and(_T_17, io.exResult[1].valid) @[Execute.scala 98:55]
    when _T_18 : @[Execute.scala 98:80]
      fwReg[1] <= UInt<3>("h01") @[Execute.scala 99:18]
      fwSrcReg[1] <= UInt<1>("h01") @[Execute.scala 100:21]
      skip @[Execute.scala 98:80]
    fwReg[2] <= UInt<3>("h00") @[Execute.scala 89:14]
    fwSrcReg[2] <= UInt<1>("h00") @[Execute.scala 90:17]
    node _T_19 = eq(io.decex.rsAddr[2], io.memResult[0].addr) @[Execute.scala 92:31]
    node _T_20 = and(_T_19, io.memResult[0].valid) @[Execute.scala 92:56]
    when _T_20 : @[Execute.scala 92:82]
      fwReg[2] <= UInt<3>("h02") @[Execute.scala 93:18]
      fwSrcReg[2] <= UInt<1>("h00") @[Execute.scala 94:21]
      skip @[Execute.scala 92:82]
    node _T_21 = eq(io.decex.rsAddr[2], io.memResult[1].addr) @[Execute.scala 92:31]
    node _T_22 = and(_T_21, io.memResult[1].valid) @[Execute.scala 92:56]
    when _T_22 : @[Execute.scala 92:82]
      fwReg[2] <= UInt<3>("h02") @[Execute.scala 93:18]
      fwSrcReg[2] <= UInt<1>("h01") @[Execute.scala 94:21]
      skip @[Execute.scala 92:82]
    node _T_23 = eq(io.decex.rsAddr[2], io.exResult[0].addr) @[Execute.scala 98:31]
    node _T_24 = and(_T_23, io.exResult[0].valid) @[Execute.scala 98:55]
    when _T_24 : @[Execute.scala 98:80]
      fwReg[2] <= UInt<3>("h01") @[Execute.scala 99:18]
      fwSrcReg[2] <= UInt<1>("h00") @[Execute.scala 100:21]
      skip @[Execute.scala 98:80]
    node _T_25 = eq(io.decex.rsAddr[2], io.exResult[1].addr) @[Execute.scala 98:31]
    node _T_26 = and(_T_25, io.exResult[1].valid) @[Execute.scala 98:55]
    when _T_26 : @[Execute.scala 98:80]
      fwReg[2] <= UInt<3>("h01") @[Execute.scala 99:18]
      fwSrcReg[2] <= UInt<1>("h01") @[Execute.scala 100:21]
      skip @[Execute.scala 98:80]
    fwReg[3] <= UInt<3>("h00") @[Execute.scala 89:14]
    fwSrcReg[3] <= UInt<1>("h00") @[Execute.scala 90:17]
    node _T_27 = eq(io.decex.rsAddr[3], io.memResult[0].addr) @[Execute.scala 92:31]
    node _T_28 = and(_T_27, io.memResult[0].valid) @[Execute.scala 92:56]
    when _T_28 : @[Execute.scala 92:82]
      fwReg[3] <= UInt<3>("h02") @[Execute.scala 93:18]
      fwSrcReg[3] <= UInt<1>("h00") @[Execute.scala 94:21]
      skip @[Execute.scala 92:82]
    node _T_29 = eq(io.decex.rsAddr[3], io.memResult[1].addr) @[Execute.scala 92:31]
    node _T_30 = and(_T_29, io.memResult[1].valid) @[Execute.scala 92:56]
    when _T_30 : @[Execute.scala 92:82]
      fwReg[3] <= UInt<3>("h02") @[Execute.scala 93:18]
      fwSrcReg[3] <= UInt<1>("h01") @[Execute.scala 94:21]
      skip @[Execute.scala 92:82]
    node _T_31 = eq(io.decex.rsAddr[3], io.exResult[0].addr) @[Execute.scala 98:31]
    node _T_32 = and(_T_31, io.exResult[0].valid) @[Execute.scala 98:55]
    when _T_32 : @[Execute.scala 98:80]
      fwReg[3] <= UInt<3>("h01") @[Execute.scala 99:18]
      fwSrcReg[3] <= UInt<1>("h00") @[Execute.scala 100:21]
      skip @[Execute.scala 98:80]
    node _T_33 = eq(io.decex.rsAddr[3], io.exResult[1].addr) @[Execute.scala 98:31]
    node _T_34 = and(_T_33, io.exResult[1].valid) @[Execute.scala 98:55]
    when _T_34 : @[Execute.scala 98:80]
      fwReg[3] <= UInt<3>("h01") @[Execute.scala 99:18]
      fwSrcReg[3] <= UInt<1>("h01") @[Execute.scala 100:21]
      skip @[Execute.scala 98:80]
    when io.decex.immOp[0] : @[Execute.scala 105:29]
      fwReg[1] <= UInt<3>("h04") @[Execute.scala 106:20]
      skip @[Execute.scala 105:29]
    when io.decex.immOp[1] : @[Execute.scala 105:29]
      fwReg[3] <= UInt<3>("h04") @[Execute.scala 106:20]
      skip @[Execute.scala 105:29]
    node _T_35 = eq(io.ena, UInt<1>("h00")) @[Execute.scala 110:9]
    when _T_35 : @[Execute.scala 110:18]
      fwReg <- fwReg @[Execute.scala 111:11]
      fwSrcReg <- fwSrcReg @[Execute.scala 112:14]
      skip @[Execute.scala 110:18]
    when io.ena : @[Execute.scala 114:17]
      memResultDataReg[0] <= io.memResult[0].data @[Execute.scala 115:22]
      memResultDataReg[1] <= io.memResult[1].data @[Execute.scala 115:22]
      exResultDataReg[0] <= io.exResult[0].data @[Execute.scala 116:21]
      exResultDataReg[1] <= io.exResult[1].data @[Execute.scala 116:21]
      skip @[Execute.scala 114:17]
    node _T_36 = bits(fwReg[0], 0, 0) @[Execute.scala 121:30]
    node _T_37 = bits(fwReg[0], 1, 1) @[Execute.scala 122:34]
    node _T_38 = mux(_T_37, memResultDataReg[fwSrcReg[0]], exReg.rsData[0]) @[Execute.scala 122:23]
    node _T_39 = mux(_T_36, exResultDataReg[fwSrcReg[0]], _T_38) @[Execute.scala 121:19]
    op[0] <= _T_39 @[Execute.scala 121:13]
    node _T_40 = bits(fwReg[1], 0, 0) @[Execute.scala 125:34]
    node _T_41 = bits(fwReg[1], 1, 1) @[Execute.scala 126:38]
    node _T_42 = bits(fwReg[1], 2, 2) @[Execute.scala 127:42]
    node _T_43 = mux(_T_42, exReg.immVal[0], exReg.rsData[1]) @[Execute.scala 127:29]
    node _T_44 = mux(_T_41, memResultDataReg[fwSrcReg[1]], _T_43) @[Execute.scala 126:25]
    node _T_45 = mux(_T_40, exResultDataReg[fwSrcReg[1]], _T_44) @[Execute.scala 125:21]
    op[1] <= _T_45 @[Execute.scala 125:15]
    node _T_46 = bits(fwReg[2], 0, 0) @[Execute.scala 121:30]
    node _T_47 = bits(fwReg[2], 1, 1) @[Execute.scala 122:34]
    node _T_48 = mux(_T_47, memResultDataReg[fwSrcReg[2]], exReg.rsData[2]) @[Execute.scala 122:23]
    node _T_49 = mux(_T_46, exResultDataReg[fwSrcReg[2]], _T_48) @[Execute.scala 121:19]
    op[2] <= _T_49 @[Execute.scala 121:13]
    node _T_50 = bits(fwReg[3], 0, 0) @[Execute.scala 125:34]
    node _T_51 = bits(fwReg[3], 1, 1) @[Execute.scala 126:38]
    node _T_52 = bits(fwReg[3], 2, 2) @[Execute.scala 127:42]
    node _T_53 = mux(_T_52, exReg.immVal[1], exReg.rsData[3]) @[Execute.scala 127:29]
    node _T_54 = mux(_T_51, memResultDataReg[fwSrcReg[3]], _T_53) @[Execute.scala 126:25]
    node _T_55 = mux(_T_50, exResultDataReg[fwSrcReg[3]], _T_54) @[Execute.scala 125:21]
    op[3] <= _T_55 @[Execute.scala 125:15]
    reg predReg : UInt<1>[8], clock @[Execute.scala 132:20]
    wire doExecute : UInt<1>[2] @[Execute.scala 134:23]
    doExecute is invalid @[Execute.scala 134:23]
    node _T_56 = bits(exReg.pred[0], 2, 0) @[Execute.scala 137:46]
    node _T_57 = bits(exReg.pred[0], 3, 3) @[Execute.scala 137:79]
    node _T_58 = xor(predReg[_T_56], _T_57) @[Execute.scala 137:64]
    node _T_59 = mux(io.flush, UInt<1>("h00"), _T_58) @[Execute.scala 136:24]
    doExecute[0] <= _T_59 @[Execute.scala 136:18]
    node _T_60 = bits(exReg.pred[1], 2, 0) @[Execute.scala 137:46]
    node _T_61 = bits(exReg.pred[1], 3, 3) @[Execute.scala 137:79]
    node _T_62 = xor(predReg[_T_60], _T_61) @[Execute.scala 137:64]
    node _T_63 = mux(io.flush, UInt<1>("h00"), _T_62) @[Execute.scala 136:24]
    doExecute[1] <= _T_63 @[Execute.scala 136:18]
    reg retBaseReg : UInt<32>, clock @[Execute.scala 141:23]
    reg retOffReg : UInt<32>, clock @[Execute.scala 142:22]
    reg saveRetOff : UInt<1>, clock @[Execute.scala 143:23]
    reg saveND : UInt<1>, clock @[Execute.scala 144:19]
    reg excBaseReg : UInt<32>, clock @[Execute.scala 147:23]
    reg excOffReg : UInt<32>, clock @[Execute.scala 148:22]
    reg mulLoReg : UInt<32>, clock @[Execute.scala 153:21]
    reg mulHiReg : UInt<32>, clock @[Execute.scala 154:21]
    reg mulLLReg : UInt<32>, clock @[Execute.scala 157:24]
    reg mulLHReg : SInt<33>, clock @[Execute.scala 158:24]
    reg mulHLReg : SInt<33>, clock @[Execute.scala 159:24]
    reg mulHHReg : UInt<32>, clock @[Execute.scala 160:24]
    reg mulPipeReg : UInt<1>, clock @[Execute.scala 162:23]
    when io.ena : @[Execute.scala 165:16]
      node _T_64 = and(exReg.aluOp[0].isMul, doExecute[0]) @[Execute.scala 166:40]
      mulPipeReg <= _T_64 @[Execute.scala 166:16]
      node _T_65 = eq(exReg.aluOp[0].func, UInt<4>("h00")) @[Execute.scala 168:38]
      node _T_66 = bits(op[0], 31, 31) @[Execute.scala 170:37]
      node hi = mux(_T_65, _T_66, UInt<1>("h00")) @[Execute.scala 170:23]
      node lo = bits(op[0], 31, 16) @[Execute.scala 171:25]
      node _T_67 = cat(hi, lo) @[Cat.scala 30:58]
      node _T_68 = asSInt(_T_67) @[Execute.scala 171:55]
      node _T_69 = bits(op[0], 15, 0) @[Execute.scala 172:21]
      node _T_70 = bits(op[1], 31, 31) @[Execute.scala 173:37]
      node hi_1 = mux(_T_65, _T_70, UInt<1>("h00")) @[Execute.scala 173:23]
      node lo_1 = bits(op[1], 31, 16) @[Execute.scala 174:25]
      node _T_71 = cat(hi_1, lo_1) @[Cat.scala 30:58]
      node _T_72 = asSInt(_T_71) @[Execute.scala 174:55]
      node _T_73 = bits(op[1], 15, 0) @[Execute.scala 175:21]
      node _T_74 = mul(_T_69, _T_73) @[Execute.scala 177:22]
      mulLLReg <= _T_74 @[Execute.scala 177:14]
      node _T_75 = cvt(_T_69) @[Execute.scala 178:22]
      node _T_76 = mul(_T_72, _T_75) @[Execute.scala 178:22]
      node _T_77 = tail(_T_76, 1) @[Execute.scala 178:22]
      node _T_78 = asSInt(_T_77) @[Execute.scala 178:22]
      mulLHReg <= _T_78 @[Execute.scala 178:14]
      node _T_79 = cvt(_T_73) @[Execute.scala 179:22]
      node _T_80 = mul(_T_68, _T_79) @[Execute.scala 179:22]
      node _T_81 = tail(_T_80, 1) @[Execute.scala 179:22]
      node _T_82 = asSInt(_T_81) @[Execute.scala 179:22]
      mulHLReg <= _T_82 @[Execute.scala 179:14]
      node _T_83 = mul(_T_68, _T_72) @[Execute.scala 180:23]
      node _T_84 = asUInt(_T_83) @[Execute.scala 180:31]
      mulHHReg <= _T_84 @[Execute.scala 180:14]
      node _T_85 = cat(mulHHReg, mulLLReg) @[Cat.scala 30:58]
      node _T_86 = asSInt(_T_85) @[Execute.scala 182:46]
      node lo_2 = asUInt(asSInt(UInt<16>("h00"))) @[Cat.scala 30:58]
      node hi_2 = asUInt(mulHLReg) @[Cat.scala 30:58]
      node _T_87 = cat(hi_2, lo_2) @[Cat.scala 30:58]
      node _T_88 = asSInt(_T_87) @[Execute.scala 183:69]
      node _T_89 = add(_T_86, _T_88) @[Execute.scala 183:22]
      node _T_90 = tail(_T_89, 1) @[Execute.scala 183:22]
      node _T_91 = asSInt(_T_90) @[Execute.scala 183:22]
      node lo_3 = asUInt(asSInt(UInt<16>("h00"))) @[Cat.scala 30:58]
      node hi_3 = asUInt(mulLHReg) @[Cat.scala 30:58]
      node _T_92 = cat(hi_3, lo_3) @[Cat.scala 30:58]
      node _T_93 = asSInt(_T_92) @[Execute.scala 184:69]
      node _T_94 = add(_T_91, _T_93) @[Execute.scala 184:22]
      node _T_95 = tail(_T_94, 1) @[Execute.scala 184:22]
      node _T_96 = asSInt(_T_95) @[Execute.scala 184:22]
      when mulPipeReg : @[Execute.scala 186:22]
        node _T_97 = bits(_T_96, 63, 32) @[Execute.scala 187:28]
        mulHiReg <= _T_97 @[Execute.scala 187:16]
        node _T_98 = bits(_T_96, 31, 0) @[Execute.scala 188:28]
        mulLoReg <= _T_98 @[Execute.scala 188:16]
        skip @[Execute.scala 186:22]
      skip @[Execute.scala 165:16]
    io.exsc.op <= UInt<3>("h00") @[Execute.scala 193:14]
    io.exsc.opData <= UInt<1>("h00") @[Execute.scala 194:18]
    node _T_99 = mux(exReg.immOp[0], exReg.immVal[0], op[0]) @[Execute.scala 195:23]
    io.exsc.opOff <= _T_99 @[Execute.scala 195:17]
    node _T_100 = eq(io.brflush, UInt<1>("h00")) @[Execute.scala 198:8]
    node _T_101 = and(_T_100, doExecute[0]) @[Execute.scala 198:20]
    when _T_101 : @[Execute.scala 198:37]
      io.exsc.op <= exReg.stackOp @[Execute.scala 199:16]
      skip @[Execute.scala 198:37]
    wire _WIRE_1 : UInt<32> @[Execute.scala 28:22]
    _WIRE_1 is invalid @[Execute.scala 28:22]
    node _T_102 = eq(exReg.aluOp[0].func, UInt<4>("h0d")) @[Execute.scala 29:37]
    node _T_103 = eq(exReg.aluOp[0].func, UInt<4>("h0c")) @[Execute.scala 30:41]
    node _T_104 = mux(_T_103, UInt<1>("h01"), UInt<1>("h00")) @[Execute.scala 30:35]
    node _T_105 = mux(_T_102, UInt<2>("h02"), _T_104) @[Execute.scala 29:31]
    node _T_106 = dshl(op[0], _T_105) @[Execute.scala 29:25]
    node _T_107 = add(_T_106, op[1]) @[Execute.scala 32:25]
    node _T_108 = tail(_T_107, 1) @[Execute.scala 32:25]
    _WIRE_1 <= _T_108 @[Execute.scala 33:12]
    node _T_109 = bits(op[1], 4, 0) @[Execute.scala 34:20]
    node _T_110 = eq(exReg.aluOp[0].func, UInt<4>("h05")) @[Execute.scala 35:25]
    node _T_111 = bits(op[0], 31, 31) @[Execute.scala 35:42]
    node _T_112 = mux(_T_110, _T_111, UInt<1>("h00")) @[Execute.scala 35:19]
    node _T_113 = cat(_T_112, op[0]) @[Execute.scala 35:67]
    node _T_114 = eq(UInt<4>("h00"), exReg.aluOp[0].func) @[Conditional.scala 37:30]
    when _T_114 : @[Conditional.scala 40:58]
      _WIRE_1 <= _T_108 @[Execute.scala 39:32]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_115 = eq(UInt<4>("h01"), exReg.aluOp[0].func) @[Conditional.scala 37:30]
      when _T_115 : @[Conditional.scala 39:67]
        node _T_116 = sub(op[0], op[1]) @[Execute.scala 40:39]
        node _T_117 = tail(_T_116, 1) @[Execute.scala 40:39]
        _WIRE_1 <= _T_117 @[Execute.scala 40:32]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_118 = eq(UInt<4>("h02"), exReg.aluOp[0].func) @[Conditional.scala 37:30]
        when _T_118 : @[Conditional.scala 39:67]
          node _T_119 = xor(op[0], op[1]) @[Execute.scala 41:40]
          _WIRE_1 <= _T_119 @[Execute.scala 41:32]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_120 = eq(UInt<4>("h03"), exReg.aluOp[0].func) @[Conditional.scala 37:30]
          when _T_120 : @[Conditional.scala 39:67]
            node _T_121 = dshl(op[0], _T_109) @[Execute.scala 42:40]
            node _T_122 = bits(_T_121, 31, 0) @[Execute.scala 42:49]
            _WIRE_1 <= _T_122 @[Execute.scala 42:32]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_123 = eq(UInt<4>("h04"), exReg.aluOp[0].func) @[Conditional.scala 37:30]
            node _T_124 = eq(UInt<4>("h05"), exReg.aluOp[0].func) @[Conditional.scala 37:30]
            node _T_125 = or(_T_123, _T_124) @[Conditional.scala 37:55]
            when _T_125 : @[Conditional.scala 39:67]
              node _T_126 = asSInt(_T_113) @[Execute.scala 43:47]
              node _T_127 = dshr(_T_126, _T_109) @[Execute.scala 43:54]
              node _T_128 = asUInt(_T_127) @[Execute.scala 43:64]
              _WIRE_1 <= _T_128 @[Execute.scala 43:38]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_129 = eq(UInt<4>("h06"), exReg.aluOp[0].func) @[Conditional.scala 37:30]
              when _T_129 : @[Conditional.scala 39:67]
                node _T_130 = or(op[0], op[1]) @[Execute.scala 44:40]
                _WIRE_1 <= _T_130 @[Execute.scala 44:32]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_131 = eq(UInt<4>("h07"), exReg.aluOp[0].func) @[Conditional.scala 37:30]
                when _T_131 : @[Conditional.scala 39:67]
                  node _T_132 = and(op[0], op[1]) @[Execute.scala 45:40]
                  _WIRE_1 <= _T_132 @[Execute.scala 45:32]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_133 = eq(UInt<4>("h0b"), exReg.aluOp[0].func) @[Conditional.scala 37:30]
                  when _T_133 : @[Conditional.scala 39:67]
                    node _T_134 = or(op[0], op[1]) @[Execute.scala 46:42]
                    node _T_135 = not(_T_134) @[Execute.scala 46:36]
                    _WIRE_1 <= _T_135 @[Execute.scala 46:32]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_136 = eq(UInt<4>("h0c"), exReg.aluOp[0].func) @[Conditional.scala 37:30]
                    when _T_136 : @[Conditional.scala 39:67]
                      _WIRE_1 <= _T_108 @[Execute.scala 47:32]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_137 = eq(UInt<4>("h0d"), exReg.aluOp[0].func) @[Conditional.scala 37:30]
                      when _T_137 : @[Conditional.scala 39:67]
                        _WIRE_1 <= _T_108 @[Execute.scala 48:32]
                        skip @[Conditional.scala 39:67]
    node _T_138 = asSInt(op[0]) @[Execute.scala 54:20]
    node _T_139 = asSInt(op[1]) @[Execute.scala 55:20]
    node _T_140 = bits(op[1], 4, 0) @[Execute.scala 56:32]
    node _T_141 = dshl(UInt<1>("h01"), _T_140) @[Execute.scala 56:26]
    node _T_142 = eq(op[0], op[1]) @[Execute.scala 59:18]
    node _T_143 = lt(_T_138, _T_139) @[Execute.scala 60:19]
    node _T_144 = lt(op[0], op[1]) @[Execute.scala 61:19]
    node _T_145 = eq(_T_142, UInt<1>("h00")) @[Execute.scala 64:21]
    node _T_146 = or(_T_143, _T_142) @[Execute.scala 66:24]
    node _T_147 = or(_T_144, _T_142) @[Execute.scala 68:25]
    node _T_148 = and(op[0], _T_141) @[Execute.scala 69:26]
    node _T_149 = neq(_T_148, UInt<1>("h00")) @[Execute.scala 69:36]
    node _T_150 = eq(UInt<4>("h00"), exReg.aluOp[0].func) @[Mux.scala 80:60]
    node _T_151 = mux(_T_150, _T_142, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_152 = eq(UInt<4>("h01"), exReg.aluOp[0].func) @[Mux.scala 80:60]
    node _T_153 = mux(_T_152, _T_145, _T_151) @[Mux.scala 80:57]
    node _T_154 = eq(UInt<4>("h02"), exReg.aluOp[0].func) @[Mux.scala 80:60]
    node _T_155 = mux(_T_154, _T_143, _T_153) @[Mux.scala 80:57]
    node _T_156 = eq(UInt<4>("h03"), exReg.aluOp[0].func) @[Mux.scala 80:60]
    node _T_157 = mux(_T_156, _T_146, _T_155) @[Mux.scala 80:57]
    node _T_158 = eq(UInt<4>("h04"), exReg.aluOp[0].func) @[Mux.scala 80:60]
    node _T_159 = mux(_T_158, _T_144, _T_157) @[Mux.scala 80:57]
    node _T_160 = eq(UInt<4>("h05"), exReg.aluOp[0].func) @[Mux.scala 80:60]
    node _T_161 = mux(_T_160, _T_147, _T_159) @[Mux.scala 80:57]
    node _T_162 = eq(UInt<4>("h06"), exReg.aluOp[0].func) @[Mux.scala 80:60]
    node _T_163 = mux(_T_162, _T_149, _T_161) @[Mux.scala 80:57]
    node _T_164 = bits(exReg.aluOp[0].func, 2, 0) @[Execute.scala 208:45]
    node _T_165 = bits(exReg.aluOp[0].func, 3, 3) @[Execute.scala 208:84]
    node _T_166 = xor(predReg[_T_164], _T_165) @[Execute.scala 208:63]
    node _T_167 = cat(UInt<31>("h00"), _T_166) @[Execute.scala 209:45]
    node _T_168 = bits(op[1], 4, 0) @[Execute.scala 209:68]
    node _T_169 = dshl(_T_167, _T_168) @[Execute.scala 209:56]
    node _T_170 = bits(_T_169, 31, 0) @[Execute.scala 209:75]
    node _T_171 = bits(op[1], 4, 0) @[Execute.scala 210:72]
    node _T_172 = dshl(UInt<32>("h01"), _T_171) @[Execute.scala 210:60]
    node _T_173 = bits(_T_172, 31, 0) @[Execute.scala 210:79]
    node _T_174 = not(_T_173) @[Execute.scala 210:30]
    node _T_175 = and(op[0], _T_174) @[Execute.scala 210:28]
    node _T_176 = or(_T_175, _T_170) @[Execute.scala 211:31]
    node _T_177 = bits(exReg.predOp[0].s1Addr, 2, 0) @[Execute.scala 214:45]
    node _T_178 = bits(exReg.predOp[0].s1Addr, 3, 3) @[Execute.scala 214:86]
    node _T_179 = xor(predReg[_T_177], _T_178) @[Execute.scala 214:62]
    node _T_180 = bits(exReg.predOp[0].s2Addr, 2, 0) @[Execute.scala 215:45]
    node _T_181 = bits(exReg.predOp[0].s2Addr, 3, 3) @[Execute.scala 215:86]
    node _T_182 = xor(predReg[_T_180], _T_181) @[Execute.scala 215:62]
    node _T_183 = or(_T_179, _T_182) @[Execute.scala 74:22]
    node _T_184 = and(_T_179, _T_182) @[Execute.scala 75:23]
    node _T_185 = xor(_T_179, _T_182) @[Execute.scala 76:23]
    node _T_186 = or(_T_179, _T_182) @[Execute.scala 77:25]
    node _T_187 = not(_T_186) @[Execute.scala 77:19]
    node _T_188 = eq(UInt<2>("h01"), exReg.predOp[0].func) @[Mux.scala 80:60]
    node _T_189 = mux(_T_188, _T_184, _T_183) @[Mux.scala 80:57]
    node _T_190 = eq(UInt<2>("h02"), exReg.predOp[0].func) @[Mux.scala 80:60]
    node _T_191 = mux(_T_190, _T_185, _T_189) @[Mux.scala 80:57]
    node _T_192 = eq(UInt<2>("h03"), exReg.predOp[0].func) @[Mux.scala 80:60]
    node _T_193 = mux(_T_192, _T_187, _T_191) @[Mux.scala 80:57]
    node _T_194 = or(exReg.aluOp[0].isCmp, exReg.aluOp[0].isPred) @[Execute.scala 218:32]
    node _T_195 = and(_T_194, doExecute[0]) @[Execute.scala 218:58]
    when _T_195 : @[Execute.scala 218:75]
      node _T_196 = mux(exReg.aluOp[0].isCmp, _T_163, _T_193) @[Execute.scala 219:43]
      predReg[exReg.predOp[0].dest] <= _T_196 @[Execute.scala 219:37]
      skip @[Execute.scala 218:75]
    predReg[0] <= UInt<1>("h01") @[Execute.scala 221:16]
    node _T_197 = and(exReg.aluOp[0].isMTS, doExecute[0]) @[Execute.scala 224:31]
    when _T_197 : @[Execute.scala 224:48]
      io.exsc.opData <= op[0] @[Execute.scala 225:22]
      node _T_198 = eq(UInt<4>("h00"), exReg.aluOp[0].func) @[Conditional.scala 37:30]
      when _T_198 : @[Conditional.scala 40:58]
        node _T_199 = bits(op[0], 0, 0) @[Execute.scala 230:34]
        predReg[0] <= _T_199 @[Execute.scala 230:24]
        node _T_200 = bits(op[0], 1, 1) @[Execute.scala 230:34]
        predReg[1] <= _T_200 @[Execute.scala 230:24]
        node _T_201 = bits(op[0], 2, 2) @[Execute.scala 230:34]
        predReg[2] <= _T_201 @[Execute.scala 230:24]
        node _T_202 = bits(op[0], 3, 3) @[Execute.scala 230:34]
        predReg[3] <= _T_202 @[Execute.scala 230:24]
        node _T_203 = bits(op[0], 4, 4) @[Execute.scala 230:34]
        predReg[4] <= _T_203 @[Execute.scala 230:24]
        node _T_204 = bits(op[0], 5, 5) @[Execute.scala 230:34]
        predReg[5] <= _T_204 @[Execute.scala 230:24]
        node _T_205 = bits(op[0], 6, 6) @[Execute.scala 230:34]
        predReg[6] <= _T_205 @[Execute.scala 230:24]
        node _T_206 = bits(op[0], 7, 7) @[Execute.scala 230:34]
        predReg[7] <= _T_206 @[Execute.scala 230:24]
        predReg[0] <= UInt<1>("h01") @[Execute.scala 233:22]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_207 = eq(UInt<4>("h02"), exReg.aluOp[0].func) @[Conditional.scala 37:30]
        when _T_207 : @[Conditional.scala 39:67]
          mulLoReg <= op[0] @[Execute.scala 236:20]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_208 = eq(UInt<4>("h03"), exReg.aluOp[0].func) @[Conditional.scala 37:30]
          when _T_208 : @[Conditional.scala 39:67]
            mulHiReg <= op[0] @[Execute.scala 239:20]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_209 = eq(UInt<4>("h06"), exReg.aluOp[0].func) @[Conditional.scala 37:30]
            when _T_209 : @[Conditional.scala 39:67]
              io.exsc.op <= UInt<3>("h01") @[Execute.scala 242:22]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_210 = eq(UInt<4>("h05"), exReg.aluOp[0].func) @[Conditional.scala 37:30]
              when _T_210 : @[Conditional.scala 39:67]
                io.exsc.op <= UInt<3>("h02") @[Execute.scala 245:22]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_211 = eq(UInt<4>("h07"), exReg.aluOp[0].func) @[Conditional.scala 37:30]
                when _T_211 : @[Conditional.scala 39:67]
                  retBaseReg <= op[0] @[Execute.scala 248:22]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_212 = eq(UInt<4>("h08"), exReg.aluOp[0].func) @[Conditional.scala 37:30]
                  when _T_212 : @[Conditional.scala 39:67]
                    retOffReg <= op[0] @[Execute.scala 251:21]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_213 = eq(UInt<4>("h09"), exReg.aluOp[0].func) @[Conditional.scala 37:30]
                    when _T_213 : @[Conditional.scala 39:67]
                      excBaseReg <= op[0] @[Execute.scala 254:22]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_214 = eq(UInt<4>("h0a"), exReg.aluOp[0].func) @[Conditional.scala 37:30]
                      when _T_214 : @[Conditional.scala 39:67]
                        excOffReg <= op[0] @[Execute.scala 257:21]
                        skip @[Conditional.scala 39:67]
      skip @[Execute.scala 224:48]
    wire _WIRE_2 : UInt @[Execute.scala 261:25]
    _WIRE_2 is invalid @[Execute.scala 261:25]
    _WIRE_2 <= UInt<32>("h00") @[Execute.scala 262:15]
    node _T_215 = eq(UInt<4>("h00"), exReg.aluOp[0].func) @[Conditional.scala 37:30]
    when _T_215 : @[Conditional.scala 40:58]
      node lo_lo = cat(predReg[1], predReg[0]) @[Execute.scala 265:72]
      node lo_hi = cat(predReg[3], predReg[2]) @[Execute.scala 265:72]
      node lo_4 = cat(lo_hi, lo_lo) @[Execute.scala 265:72]
      node hi_lo = cat(predReg[5], predReg[4]) @[Execute.scala 265:72]
      node hi_hi = cat(predReg[7], predReg[6]) @[Execute.scala 265:72]
      node hi_4 = cat(hi_hi, hi_lo) @[Execute.scala 265:72]
      node lo_5 = cat(hi_4, lo_4) @[Execute.scala 265:72]
      node _T_216 = cat(UInt<24>("h00"), lo_5) @[Cat.scala 30:58]
      _WIRE_2 <= _T_216 @[Execute.scala 265:19]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_217 = eq(UInt<4>("h02"), exReg.aluOp[0].func) @[Conditional.scala 37:30]
      when _T_217 : @[Conditional.scala 39:67]
        _WIRE_2 <= mulLoReg @[Execute.scala 268:19]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_218 = eq(UInt<4>("h03"), exReg.aluOp[0].func) @[Conditional.scala 37:30]
        when _T_218 : @[Conditional.scala 39:67]
          _WIRE_2 <= mulHiReg @[Execute.scala 271:19]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_219 = eq(UInt<4>("h06"), exReg.aluOp[0].func) @[Conditional.scala 37:30]
          when _T_219 : @[Conditional.scala 39:67]
            _WIRE_2 <= io.scex.stackTop @[Execute.scala 274:19]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_220 = eq(UInt<4>("h05"), exReg.aluOp[0].func) @[Conditional.scala 37:30]
            when _T_220 : @[Conditional.scala 39:67]
              _WIRE_2 <= io.scex.memTop @[Execute.scala 277:19]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_221 = eq(UInt<4>("h07"), exReg.aluOp[0].func) @[Conditional.scala 37:30]
              when _T_221 : @[Conditional.scala 39:67]
                _WIRE_2 <= retBaseReg @[Execute.scala 280:19]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_222 = eq(UInt<4>("h08"), exReg.aluOp[0].func) @[Conditional.scala 37:30]
                when _T_222 : @[Conditional.scala 39:67]
                  _WIRE_2 <= retOffReg @[Execute.scala 283:19]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_223 = eq(UInt<4>("h09"), exReg.aluOp[0].func) @[Conditional.scala 37:30]
                  when _T_223 : @[Conditional.scala 39:67]
                    _WIRE_2 <= excBaseReg @[Execute.scala 286:19]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_224 = eq(UInt<4>("h0a"), exReg.aluOp[0].func) @[Conditional.scala 37:30]
                    when _T_224 : @[Conditional.scala 39:67]
                      _WIRE_2 <= excOffReg @[Execute.scala 289:19]
                      skip @[Conditional.scala 39:67]
    io.exmem.rd[0].addr <= exReg.rdAddr[0] @[Execute.scala 294:25]
    node _T_225 = and(exReg.wrRd[0], doExecute[0]) @[Execute.scala 295:43]
    io.exmem.rd[0].valid <= _T_225 @[Execute.scala 295:26]
    node _T_226 = mux(exReg.aluOp[0].isBCpy, _T_176, _WIRE_1) @[Execute.scala 297:35]
    node _T_227 = mux(exReg.aluOp[0].isMFS, _WIRE_2, _T_226) @[Execute.scala 296:31]
    io.exmem.rd[0].data <= _T_227 @[Execute.scala 296:25]
    wire _WIRE_3 : UInt<32> @[Execute.scala 28:22]
    _WIRE_3 is invalid @[Execute.scala 28:22]
    node _T_228 = eq(exReg.aluOp[1].func, UInt<4>("h0d")) @[Execute.scala 29:37]
    node _T_229 = eq(exReg.aluOp[1].func, UInt<4>("h0c")) @[Execute.scala 30:41]
    node _T_230 = mux(_T_229, UInt<1>("h01"), UInt<1>("h00")) @[Execute.scala 30:35]
    node _T_231 = mux(_T_228, UInt<2>("h02"), _T_230) @[Execute.scala 29:31]
    node _T_232 = dshl(op[2], _T_231) @[Execute.scala 29:25]
    node _T_233 = add(_T_232, op[3]) @[Execute.scala 32:25]
    node _T_234 = tail(_T_233, 1) @[Execute.scala 32:25]
    _WIRE_3 <= _T_234 @[Execute.scala 33:12]
    node _T_235 = bits(op[3], 4, 0) @[Execute.scala 34:20]
    node _T_236 = eq(exReg.aluOp[1].func, UInt<4>("h05")) @[Execute.scala 35:25]
    node _T_237 = bits(op[2], 31, 31) @[Execute.scala 35:42]
    node _T_238 = mux(_T_236, _T_237, UInt<1>("h00")) @[Execute.scala 35:19]
    node _T_239 = cat(_T_238, op[2]) @[Execute.scala 35:67]
    node _T_240 = eq(UInt<4>("h00"), exReg.aluOp[1].func) @[Conditional.scala 37:30]
    when _T_240 : @[Conditional.scala 40:58]
      _WIRE_3 <= _T_234 @[Execute.scala 39:32]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_241 = eq(UInt<4>("h01"), exReg.aluOp[1].func) @[Conditional.scala 37:30]
      when _T_241 : @[Conditional.scala 39:67]
        node _T_242 = sub(op[2], op[3]) @[Execute.scala 40:39]
        node _T_243 = tail(_T_242, 1) @[Execute.scala 40:39]
        _WIRE_3 <= _T_243 @[Execute.scala 40:32]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_244 = eq(UInt<4>("h02"), exReg.aluOp[1].func) @[Conditional.scala 37:30]
        when _T_244 : @[Conditional.scala 39:67]
          node _T_245 = xor(op[2], op[3]) @[Execute.scala 41:40]
          _WIRE_3 <= _T_245 @[Execute.scala 41:32]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_246 = eq(UInt<4>("h03"), exReg.aluOp[1].func) @[Conditional.scala 37:30]
          when _T_246 : @[Conditional.scala 39:67]
            node _T_247 = dshl(op[2], _T_235) @[Execute.scala 42:40]
            node _T_248 = bits(_T_247, 31, 0) @[Execute.scala 42:49]
            _WIRE_3 <= _T_248 @[Execute.scala 42:32]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_249 = eq(UInt<4>("h04"), exReg.aluOp[1].func) @[Conditional.scala 37:30]
            node _T_250 = eq(UInt<4>("h05"), exReg.aluOp[1].func) @[Conditional.scala 37:30]
            node _T_251 = or(_T_249, _T_250) @[Conditional.scala 37:55]
            when _T_251 : @[Conditional.scala 39:67]
              node _T_252 = asSInt(_T_239) @[Execute.scala 43:47]
              node _T_253 = dshr(_T_252, _T_235) @[Execute.scala 43:54]
              node _T_254 = asUInt(_T_253) @[Execute.scala 43:64]
              _WIRE_3 <= _T_254 @[Execute.scala 43:38]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_255 = eq(UInt<4>("h06"), exReg.aluOp[1].func) @[Conditional.scala 37:30]
              when _T_255 : @[Conditional.scala 39:67]
                node _T_256 = or(op[2], op[3]) @[Execute.scala 44:40]
                _WIRE_3 <= _T_256 @[Execute.scala 44:32]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_257 = eq(UInt<4>("h07"), exReg.aluOp[1].func) @[Conditional.scala 37:30]
                when _T_257 : @[Conditional.scala 39:67]
                  node _T_258 = and(op[2], op[3]) @[Execute.scala 45:40]
                  _WIRE_3 <= _T_258 @[Execute.scala 45:32]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_259 = eq(UInt<4>("h0b"), exReg.aluOp[1].func) @[Conditional.scala 37:30]
                  when _T_259 : @[Conditional.scala 39:67]
                    node _T_260 = or(op[2], op[3]) @[Execute.scala 46:42]
                    node _T_261 = not(_T_260) @[Execute.scala 46:36]
                    _WIRE_3 <= _T_261 @[Execute.scala 46:32]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_262 = eq(UInt<4>("h0c"), exReg.aluOp[1].func) @[Conditional.scala 37:30]
                    when _T_262 : @[Conditional.scala 39:67]
                      _WIRE_3 <= _T_234 @[Execute.scala 47:32]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_263 = eq(UInt<4>("h0d"), exReg.aluOp[1].func) @[Conditional.scala 37:30]
                      when _T_263 : @[Conditional.scala 39:67]
                        _WIRE_3 <= _T_234 @[Execute.scala 48:32]
                        skip @[Conditional.scala 39:67]
    node _T_264 = asSInt(op[2]) @[Execute.scala 54:20]
    node _T_265 = asSInt(op[3]) @[Execute.scala 55:20]
    node _T_266 = bits(op[3], 4, 0) @[Execute.scala 56:32]
    node _T_267 = dshl(UInt<1>("h01"), _T_266) @[Execute.scala 56:26]
    node _T_268 = eq(op[2], op[3]) @[Execute.scala 59:18]
    node _T_269 = lt(_T_264, _T_265) @[Execute.scala 60:19]
    node _T_270 = lt(op[2], op[3]) @[Execute.scala 61:19]
    node _T_271 = eq(_T_268, UInt<1>("h00")) @[Execute.scala 64:21]
    node _T_272 = or(_T_269, _T_268) @[Execute.scala 66:24]
    node _T_273 = or(_T_270, _T_268) @[Execute.scala 68:25]
    node _T_274 = and(op[2], _T_267) @[Execute.scala 69:26]
    node _T_275 = neq(_T_274, UInt<1>("h00")) @[Execute.scala 69:36]
    node _T_276 = eq(UInt<4>("h00"), exReg.aluOp[1].func) @[Mux.scala 80:60]
    node _T_277 = mux(_T_276, _T_268, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_278 = eq(UInt<4>("h01"), exReg.aluOp[1].func) @[Mux.scala 80:60]
    node _T_279 = mux(_T_278, _T_271, _T_277) @[Mux.scala 80:57]
    node _T_280 = eq(UInt<4>("h02"), exReg.aluOp[1].func) @[Mux.scala 80:60]
    node _T_281 = mux(_T_280, _T_269, _T_279) @[Mux.scala 80:57]
    node _T_282 = eq(UInt<4>("h03"), exReg.aluOp[1].func) @[Mux.scala 80:60]
    node _T_283 = mux(_T_282, _T_272, _T_281) @[Mux.scala 80:57]
    node _T_284 = eq(UInt<4>("h04"), exReg.aluOp[1].func) @[Mux.scala 80:60]
    node _T_285 = mux(_T_284, _T_270, _T_283) @[Mux.scala 80:57]
    node _T_286 = eq(UInt<4>("h05"), exReg.aluOp[1].func) @[Mux.scala 80:60]
    node _T_287 = mux(_T_286, _T_273, _T_285) @[Mux.scala 80:57]
    node _T_288 = eq(UInt<4>("h06"), exReg.aluOp[1].func) @[Mux.scala 80:60]
    node _T_289 = mux(_T_288, _T_275, _T_287) @[Mux.scala 80:57]
    node _T_290 = bits(exReg.aluOp[1].func, 2, 0) @[Execute.scala 208:45]
    node _T_291 = bits(exReg.aluOp[1].func, 3, 3) @[Execute.scala 208:84]
    node _T_292 = xor(predReg[_T_290], _T_291) @[Execute.scala 208:63]
    node _T_293 = cat(UInt<31>("h00"), _T_292) @[Execute.scala 209:45]
    node _T_294 = bits(op[3], 4, 0) @[Execute.scala 209:68]
    node _T_295 = dshl(_T_293, _T_294) @[Execute.scala 209:56]
    node _T_296 = bits(_T_295, 31, 0) @[Execute.scala 209:75]
    node _T_297 = bits(op[3], 4, 0) @[Execute.scala 210:72]
    node _T_298 = dshl(UInt<32>("h01"), _T_297) @[Execute.scala 210:60]
    node _T_299 = bits(_T_298, 31, 0) @[Execute.scala 210:79]
    node _T_300 = not(_T_299) @[Execute.scala 210:30]
    node _T_301 = and(op[2], _T_300) @[Execute.scala 210:28]
    node _T_302 = or(_T_301, _T_296) @[Execute.scala 211:31]
    node _T_303 = bits(exReg.predOp[1].s1Addr, 2, 0) @[Execute.scala 214:45]
    node _T_304 = bits(exReg.predOp[1].s1Addr, 3, 3) @[Execute.scala 214:86]
    node _T_305 = xor(predReg[_T_303], _T_304) @[Execute.scala 214:62]
    node _T_306 = bits(exReg.predOp[1].s2Addr, 2, 0) @[Execute.scala 215:45]
    node _T_307 = bits(exReg.predOp[1].s2Addr, 3, 3) @[Execute.scala 215:86]
    node _T_308 = xor(predReg[_T_306], _T_307) @[Execute.scala 215:62]
    node _T_309 = or(_T_305, _T_308) @[Execute.scala 74:22]
    node _T_310 = and(_T_305, _T_308) @[Execute.scala 75:23]
    node _T_311 = xor(_T_305, _T_308) @[Execute.scala 76:23]
    node _T_312 = or(_T_305, _T_308) @[Execute.scala 77:25]
    node _T_313 = not(_T_312) @[Execute.scala 77:19]
    node _T_314 = eq(UInt<2>("h01"), exReg.predOp[1].func) @[Mux.scala 80:60]
    node _T_315 = mux(_T_314, _T_310, _T_309) @[Mux.scala 80:57]
    node _T_316 = eq(UInt<2>("h02"), exReg.predOp[1].func) @[Mux.scala 80:60]
    node _T_317 = mux(_T_316, _T_311, _T_315) @[Mux.scala 80:57]
    node _T_318 = eq(UInt<2>("h03"), exReg.predOp[1].func) @[Mux.scala 80:60]
    node _T_319 = mux(_T_318, _T_313, _T_317) @[Mux.scala 80:57]
    node _T_320 = or(exReg.aluOp[1].isCmp, exReg.aluOp[1].isPred) @[Execute.scala 218:32]
    node _T_321 = and(_T_320, doExecute[1]) @[Execute.scala 218:58]
    when _T_321 : @[Execute.scala 218:75]
      node _T_322 = mux(exReg.aluOp[1].isCmp, _T_289, _T_319) @[Execute.scala 219:43]
      predReg[exReg.predOp[1].dest] <= _T_322 @[Execute.scala 219:37]
      skip @[Execute.scala 218:75]
    predReg[0] <= UInt<1>("h01") @[Execute.scala 221:16]
    node _T_323 = and(exReg.aluOp[1].isMTS, doExecute[1]) @[Execute.scala 224:31]
    when _T_323 : @[Execute.scala 224:48]
      io.exsc.opData <= op[2] @[Execute.scala 225:22]
      node _T_324 = eq(UInt<4>("h00"), exReg.aluOp[1].func) @[Conditional.scala 37:30]
      when _T_324 : @[Conditional.scala 40:58]
        node _T_325 = bits(op[2], 0, 0) @[Execute.scala 230:34]
        predReg[0] <= _T_325 @[Execute.scala 230:24]
        node _T_326 = bits(op[2], 1, 1) @[Execute.scala 230:34]
        predReg[1] <= _T_326 @[Execute.scala 230:24]
        node _T_327 = bits(op[2], 2, 2) @[Execute.scala 230:34]
        predReg[2] <= _T_327 @[Execute.scala 230:24]
        node _T_328 = bits(op[2], 3, 3) @[Execute.scala 230:34]
        predReg[3] <= _T_328 @[Execute.scala 230:24]
        node _T_329 = bits(op[2], 4, 4) @[Execute.scala 230:34]
        predReg[4] <= _T_329 @[Execute.scala 230:24]
        node _T_330 = bits(op[2], 5, 5) @[Execute.scala 230:34]
        predReg[5] <= _T_330 @[Execute.scala 230:24]
        node _T_331 = bits(op[2], 6, 6) @[Execute.scala 230:34]
        predReg[6] <= _T_331 @[Execute.scala 230:24]
        node _T_332 = bits(op[2], 7, 7) @[Execute.scala 230:34]
        predReg[7] <= _T_332 @[Execute.scala 230:24]
        predReg[0] <= UInt<1>("h01") @[Execute.scala 233:22]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_333 = eq(UInt<4>("h02"), exReg.aluOp[1].func) @[Conditional.scala 37:30]
        when _T_333 : @[Conditional.scala 39:67]
          mulLoReg <= op[2] @[Execute.scala 236:20]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_334 = eq(UInt<4>("h03"), exReg.aluOp[1].func) @[Conditional.scala 37:30]
          when _T_334 : @[Conditional.scala 39:67]
            mulHiReg <= op[2] @[Execute.scala 239:20]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_335 = eq(UInt<4>("h06"), exReg.aluOp[1].func) @[Conditional.scala 37:30]
            when _T_335 : @[Conditional.scala 39:67]
              io.exsc.op <= UInt<3>("h01") @[Execute.scala 242:22]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_336 = eq(UInt<4>("h05"), exReg.aluOp[1].func) @[Conditional.scala 37:30]
              when _T_336 : @[Conditional.scala 39:67]
                io.exsc.op <= UInt<3>("h02") @[Execute.scala 245:22]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_337 = eq(UInt<4>("h07"), exReg.aluOp[1].func) @[Conditional.scala 37:30]
                when _T_337 : @[Conditional.scala 39:67]
                  retBaseReg <= op[2] @[Execute.scala 248:22]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_338 = eq(UInt<4>("h08"), exReg.aluOp[1].func) @[Conditional.scala 37:30]
                  when _T_338 : @[Conditional.scala 39:67]
                    retOffReg <= op[2] @[Execute.scala 251:21]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_339 = eq(UInt<4>("h09"), exReg.aluOp[1].func) @[Conditional.scala 37:30]
                    when _T_339 : @[Conditional.scala 39:67]
                      excBaseReg <= op[2] @[Execute.scala 254:22]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_340 = eq(UInt<4>("h0a"), exReg.aluOp[1].func) @[Conditional.scala 37:30]
                      when _T_340 : @[Conditional.scala 39:67]
                        excOffReg <= op[2] @[Execute.scala 257:21]
                        skip @[Conditional.scala 39:67]
      skip @[Execute.scala 224:48]
    wire _WIRE_4 : UInt @[Execute.scala 261:25]
    _WIRE_4 is invalid @[Execute.scala 261:25]
    _WIRE_4 <= UInt<32>("h00") @[Execute.scala 262:15]
    node _T_341 = eq(UInt<4>("h00"), exReg.aluOp[1].func) @[Conditional.scala 37:30]
    when _T_341 : @[Conditional.scala 40:58]
      node lo_lo_1 = cat(predReg[1], predReg[0]) @[Execute.scala 265:72]
      node lo_hi_1 = cat(predReg[3], predReg[2]) @[Execute.scala 265:72]
      node lo_6 = cat(lo_hi_1, lo_lo_1) @[Execute.scala 265:72]
      node hi_lo_1 = cat(predReg[5], predReg[4]) @[Execute.scala 265:72]
      node hi_hi_1 = cat(predReg[7], predReg[6]) @[Execute.scala 265:72]
      node hi_5 = cat(hi_hi_1, hi_lo_1) @[Execute.scala 265:72]
      node lo_7 = cat(hi_5, lo_6) @[Execute.scala 265:72]
      node _T_342 = cat(UInt<24>("h00"), lo_7) @[Cat.scala 30:58]
      _WIRE_4 <= _T_342 @[Execute.scala 265:19]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_343 = eq(UInt<4>("h02"), exReg.aluOp[1].func) @[Conditional.scala 37:30]
      when _T_343 : @[Conditional.scala 39:67]
        _WIRE_4 <= mulLoReg @[Execute.scala 268:19]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_344 = eq(UInt<4>("h03"), exReg.aluOp[1].func) @[Conditional.scala 37:30]
        when _T_344 : @[Conditional.scala 39:67]
          _WIRE_4 <= mulHiReg @[Execute.scala 271:19]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_345 = eq(UInt<4>("h06"), exReg.aluOp[1].func) @[Conditional.scala 37:30]
          when _T_345 : @[Conditional.scala 39:67]
            _WIRE_4 <= io.scex.stackTop @[Execute.scala 274:19]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_346 = eq(UInt<4>("h05"), exReg.aluOp[1].func) @[Conditional.scala 37:30]
            when _T_346 : @[Conditional.scala 39:67]
              _WIRE_4 <= io.scex.memTop @[Execute.scala 277:19]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_347 = eq(UInt<4>("h07"), exReg.aluOp[1].func) @[Conditional.scala 37:30]
              when _T_347 : @[Conditional.scala 39:67]
                _WIRE_4 <= retBaseReg @[Execute.scala 280:19]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_348 = eq(UInt<4>("h08"), exReg.aluOp[1].func) @[Conditional.scala 37:30]
                when _T_348 : @[Conditional.scala 39:67]
                  _WIRE_4 <= retOffReg @[Execute.scala 283:19]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_349 = eq(UInt<4>("h09"), exReg.aluOp[1].func) @[Conditional.scala 37:30]
                  when _T_349 : @[Conditional.scala 39:67]
                    _WIRE_4 <= excBaseReg @[Execute.scala 286:19]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_350 = eq(UInt<4>("h0a"), exReg.aluOp[1].func) @[Conditional.scala 37:30]
                    when _T_350 : @[Conditional.scala 39:67]
                      _WIRE_4 <= excOffReg @[Execute.scala 289:19]
                      skip @[Conditional.scala 39:67]
    io.exmem.rd[1].addr <= exReg.rdAddr[1] @[Execute.scala 294:25]
    node _T_351 = and(exReg.wrRd[1], doExecute[1]) @[Execute.scala 295:43]
    io.exmem.rd[1].valid <= _T_351 @[Execute.scala 295:26]
    node _T_352 = mux(exReg.aluOp[1].isBCpy, _T_302, _WIRE_3) @[Execute.scala 297:35]
    node _T_353 = mux(exReg.aluOp[1].isMFS, _WIRE_4, _T_352) @[Execute.scala 296:31]
    io.exmem.rd[1].data <= _T_353 @[Execute.scala 296:25]
    node _T_354 = and(exReg.memOp.load, doExecute[0]) @[Execute.scala 302:41]
    io.exmem.mem.load <= _T_354 @[Execute.scala 302:21]
    node _T_355 = and(exReg.memOp.store, doExecute[0]) @[Execute.scala 303:43]
    io.exmem.mem.store <= _T_355 @[Execute.scala 303:22]
    io.exmem.mem.hword <= exReg.memOp.hword @[Execute.scala 304:22]
    io.exmem.mem.byte <= exReg.memOp.byte @[Execute.scala 305:21]
    io.exmem.mem.zext <= exReg.memOp.zext @[Execute.scala 306:21]
    io.exmem.mem.typ <= exReg.memOp.typ @[Execute.scala 307:20]
    node _T_356 = add(op[0], exReg.immVal[0]) @[Execute.scala 308:30]
    node _T_357 = tail(_T_356, 1) @[Execute.scala 308:30]
    io.exmem.mem.addr <= _T_357 @[Execute.scala 308:21]
    io.exmem.mem.data <= op[1] @[Execute.scala 309:21]
    node _T_358 = and(exReg.call, doExecute[0]) @[Execute.scala 312:35]
    io.exmem.mem.call <= _T_358 @[Execute.scala 312:21]
    node _T_359 = and(exReg.ret, doExecute[0]) @[Execute.scala 313:34]
    io.exmem.mem.ret <= _T_359 @[Execute.scala 313:21]
    node _T_360 = and(exReg.brcf, doExecute[0]) @[Execute.scala 314:35]
    io.exmem.mem.brcf <= _T_360 @[Execute.scala 314:21]
    node _T_361 = and(exReg.trap, doExecute[0]) @[Execute.scala 315:35]
    io.exmem.mem.trap <= _T_361 @[Execute.scala 315:21]
    node _T_362 = and(exReg.xcall, doExecute[0]) @[Execute.scala 316:37]
    io.exmem.mem.xcall <= _T_362 @[Execute.scala 316:22]
    node _T_363 = and(exReg.xret, doExecute[0]) @[Execute.scala 317:35]
    io.exmem.mem.xret <= _T_363 @[Execute.scala 317:21]
    io.exmem.mem.xsrc <= exReg.xsrc @[Execute.scala 318:21]
    io.exmem.mem.nonDelayed <= exReg.nonDelayed @[Execute.scala 319:27]
    io.exmem.mem.illOp <= exReg.illOp @[Execute.scala 320:22]
    node _T_364 = or(exReg.call, exReg.ret) @[Execute.scala 322:31]
    node _T_365 = or(_T_364, exReg.brcf) @[Execute.scala 322:44]
    node _T_366 = or(_T_365, exReg.xcall) @[Execute.scala 322:58]
    node _T_367 = or(_T_366, exReg.xret) @[Execute.scala 323:32]
    node doCallRet = and(_T_367, doExecute[0]) @[Execute.scala 323:47]
    node brcfOff = mux(exReg.immOp[0], UInt<1>("h00"), op[1]) @[Execute.scala 325:20]
    node _T_368 = or(exReg.call, exReg.xcall) @[Execute.scala 326:36]
    node _T_369 = mux(exReg.xret, excOffReg, retOffReg) @[Execute.scala 328:32]
    node _T_370 = mux(exReg.brcf, brcfOff, _T_369) @[Execute.scala 327:28]
    node callRetAddr = mux(_T_368, UInt<1>("h00"), _T_370) @[Execute.scala 326:24]
    node callBase = mux(exReg.immOp[0], exReg.callAddr, op[0]) @[Execute.scala 330:21]
    node _T_371 = or(exReg.call, exReg.xcall) @[Execute.scala 331:36]
    node _T_372 = or(_T_371, exReg.brcf) @[Execute.scala 331:51]
    node _T_373 = mux(exReg.xret, excBaseReg, retBaseReg) @[Execute.scala 332:28]
    node callRetBase = mux(_T_372, callBase, _T_373) @[Execute.scala 331:24]
    io.exmem.mem.callRetBase <= callRetBase @[Execute.scala 334:28]
    io.exmem.mem.callRetAddr <= callRetAddr @[Execute.scala 335:28]
    node _T_374 = and(exReg.call, doExecute[0]) @[Execute.scala 338:19]
    when _T_374 : @[Execute.scala 338:36]
      node _T_375 = cat(exReg.base, UInt<2>("h00")) @[Cat.scala 30:58]
      retBaseReg <= _T_375 @[Execute.scala 339:16]
      skip @[Execute.scala 338:36]
    node _T_376 = and(exReg.call, doExecute[0]) @[Execute.scala 342:28]
    node _T_377 = and(_T_376, io.ena) @[Execute.scala 342:44]
    saveRetOff <= _T_377 @[Execute.scala 342:14]
    saveND <= exReg.nonDelayed @[Execute.scala 343:10]
    node _T_378 = and(exReg.xcall, doExecute[0]) @[Execute.scala 346:20]
    when _T_378 : @[Execute.scala 346:37]
      node _T_379 = cat(exReg.base, UInt<2>("h00")) @[Cat.scala 30:58]
      excBaseReg <= _T_379 @[Execute.scala 347:16]
      node _T_380 = cat(exReg.relPc, UInt<2>("h00")) @[Cat.scala 30:58]
      excOffReg <= _T_380 @[Execute.scala 348:15]
      skip @[Execute.scala 346:37]
    node _T_381 = and(exReg.jmpOp.branch, doExecute[0]) @[Execute.scala 352:42]
    io.exfe.doBranch <= _T_381 @[Execute.scala 352:20]
    node _T_382 = bits(op[0], 31, 2) @[Execute.scala 355:25]
    node _T_383 = sub(_T_382, exReg.jmpOp.reloc) @[Execute.scala 355:50]
    node _T_384 = tail(_T_383, 1) @[Execute.scala 355:50]
    node target = mux(exReg.immOp[0], exReg.jmpOp.target, _T_384) @[Execute.scala 353:19]
    io.exfe.branchPc <= target @[Execute.scala 356:20]
    node _T_385 = and(exReg.nonDelayed, exReg.jmpOp.branch) @[Execute.scala 357:34]
    node _T_386 = and(_T_385, doExecute[0]) @[Execute.scala 357:56]
    io.brflush <= _T_386 @[Execute.scala 357:14]
    io.exmem.pc <= exReg.pc @[Execute.scala 360:15]
    io.exmem.base <= exReg.base @[Execute.scala 361:17]
    io.exmem.relPc <= exReg.relPc @[Execute.scala 362:18]
    io.exicache.doCallRet <= doCallRet @[Execute.scala 365:25]
    node _T_387 = bits(callRetBase, 31, 2) @[Execute.scala 366:41]
    io.exicache.callRetBase <= _T_387 @[Execute.scala 366:27]
    node _T_388 = bits(callRetAddr, 31, 2) @[Execute.scala 367:41]
    io.exicache.callRetAddr <= _T_388 @[Execute.scala 367:27]
    node _T_389 = eq(io.ena, UInt<1>("h00")) @[Execute.scala 370:8]
    when _T_389 : @[Execute.scala 370:17]
      predReg <- predReg @[Execute.scala 371:13]
      mulLoReg <= mulLoReg @[Execute.scala 372:14]
      mulHiReg <= mulHiReg @[Execute.scala 373:14]
      retBaseReg <= retBaseReg @[Execute.scala 374:16]
      retOffReg <= retOffReg @[Execute.scala 375:15]
      excBaseReg <= excBaseReg @[Execute.scala 376:16]
      excOffReg <= excOffReg @[Execute.scala 377:15]
      skip @[Execute.scala 370:17]
    when saveRetOff : @[Execute.scala 381:20]
      node hi_6 = mux(saveND, exReg.relPc, io.feex.pc) @[Execute.scala 382:25]
      node _T_390 = cat(hi_6, UInt<2>("h00")) @[Cat.scala 30:58]
      retOffReg <= _T_390 @[Execute.scala 382:15]
      skip @[Execute.scala 381:20]
    node _T_391 = bits(reset, 0, 0) @[compatibility.scala 260:56]
    when _T_391 : @[Execute.scala 386:15]
      node _T_392 = cat(UInt<1>("h01"), UInt<3>("h00")) @[Constants.scala 100:33]
      node _T_393 = cat(UInt<1>("h01"), UInt<3>("h00")) @[Constants.scala 100:33]
      wire _WIRE_5 : UInt<4>[2] @[compatibility.scala 127:12]
      _WIRE_5 is invalid @[compatibility.scala 127:12]
      _WIRE_5[0] <= _T_392 @[compatibility.scala 127:12]
      _WIRE_5[1] <= _T_393 @[compatibility.scala 127:12]
      exReg.pred <- _WIRE_5 @[connections.scala 134:10]
      exReg.illOp <= UInt<1>("h00") @[connections.scala 135:11]
      predReg[0] <= UInt<1>("h01") @[Execute.scala 388:16]
      skip @[Execute.scala 386:15]
    
  module Memory : 
    input clock : Clock
    input reset : UInt<1>
    output io : {ena_out : UInt<1>, flip ena_in : UInt<1>, flush : UInt<1>, flip exmem : {rd : {addr : UInt<5>, data : UInt<32>, valid : UInt<1>}[2], mem : {load : UInt<1>, store : UInt<1>, hword : UInt<1>, byte : UInt<1>, zext : UInt<1>, typ : UInt<2>, addr : UInt<32>, data : UInt<32>, call : UInt<1>, ret : UInt<1>, brcf : UInt<1>, trap : UInt<1>, xcall : UInt<1>, xret : UInt<1>, xsrc : UInt<5>, illOp : UInt<1>, callRetAddr : UInt<32>, callRetBase : UInt<32>, nonDelayed : UInt<1>}, pc : UInt<30>, base : UInt<30>, relPc : UInt<30>}, memwb : {rd : {addr : UInt<5>, data : UInt<32>, valid : UInt<1>}[2], pc : UInt<30>}, memfe : {doCallRet : UInt<1>, callRetPc : UInt<30>, callRetBase : UInt<30>, store : UInt<1>, addr : UInt<32>, data : UInt<32>}, exResult : {addr : UInt<5>, data : UInt<32>, valid : UInt<1>}[2], localInOut : {M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, ByteEn : UInt<4>}, flip S : {Resp : UInt<2>, Data : UInt<32>}}, globalInOut : {M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, ByteEn : UInt<4>, AddrSpace : UInt<2>}, flip S : {Resp : UInt<2>, Data : UInt<32>}}, flip icacheIllMem : UInt<1>, flip scacheIllMem : UInt<1>, exc : {call : UInt<1>, ret : UInt<1>, src : UInt<5>, exc : UInt<1>, excBase : UInt<30>, excAddr : UInt<30>}}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg memReg : {rd : {addr : UInt<5>, data : UInt<32>, valid : UInt<1>}[2], mem : {load : UInt<1>, store : UInt<1>, hword : UInt<1>, byte : UInt<1>, zext : UInt<1>, typ : UInt<2>, addr : UInt<32>, data : UInt<32>, call : UInt<1>, ret : UInt<1>, brcf : UInt<1>, trap : UInt<1>, xcall : UInt<1>, xret : UInt<1>, xsrc : UInt<5>, illOp : UInt<1>, callRetAddr : UInt<32>, callRetBase : UInt<32>, nonDelayed : UInt<1>}, pc : UInt<30>, base : UInt<30>, relPc : UInt<30>}, clock @[Memory.scala 21:19]
    node _T = eq(io.localInOut.S.Resp, UInt<2>("h03")) @[Memory.scala 24:38]
    node _T_1 = eq(io.globalInOut.S.Resp, UInt<2>("h03")) @[Memory.scala 25:39]
    node _T_2 = or(_T, _T_1) @[Memory.scala 24:54]
    node _T_3 = or(_T_2, io.icacheIllMem) @[Memory.scala 25:55]
    node illMem = or(_T_3, io.scacheIllMem) @[Memory.scala 26:33]
    reg illMemReg : UInt<1>, clock @[Memory.scala 27:22]
    illMemReg <= illMem @[Memory.scala 27:22]
    node _T_4 = or(memReg.mem.xcall, memReg.mem.trap) @[Memory.scala 30:33]
    node _T_5 = or(memReg.mem.call, memReg.mem.ret) @[Memory.scala 31:34]
    node _T_6 = or(_T_5, memReg.mem.brcf) @[Memory.scala 31:52]
    node _T_7 = or(_T_6, memReg.mem.xret) @[Memory.scala 32:34]
    node _T_8 = and(_T_7, memReg.mem.nonDelayed) @[Memory.scala 32:54]
    node _T_9 = or(_T_4, _T_8) @[Memory.scala 30:52]
    node _T_10 = or(_T_9, memReg.mem.illOp) @[Memory.scala 32:80]
    node flush = or(_T_10, illMemReg) @[Memory.scala 33:33]
    io.flush <= flush @[Memory.scala 34:12]
    reg mayStallReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Memory.scala 37:28]
    node _T_11 = eq(io.localInOut.S.Resp, UInt<2>("h01")) @[Memory.scala 38:38]
    node _T_12 = eq(io.globalInOut.S.Resp, UInt<2>("h01")) @[Memory.scala 39:42]
    node _T_13 = or(_T_11, _T_12) @[Memory.scala 39:17]
    node _T_14 = eq(mayStallReg, UInt<1>("h00")) @[Memory.scala 40:20]
    node enable = or(_T_13, _T_14) @[Memory.scala 40:17]
    io.ena_out <= enable @[Memory.scala 41:14]
    node _T_15 = and(enable, io.ena_in) @[Memory.scala 44:15]
    when _T_15 : @[Memory.scala 44:29]
      memReg <- io.exmem @[Memory.scala 45:12]
      node _T_16 = or(io.exmem.mem.load, io.exmem.mem.store) @[Memory.scala 46:38]
      mayStallReg <= _T_16 @[Memory.scala 46:17]
      when flush : @[Memory.scala 47:17]
        memReg.rd[0].valid <= UInt<1>("h00") @[connections.scala 172:11]
        memReg.rd[1].valid <= UInt<1>("h00") @[connections.scala 172:11]
        memReg.mem.load <= UInt<1>("h00") @[connections.scala 198:10]
        memReg.mem.store <= UInt<1>("h00") @[connections.scala 199:11]
        memReg.mem.call <= UInt<1>("h00") @[connections.scala 200:10]
        memReg.mem.ret <= UInt<1>("h00") @[connections.scala 201:9]
        memReg.mem.brcf <= UInt<1>("h00") @[connections.scala 202:10]
        memReg.mem.trap <= UInt<1>("h00") @[connections.scala 203:10]
        memReg.mem.xcall <= UInt<1>("h00") @[connections.scala 204:11]
        memReg.mem.xret <= UInt<1>("h00") @[connections.scala 205:10]
        memReg.mem.illOp <= UInt<1>("h00") @[connections.scala 206:11]
        mayStallReg <= UInt<1>("h00") @[Memory.scala 49:19]
        skip @[Memory.scala 47:17]
      skip @[Memory.scala 44:29]
    when illMem : @[Memory.scala 52:16]
      mayStallReg <= UInt<1>("h00") @[Memory.scala 53:19]
      skip @[Memory.scala 52:16]
    reg rdDataEnaReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Memory.scala 57:29]
    reg rdDataReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Memory.scala 58:26]
    node _T_17 = eq(io.ena_in, UInt<1>("h00")) @[Memory.scala 60:9]
    when _T_17 : @[Memory.scala 60:21]
      node _T_18 = neq(io.localInOut.S.Resp, UInt<2>("h00")) @[Memory.scala 61:32]
      node _T_19 = neq(io.globalInOut.S.Resp, UInt<2>("h00")) @[Memory.scala 61:74]
      node _T_20 = or(_T_18, _T_19) @[Memory.scala 61:49]
      when _T_20 : @[Memory.scala 61:92]
        mayStallReg <= UInt<1>("h00") @[Memory.scala 62:19]
        rdDataEnaReg <= UInt<1>("h01") @[Memory.scala 63:20]
        skip @[Memory.scala 61:92]
      node _T_21 = eq(io.localInOut.S.Resp, UInt<2>("h01")) @[Memory.scala 65:32]
      when _T_21 : @[Memory.scala 65:49]
        rdDataReg <= io.localInOut.S.Data @[Memory.scala 66:17]
        skip @[Memory.scala 65:49]
      node _T_22 = eq(io.globalInOut.S.Resp, UInt<2>("h01")) @[Memory.scala 68:33]
      when _T_22 : @[Memory.scala 68:50]
        rdDataReg <= io.globalInOut.S.Data @[Memory.scala 69:17]
        skip @[Memory.scala 68:50]
      skip @[Memory.scala 60:21]
    else : @[Memory.scala 72:14]
      rdDataEnaReg <= UInt<1>("h00") @[Memory.scala 73:18]
      skip @[Memory.scala 72:14]
    wire wrData : UInt<8>[4] @[Memory.scala 80:20]
    wrData is invalid @[Memory.scala 80:20]
    node _T_23 = bits(io.exmem.mem.data, 7, 0) @[Memory.scala 82:35]
    wrData[0] <= _T_23 @[Memory.scala 82:15]
    node _T_24 = bits(io.exmem.mem.data, 15, 8) @[Memory.scala 82:35]
    wrData[1] <= _T_24 @[Memory.scala 82:15]
    node _T_25 = bits(io.exmem.mem.data, 23, 16) @[Memory.scala 82:35]
    wrData[2] <= _T_25 @[Memory.scala 82:15]
    node _T_26 = bits(io.exmem.mem.data, 31, 24) @[Memory.scala 82:35]
    wrData[3] <= _T_26 @[Memory.scala 82:15]
    wire byteEn : UInt<4> @[Memory.scala 84:20]
    byteEn is invalid @[Memory.scala 84:20]
    byteEn <= UInt<4>("h0f") @[Memory.scala 85:10]
    when io.exmem.mem.hword : @[Memory.scala 87:28]
      node _T_27 = bits(io.exmem.mem.addr, 1, 1) @[Memory.scala 88:27]
      node _T_28 = eq(_T_27, UInt<1>("h00")) @[Memory.scala 88:31]
      when _T_28 : @[Memory.scala 88:47]
        node _T_29 = bits(io.exmem.mem.data, 7, 0) @[Memory.scala 89:37]
        wrData[2] <= _T_29 @[Memory.scala 89:17]
        node _T_30 = bits(io.exmem.mem.data, 15, 8) @[Memory.scala 90:37]
        wrData[3] <= _T_30 @[Memory.scala 90:17]
        byteEn <= UInt<4>("h0c") @[Memory.scala 91:14]
        skip @[Memory.scala 88:47]
      else : @[Memory.scala 92:52]
        node _T_31 = bits(io.exmem.mem.addr, 1, 1) @[Memory.scala 92:33]
        node _T_32 = eq(_T_31, UInt<1>("h01")) @[Memory.scala 92:37]
        when _T_32 : @[Memory.scala 92:52]
          node _T_33 = bits(io.exmem.mem.data, 7, 0) @[Memory.scala 93:37]
          wrData[0] <= _T_33 @[Memory.scala 93:17]
          node _T_34 = bits(io.exmem.mem.data, 15, 8) @[Memory.scala 94:37]
          wrData[1] <= _T_34 @[Memory.scala 94:17]
          byteEn <= UInt<2>("h03") @[Memory.scala 95:14]
          skip @[Memory.scala 92:52]
      skip @[Memory.scala 87:28]
    when io.exmem.mem.byte : @[Memory.scala 99:27]
      node _T_35 = bits(io.exmem.mem.addr, 1, 0) @[Memory.scala 100:29]
      node _T_36 = eq(UInt<1>("h00"), _T_35) @[Conditional.scala 37:30]
      when _T_36 : @[Conditional.scala 40:58]
        node _T_37 = bits(io.exmem.mem.data, 7, 0) @[Memory.scala 102:39]
        wrData[3] <= _T_37 @[Memory.scala 102:19]
        byteEn <= UInt<4>("h08") @[Memory.scala 103:16]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_38 = eq(UInt<1>("h01"), _T_35) @[Conditional.scala 37:30]
        when _T_38 : @[Conditional.scala 39:67]
          node _T_39 = bits(io.exmem.mem.data, 7, 0) @[Memory.scala 106:39]
          wrData[2] <= _T_39 @[Memory.scala 106:19]
          byteEn <= UInt<3>("h04") @[Memory.scala 107:16]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_40 = eq(UInt<2>("h02"), _T_35) @[Conditional.scala 37:30]
          when _T_40 : @[Conditional.scala 39:67]
            node _T_41 = bits(io.exmem.mem.data, 7, 0) @[Memory.scala 110:39]
            wrData[1] <= _T_41 @[Memory.scala 110:19]
            byteEn <= UInt<2>("h02") @[Memory.scala 111:16]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_42 = eq(UInt<2>("h03"), _T_35) @[Conditional.scala 37:30]
            when _T_42 : @[Conditional.scala 39:67]
              node _T_43 = bits(io.exmem.mem.data, 7, 0) @[Memory.scala 114:39]
              wrData[0] <= _T_43 @[Memory.scala 114:19]
              byteEn <= UInt<1>("h01") @[Memory.scala 115:16]
              skip @[Conditional.scala 39:67]
      skip @[Memory.scala 99:27]
    node _T_44 = and(enable, io.ena_in) @[Memory.scala 122:24]
    node _T_45 = eq(flush, UInt<1>("h00")) @[Memory.scala 122:40]
    node _T_46 = and(_T_44, _T_45) @[Memory.scala 122:37]
    node _T_47 = cat(UInt<1>("h00"), io.exmem.mem.load) @[Memory.scala 123:28]
    node _T_48 = cat(_T_47, io.exmem.mem.store) @[Memory.scala 123:49]
    node cmd = mux(_T_46, _T_48, UInt<3>("h00")) @[Memory.scala 122:16]
    node _T_49 = eq(io.exmem.mem.typ, UInt<2>("h01")) @[Memory.scala 126:47]
    node _T_50 = mux(_T_49, cmd, UInt<3>("h00")) @[Memory.scala 126:29]
    io.localInOut.M.Cmd <= _T_50 @[Memory.scala 126:23]
    node hi = bits(io.exmem.mem.addr, 31, 2) @[Memory.scala 127:48]
    node _T_51 = cat(hi, UInt<2>("h00")) @[Cat.scala 30:58]
    io.localInOut.M.Addr <= _T_51 @[Memory.scala 127:24]
    node lo = cat(wrData[1], wrData[0]) @[Cat.scala 30:58]
    node hi_1 = cat(wrData[3], wrData[2]) @[Cat.scala 30:58]
    node _T_52 = cat(hi_1, lo) @[Cat.scala 30:58]
    io.localInOut.M.Data <= _T_52 @[Memory.scala 128:24]
    io.localInOut.M.ByteEn <= byteEn @[Memory.scala 129:26]
    node _T_53 = neq(io.exmem.mem.typ, UInt<2>("h01")) @[Memory.scala 131:48]
    node _T_54 = mux(_T_53, cmd, UInt<3>("h00")) @[Memory.scala 131:30]
    io.globalInOut.M.Cmd <= _T_54 @[Memory.scala 131:24]
    node hi_2 = bits(io.exmem.mem.addr, 31, 2) @[Memory.scala 132:49]
    node _T_55 = cat(hi_2, UInt<2>("h00")) @[Cat.scala 30:58]
    io.globalInOut.M.Addr <= _T_55 @[Memory.scala 132:25]
    node lo_1 = cat(wrData[1], wrData[0]) @[Cat.scala 30:58]
    node hi_3 = cat(wrData[3], wrData[2]) @[Cat.scala 30:58]
    node _T_56 = cat(hi_3, lo_1) @[Cat.scala 30:58]
    io.globalInOut.M.Data <= _T_56 @[Memory.scala 133:25]
    io.globalInOut.M.ByteEn <= byteEn @[Memory.scala 134:27]
    node _T_57 = eq(io.exmem.mem.typ, UInt<2>("h00")) @[Memory.scala 135:54]
    node _T_58 = eq(io.exmem.mem.typ, UInt<2>("h02")) @[Memory.scala 136:58]
    node _T_59 = mux(_T_58, UInt<2>("h02"), UInt<2>("h03")) @[Memory.scala 136:40]
    node _T_60 = mux(_T_57, UInt<2>("h00"), _T_59) @[Memory.scala 135:36]
    io.globalInOut.M.AddrSpace <= _T_60 @[Memory.scala 135:30]
    node _T_61 = and(UInt<1>("h00"), rdDataEnaReg) @[Memory.scala 148:68]
    node _T_62 = eq(memReg.mem.typ, UInt<2>("h01")) @[Memory.scala 150:49]
    node _T_63 = mux(_T_62, io.localInOut.S.Data, io.globalInOut.S.Data) @[Memory.scala 150:33]
    node _T_64 = mux(_T_61, rdDataReg, _T_63) @[Memory.scala 148:29]
    wire rdData : UInt<8>[4] @[Memory.scala 140:22]
    rdData is invalid @[Memory.scala 140:22]
    node _T_65 = bits(_T_64, 7, 0) @[Memory.scala 142:24]
    rdData[0] <= _T_65 @[Memory.scala 142:17]
    node _T_66 = bits(_T_64, 15, 8) @[Memory.scala 142:24]
    rdData[1] <= _T_66 @[Memory.scala 142:17]
    node _T_67 = bits(_T_64, 23, 16) @[Memory.scala 142:24]
    rdData[2] <= _T_67 @[Memory.scala 142:17]
    node _T_68 = bits(_T_64, 31, 24) @[Memory.scala 142:24]
    rdData[3] <= _T_68 @[Memory.scala 142:17]
    wire dout : UInt<32> @[Memory.scala 153:18]
    dout is invalid @[Memory.scala 153:18]
    node lo_2 = cat(rdData[1], rdData[0]) @[Cat.scala 30:58]
    node hi_4 = cat(rdData[3], rdData[2]) @[Cat.scala 30:58]
    node _T_69 = cat(hi_4, lo_2) @[Cat.scala 30:58]
    dout <= _T_69 @[Memory.scala 155:8]
    node _T_70 = bits(memReg.mem.addr, 1, 0) @[Memory.scala 158:39]
    node _T_71 = eq(UInt<1>("h01"), _T_70) @[Mux.scala 80:60]
    node _T_72 = mux(_T_71, rdData[2], rdData[3]) @[Mux.scala 80:57]
    node _T_73 = eq(UInt<2>("h02"), _T_70) @[Mux.scala 80:60]
    node _T_74 = mux(_T_73, rdData[1], _T_72) @[Mux.scala 80:57]
    node _T_75 = eq(UInt<2>("h03"), _T_70) @[Mux.scala 80:60]
    node bval = mux(_T_75, rdData[0], _T_74) @[Mux.scala 80:57]
    node _T_76 = bits(memReg.mem.addr, 1, 1) @[Memory.scala 164:33]
    node _T_77 = eq(_T_76, UInt<1>("h00")) @[Memory.scala 164:37]
    node _T_78 = cat(rdData[3], rdData[2]) @[Cat.scala 30:58]
    node _T_79 = cat(rdData[1], rdData[0]) @[Cat.scala 30:58]
    node hval = mux(_T_77, _T_78, _T_79) @[Memory.scala 164:17]
    when memReg.mem.byte : @[Memory.scala 169:25]
      node _T_80 = bits(bval, 7, 7) @[Memory.scala 172:49]
      node _T_81 = bits(_T_80, 0, 0) @[Bitwise.scala 72:15]
      node _T_82 = mux(_T_81, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
      node _T_83 = mux(memReg.mem.zext, UInt<24>("h00"), _T_82) @[Memory.scala 170:16]
      node _T_84 = cat(_T_83, bval) @[Memory.scala 172:66]
      dout <= _T_84 @[Memory.scala 170:10]
      skip @[Memory.scala 169:25]
    when memReg.mem.hword : @[Memory.scala 174:26]
      node _T_85 = bits(hval, 15, 15) @[Memory.scala 177:51]
      node _T_86 = bits(_T_85, 0, 0) @[Bitwise.scala 72:15]
      node _T_87 = mux(_T_86, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
      node _T_88 = mux(memReg.mem.zext, UInt<16>("h00"), _T_87) @[Memory.scala 175:16]
      node _T_89 = cat(_T_88, hval) @[Memory.scala 177:70]
      dout <= _T_89 @[Memory.scala 175:10]
      skip @[Memory.scala 174:26]
    io.memwb.pc <= memReg.pc @[Memory.scala 180:15]
    io.memwb.rd <- memReg.rd @[Memory.scala 181:15]
    node _T_90 = mux(memReg.mem.load, dout, memReg.rd[0].data) @[Memory.scala 183:29]
    io.memwb.rd[0].data <= _T_90 @[Memory.scala 183:23]
    node _T_91 = or(memReg.mem.call, memReg.mem.ret) @[Memory.scala 186:42]
    node _T_92 = or(_T_91, memReg.mem.brcf) @[Memory.scala 186:60]
    node _T_93 = or(_T_92, memReg.mem.xcall) @[Memory.scala 186:79]
    node _T_94 = or(_T_93, memReg.mem.xret) @[Memory.scala 187:43]
    io.memfe.doCallRet <= _T_94 @[Memory.scala 186:22]
    node _T_95 = bits(memReg.mem.callRetAddr, 31, 2) @[Memory.scala 188:47]
    io.memfe.callRetPc <= _T_95 @[Memory.scala 188:22]
    node _T_96 = bits(memReg.mem.callRetBase, 31, 2) @[Memory.scala 189:49]
    io.memfe.callRetBase <= _T_96 @[Memory.scala 189:24]
    node _T_97 = eq(io.localInOut.M.Cmd, UInt<3>("h01")) @[Memory.scala 192:41]
    io.memfe.store <= _T_97 @[Memory.scala 192:18]
    io.memfe.addr <= io.exmem.mem.addr @[Memory.scala 193:17]
    node lo_3 = cat(wrData[1], wrData[0]) @[Cat.scala 30:58]
    node hi_5 = cat(wrData[3], wrData[2]) @[Cat.scala 30:58]
    node _T_98 = cat(hi_5, lo_3) @[Cat.scala 30:58]
    io.memfe.data <= _T_98 @[Memory.scala 194:17]
    io.exResult <- io.exmem.rd @[Memory.scala 197:15]
    io.exc.call <= memReg.mem.xcall @[Memory.scala 200:15]
    io.exc.ret <= memReg.mem.xret @[Memory.scala 201:14]
    node _T_99 = or(memReg.mem.trap, memReg.mem.illOp) @[Memory.scala 203:33]
    node _T_100 = or(_T_99, illMemReg) @[Memory.scala 203:53]
    io.exc.exc <= _T_100 @[Memory.scala 203:14]
    node _T_101 = mux(illMemReg, UInt<1>("h01"), memReg.mem.xsrc) @[Memory.scala 206:24]
    node _T_102 = mux(memReg.mem.illOp, UInt<1>("h00"), _T_101) @[Memory.scala 205:20]
    io.exc.src <= _T_102 @[Memory.scala 205:14]
    io.exc.excBase <= memReg.base @[Memory.scala 208:18]
    node _T_103 = add(memReg.relPc, UInt<1>("h01")) @[Memory.scala 209:55]
    node _T_104 = tail(_T_103, 1) @[Memory.scala 209:55]
    node _T_105 = mux(memReg.mem.trap, _T_104, memReg.relPc) @[Memory.scala 209:24]
    io.exc.excAddr <= _T_105 @[Memory.scala 209:18]
    node _T_106 = bits(reset, 0, 0) @[compatibility.scala 260:56]
    when _T_106 : @[Memory.scala 215:15]
      memReg.rd[0].valid <= UInt<1>("h00") @[connections.scala 172:11]
      memReg.rd[1].valid <= UInt<1>("h00") @[connections.scala 172:11]
      memReg.mem.load <= UInt<1>("h00") @[connections.scala 198:10]
      memReg.mem.store <= UInt<1>("h00") @[connections.scala 199:11]
      memReg.mem.call <= UInt<1>("h00") @[connections.scala 200:10]
      memReg.mem.ret <= UInt<1>("h00") @[connections.scala 201:9]
      memReg.mem.brcf <= UInt<1>("h00") @[connections.scala 202:10]
      memReg.mem.trap <= UInt<1>("h00") @[connections.scala 203:10]
      memReg.mem.xcall <= UInt<1>("h00") @[connections.scala 204:11]
      memReg.mem.xret <= UInt<1>("h00") @[connections.scala 205:10]
      memReg.mem.illOp <= UInt<1>("h00") @[connections.scala 206:11]
      skip @[Memory.scala 215:15]
    
  module WriteBack : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip ena : UInt<1>, flip memwb : {rd : {addr : UInt<5>, data : UInt<32>, valid : UInt<1>}[2], pc : UInt<30>}, rfWrite : {addr : UInt<5>, data : UInt<32>, valid : UInt<1>}[2], memResult : {addr : UInt<5>, data : UInt<32>, valid : UInt<1>}[2]}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg wbReg : {rd : {addr : UInt<5>, data : UInt<32>, valid : UInt<1>}[2], pc : UInt<30>}, clock @[WriteBack.scala 15:18]
    when io.ena : @[WriteBack.scala 16:17]
      wbReg <- io.memwb @[WriteBack.scala 17:11]
      skip @[WriteBack.scala 16:17]
    io.rfWrite <- io.memwb.rd @[WriteBack.scala 21:14]
    io.memResult <- io.memwb.rd @[WriteBack.scala 23:16]
    
  module Exceptions : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip ena : UInt<1>, ocp : {flip M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, ByteEn : UInt<4>}, S : {Resp : UInt<2>, Data : UInt<32>}}, flip intrs : UInt<1>[16], excdec : {exc : UInt<1>, excBase : UInt<30>, excAddr : UInt<30>, intr : UInt<1>, addr : UInt<32>, src : UInt<5>, local : UInt<1>}, flip memexc : {call : UInt<1>, ret : UInt<1>, src : UInt<5>, exc : UInt<1>, excBase : UInt<30>, excAddr : UInt<30>}, superMode : UInt<1>, invalICache : UInt<1>, invalDCache : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg masterReg : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, ByteEn : UInt<4>}, clock @[Exceptions.scala 21:26]
    masterReg <- io.ocp.M @[Exceptions.scala 21:26]
    reg statusReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h02"))) @[Exceptions.scala 23:26]
    reg maskReg : UInt<32>, clock @[Exceptions.scala 24:22]
    reg sourceReg : UInt<32>, clock @[Exceptions.scala 25:22]
    node _T = bits(statusReg, 0, 0) @[Exceptions.scala 27:26]
    node intrEna = eq(_T, UInt<1>("h01")) @[Exceptions.scala 27:30]
    node _T_1 = bits(statusReg, 1, 1) @[Exceptions.scala 28:28]
    node superMode = eq(_T_1, UInt<1>("h01")) @[Exceptions.scala 28:32]
    reg localModeReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Exceptions.scala 30:29]
    cmem vec : UInt<32>[32]
    cmem vecDup : UInt<32>[32]
    reg sleepReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Exceptions.scala 39:25]
    wire excPend : UInt<1>[32] @[Exceptions.scala 42:25]
    excPend is invalid @[Exceptions.scala 42:25]
    wire _WIRE : UInt<1>[32] @[compatibility.scala 127:12]
    _WIRE is invalid @[compatibility.scala 127:12]
    _WIRE[0] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[1] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[2] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[3] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[4] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[5] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[6] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[7] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[8] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[9] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[10] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[11] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[12] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[13] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[14] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[15] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[16] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[17] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[18] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[19] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[20] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[21] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[22] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[23] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[24] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[25] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[26] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[27] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[28] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[29] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[30] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[31] <= UInt<1>("h00") @[compatibility.scala 127:12]
    reg excPendReg : UInt<1>[32], clock with : (reset => (reset, _WIRE)) @[Exceptions.scala 43:28]
    wire intrPend : UInt<1>[32] @[Exceptions.scala 44:25]
    intrPend is invalid @[Exceptions.scala 44:25]
    wire _WIRE_1 : UInt<1>[32] @[compatibility.scala 127:12]
    _WIRE_1 is invalid @[compatibility.scala 127:12]
    _WIRE_1[0] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_1[1] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_1[2] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_1[3] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_1[4] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_1[5] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_1[6] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_1[7] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_1[8] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_1[9] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_1[10] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_1[11] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_1[12] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_1[13] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_1[14] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_1[15] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_1[16] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_1[17] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_1[18] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_1[19] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_1[20] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_1[21] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_1[22] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_1[23] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_1[24] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_1[25] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_1[26] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_1[27] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_1[28] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_1[29] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_1[30] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE_1[31] <= UInt<1>("h00") @[compatibility.scala 127:12]
    reg intrPendReg : UInt<1>[32], clock with : (reset => (reset, _WIRE_1)) @[Exceptions.scala 45:28]
    excPend <- excPendReg @[Exceptions.scala 46:11]
    intrPend <- intrPendReg @[Exceptions.scala 47:12]
    io.ocp.S.Resp <= UInt<2>("h00") @[Exceptions.scala 50:17]
    io.ocp.S.Data <= UInt<32>("h00") @[Exceptions.scala 51:17]
    io.superMode <= superMode @[Exceptions.scala 54:16]
    io.invalICache <= UInt<1>("h00") @[Exceptions.scala 57:18]
    io.invalDCache <= UInt<1>("h00") @[Exceptions.scala 58:18]
    node _T_2 = eq(masterReg.Cmd, UInt<3>("h02")) @[Exceptions.scala 61:22]
    when _T_2 : @[Exceptions.scala 61:37]
      io.ocp.S.Resp <= UInt<2>("h01") @[Exceptions.scala 62:19]
      node _T_3 = bits(masterReg.Addr, 7, 2) @[Exceptions.scala 64:26]
      node _T_4 = eq(UInt<1>("h00"), _T_3) @[Conditional.scala 37:30]
      when _T_4 : @[Conditional.scala 40:58]
        io.ocp.S.Data <= statusReg @[Exceptions.scala 65:43]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_5 = eq(UInt<1>("h01"), _T_3) @[Conditional.scala 37:30]
        when _T_5 : @[Conditional.scala 39:67]
          io.ocp.S.Data <= maskReg @[Exceptions.scala 66:43]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_6 = eq(UInt<2>("h03"), _T_3) @[Conditional.scala 37:30]
          when _T_6 : @[Conditional.scala 39:67]
            io.ocp.S.Data <= sourceReg @[Exceptions.scala 67:43]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_7 = eq(UInt<2>("h02"), _T_3) @[Conditional.scala 37:30]
            when _T_7 : @[Conditional.scala 39:67]
              node lo_lo_lo_lo = cat(intrPendReg[1], intrPendReg[0]) @[Exceptions.scala 68:58]
              node lo_lo_lo_hi = cat(intrPendReg[3], intrPendReg[2]) @[Exceptions.scala 68:58]
              node lo_lo_lo = cat(lo_lo_lo_hi, lo_lo_lo_lo) @[Exceptions.scala 68:58]
              node lo_lo_hi_lo = cat(intrPendReg[5], intrPendReg[4]) @[Exceptions.scala 68:58]
              node lo_lo_hi_hi = cat(intrPendReg[7], intrPendReg[6]) @[Exceptions.scala 68:58]
              node lo_lo_hi = cat(lo_lo_hi_hi, lo_lo_hi_lo) @[Exceptions.scala 68:58]
              node lo_lo = cat(lo_lo_hi, lo_lo_lo) @[Exceptions.scala 68:58]
              node lo_hi_lo_lo = cat(intrPendReg[9], intrPendReg[8]) @[Exceptions.scala 68:58]
              node lo_hi_lo_hi = cat(intrPendReg[11], intrPendReg[10]) @[Exceptions.scala 68:58]
              node lo_hi_lo = cat(lo_hi_lo_hi, lo_hi_lo_lo) @[Exceptions.scala 68:58]
              node lo_hi_hi_lo = cat(intrPendReg[13], intrPendReg[12]) @[Exceptions.scala 68:58]
              node lo_hi_hi_hi = cat(intrPendReg[15], intrPendReg[14]) @[Exceptions.scala 68:58]
              node lo_hi_hi = cat(lo_hi_hi_hi, lo_hi_hi_lo) @[Exceptions.scala 68:58]
              node lo_hi = cat(lo_hi_hi, lo_hi_lo) @[Exceptions.scala 68:58]
              node lo = cat(lo_hi, lo_lo) @[Exceptions.scala 68:58]
              node hi_lo_lo_lo = cat(intrPendReg[17], intrPendReg[16]) @[Exceptions.scala 68:58]
              node hi_lo_lo_hi = cat(intrPendReg[19], intrPendReg[18]) @[Exceptions.scala 68:58]
              node hi_lo_lo = cat(hi_lo_lo_hi, hi_lo_lo_lo) @[Exceptions.scala 68:58]
              node hi_lo_hi_lo = cat(intrPendReg[21], intrPendReg[20]) @[Exceptions.scala 68:58]
              node hi_lo_hi_hi = cat(intrPendReg[23], intrPendReg[22]) @[Exceptions.scala 68:58]
              node hi_lo_hi = cat(hi_lo_hi_hi, hi_lo_hi_lo) @[Exceptions.scala 68:58]
              node hi_lo = cat(hi_lo_hi, hi_lo_lo) @[Exceptions.scala 68:58]
              node hi_hi_lo_lo = cat(intrPendReg[25], intrPendReg[24]) @[Exceptions.scala 68:58]
              node hi_hi_lo_hi = cat(intrPendReg[27], intrPendReg[26]) @[Exceptions.scala 68:58]
              node hi_hi_lo = cat(hi_hi_lo_hi, hi_hi_lo_lo) @[Exceptions.scala 68:58]
              node hi_hi_hi_lo = cat(intrPendReg[29], intrPendReg[28]) @[Exceptions.scala 68:58]
              node hi_hi_hi_hi = cat(intrPendReg[31], intrPendReg[30]) @[Exceptions.scala 68:58]
              node hi_hi_hi = cat(hi_hi_hi_hi, hi_hi_hi_lo) @[Exceptions.scala 68:58]
              node hi_hi = cat(hi_hi_hi, hi_hi_lo) @[Exceptions.scala 68:58]
              node hi = cat(hi_hi, hi_lo) @[Exceptions.scala 68:58]
              node _T_8 = cat(hi, lo) @[Exceptions.scala 68:58]
              io.ocp.S.Data <= _T_8 @[Exceptions.scala 68:43]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_9 = eq(UInt<3>("h05"), _T_3) @[Conditional.scala 37:30]
              when _T_9 : @[Conditional.scala 39:67]
                node _T_10 = cat(localModeReg, UInt<31>("h00")) @[Exceptions.scala 69:59]
                io.ocp.S.Data <= _T_10 @[Exceptions.scala 69:43]
                skip @[Conditional.scala 39:67]
      node _T_11 = bits(masterReg.Addr, 7, 7) @[Exceptions.scala 71:24]
      node _T_12 = eq(_T_11, UInt<1>("h01")) @[Exceptions.scala 71:43]
      when _T_12 : @[Exceptions.scala 71:59]
        node _T_13 = bits(masterReg.Addr, 6, 2) @[Exceptions.scala 72:42]
        infer mport MPORT = vec[_T_13], clock @[Exceptions.scala 72:27]
        io.ocp.S.Data <= MPORT @[Exceptions.scala 72:21]
        skip @[Exceptions.scala 71:59]
      skip @[Exceptions.scala 61:37]
    node _T_14 = eq(masterReg.Cmd, UInt<3>("h01")) @[Exceptions.scala 77:22]
    when _T_14 : @[Exceptions.scala 77:37]
      io.ocp.S.Resp <= UInt<2>("h01") @[Exceptions.scala 78:19]
      node _T_15 = bits(masterReg.Addr, 7, 2) @[Exceptions.scala 79:26]
      node _T_16 = eq(UInt<1>("h00"), _T_15) @[Conditional.scala 37:30]
      when _T_16 : @[Conditional.scala 40:58]
        when superMode : @[Exceptions.scala 33:22]
          statusReg <= masterReg.Data @[Exceptions.scala 80:48]
          skip @[Exceptions.scala 33:22]
        else : @[Exceptions.scala 33:42]
          io.ocp.S.Resp <= UInt<2>("h03") @[Exceptions.scala 33:58]
          skip @[Exceptions.scala 33:42]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_17 = eq(UInt<1>("h01"), _T_15) @[Conditional.scala 37:30]
        when _T_17 : @[Conditional.scala 39:67]
          when superMode : @[Exceptions.scala 33:22]
            maskReg <= masterReg.Data @[Exceptions.scala 81:46]
            skip @[Exceptions.scala 33:22]
          else : @[Exceptions.scala 33:42]
            io.ocp.S.Resp <= UInt<2>("h03") @[Exceptions.scala 33:58]
            skip @[Exceptions.scala 33:42]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_18 = eq(UInt<2>("h03"), _T_15) @[Conditional.scala 37:30]
          when _T_18 : @[Conditional.scala 39:67]
            when superMode : @[Exceptions.scala 33:22]
              sourceReg <= masterReg.Data @[Exceptions.scala 82:48]
              skip @[Exceptions.scala 33:22]
            else : @[Exceptions.scala 33:42]
              io.ocp.S.Resp <= UInt<2>("h03") @[Exceptions.scala 33:58]
              skip @[Exceptions.scala 33:42]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_19 = eq(UInt<2>("h02"), _T_15) @[Conditional.scala 37:30]
            when _T_19 : @[Conditional.scala 39:67]
              when superMode : @[Exceptions.scala 33:22]
                node _T_20 = bits(masterReg.Data, 0, 0) @[Exceptions.scala 86:59]
                node _T_21 = and(intrPendReg[0], _T_20) @[Exceptions.scala 86:43]
                intrPend[0] <= _T_21 @[Exceptions.scala 86:25]
                node _T_22 = bits(masterReg.Data, 1, 1) @[Exceptions.scala 86:59]
                node _T_23 = and(intrPendReg[1], _T_22) @[Exceptions.scala 86:43]
                intrPend[1] <= _T_23 @[Exceptions.scala 86:25]
                node _T_24 = bits(masterReg.Data, 2, 2) @[Exceptions.scala 86:59]
                node _T_25 = and(intrPendReg[2], _T_24) @[Exceptions.scala 86:43]
                intrPend[2] <= _T_25 @[Exceptions.scala 86:25]
                node _T_26 = bits(masterReg.Data, 3, 3) @[Exceptions.scala 86:59]
                node _T_27 = and(intrPendReg[3], _T_26) @[Exceptions.scala 86:43]
                intrPend[3] <= _T_27 @[Exceptions.scala 86:25]
                node _T_28 = bits(masterReg.Data, 4, 4) @[Exceptions.scala 86:59]
                node _T_29 = and(intrPendReg[4], _T_28) @[Exceptions.scala 86:43]
                intrPend[4] <= _T_29 @[Exceptions.scala 86:25]
                node _T_30 = bits(masterReg.Data, 5, 5) @[Exceptions.scala 86:59]
                node _T_31 = and(intrPendReg[5], _T_30) @[Exceptions.scala 86:43]
                intrPend[5] <= _T_31 @[Exceptions.scala 86:25]
                node _T_32 = bits(masterReg.Data, 6, 6) @[Exceptions.scala 86:59]
                node _T_33 = and(intrPendReg[6], _T_32) @[Exceptions.scala 86:43]
                intrPend[6] <= _T_33 @[Exceptions.scala 86:25]
                node _T_34 = bits(masterReg.Data, 7, 7) @[Exceptions.scala 86:59]
                node _T_35 = and(intrPendReg[7], _T_34) @[Exceptions.scala 86:43]
                intrPend[7] <= _T_35 @[Exceptions.scala 86:25]
                node _T_36 = bits(masterReg.Data, 8, 8) @[Exceptions.scala 86:59]
                node _T_37 = and(intrPendReg[8], _T_36) @[Exceptions.scala 86:43]
                intrPend[8] <= _T_37 @[Exceptions.scala 86:25]
                node _T_38 = bits(masterReg.Data, 9, 9) @[Exceptions.scala 86:59]
                node _T_39 = and(intrPendReg[9], _T_38) @[Exceptions.scala 86:43]
                intrPend[9] <= _T_39 @[Exceptions.scala 86:25]
                node _T_40 = bits(masterReg.Data, 10, 10) @[Exceptions.scala 86:59]
                node _T_41 = and(intrPendReg[10], _T_40) @[Exceptions.scala 86:43]
                intrPend[10] <= _T_41 @[Exceptions.scala 86:25]
                node _T_42 = bits(masterReg.Data, 11, 11) @[Exceptions.scala 86:59]
                node _T_43 = and(intrPendReg[11], _T_42) @[Exceptions.scala 86:43]
                intrPend[11] <= _T_43 @[Exceptions.scala 86:25]
                node _T_44 = bits(masterReg.Data, 12, 12) @[Exceptions.scala 86:59]
                node _T_45 = and(intrPendReg[12], _T_44) @[Exceptions.scala 86:43]
                intrPend[12] <= _T_45 @[Exceptions.scala 86:25]
                node _T_46 = bits(masterReg.Data, 13, 13) @[Exceptions.scala 86:59]
                node _T_47 = and(intrPendReg[13], _T_46) @[Exceptions.scala 86:43]
                intrPend[13] <= _T_47 @[Exceptions.scala 86:25]
                node _T_48 = bits(masterReg.Data, 14, 14) @[Exceptions.scala 86:59]
                node _T_49 = and(intrPendReg[14], _T_48) @[Exceptions.scala 86:43]
                intrPend[14] <= _T_49 @[Exceptions.scala 86:25]
                node _T_50 = bits(masterReg.Data, 15, 15) @[Exceptions.scala 86:59]
                node _T_51 = and(intrPendReg[15], _T_50) @[Exceptions.scala 86:43]
                intrPend[15] <= _T_51 @[Exceptions.scala 86:25]
                node _T_52 = bits(masterReg.Data, 16, 16) @[Exceptions.scala 86:59]
                node _T_53 = and(intrPendReg[16], _T_52) @[Exceptions.scala 86:43]
                intrPend[16] <= _T_53 @[Exceptions.scala 86:25]
                node _T_54 = bits(masterReg.Data, 17, 17) @[Exceptions.scala 86:59]
                node _T_55 = and(intrPendReg[17], _T_54) @[Exceptions.scala 86:43]
                intrPend[17] <= _T_55 @[Exceptions.scala 86:25]
                node _T_56 = bits(masterReg.Data, 18, 18) @[Exceptions.scala 86:59]
                node _T_57 = and(intrPendReg[18], _T_56) @[Exceptions.scala 86:43]
                intrPend[18] <= _T_57 @[Exceptions.scala 86:25]
                node _T_58 = bits(masterReg.Data, 19, 19) @[Exceptions.scala 86:59]
                node _T_59 = and(intrPendReg[19], _T_58) @[Exceptions.scala 86:43]
                intrPend[19] <= _T_59 @[Exceptions.scala 86:25]
                node _T_60 = bits(masterReg.Data, 20, 20) @[Exceptions.scala 86:59]
                node _T_61 = and(intrPendReg[20], _T_60) @[Exceptions.scala 86:43]
                intrPend[20] <= _T_61 @[Exceptions.scala 86:25]
                node _T_62 = bits(masterReg.Data, 21, 21) @[Exceptions.scala 86:59]
                node _T_63 = and(intrPendReg[21], _T_62) @[Exceptions.scala 86:43]
                intrPend[21] <= _T_63 @[Exceptions.scala 86:25]
                node _T_64 = bits(masterReg.Data, 22, 22) @[Exceptions.scala 86:59]
                node _T_65 = and(intrPendReg[22], _T_64) @[Exceptions.scala 86:43]
                intrPend[22] <= _T_65 @[Exceptions.scala 86:25]
                node _T_66 = bits(masterReg.Data, 23, 23) @[Exceptions.scala 86:59]
                node _T_67 = and(intrPendReg[23], _T_66) @[Exceptions.scala 86:43]
                intrPend[23] <= _T_67 @[Exceptions.scala 86:25]
                node _T_68 = bits(masterReg.Data, 24, 24) @[Exceptions.scala 86:59]
                node _T_69 = and(intrPendReg[24], _T_68) @[Exceptions.scala 86:43]
                intrPend[24] <= _T_69 @[Exceptions.scala 86:25]
                node _T_70 = bits(masterReg.Data, 25, 25) @[Exceptions.scala 86:59]
                node _T_71 = and(intrPendReg[25], _T_70) @[Exceptions.scala 86:43]
                intrPend[25] <= _T_71 @[Exceptions.scala 86:25]
                node _T_72 = bits(masterReg.Data, 26, 26) @[Exceptions.scala 86:59]
                node _T_73 = and(intrPendReg[26], _T_72) @[Exceptions.scala 86:43]
                intrPend[26] <= _T_73 @[Exceptions.scala 86:25]
                node _T_74 = bits(masterReg.Data, 27, 27) @[Exceptions.scala 86:59]
                node _T_75 = and(intrPendReg[27], _T_74) @[Exceptions.scala 86:43]
                intrPend[27] <= _T_75 @[Exceptions.scala 86:25]
                node _T_76 = bits(masterReg.Data, 28, 28) @[Exceptions.scala 86:59]
                node _T_77 = and(intrPendReg[28], _T_76) @[Exceptions.scala 86:43]
                intrPend[28] <= _T_77 @[Exceptions.scala 86:25]
                node _T_78 = bits(masterReg.Data, 29, 29) @[Exceptions.scala 86:59]
                node _T_79 = and(intrPendReg[29], _T_78) @[Exceptions.scala 86:43]
                intrPend[29] <= _T_79 @[Exceptions.scala 86:25]
                node _T_80 = bits(masterReg.Data, 30, 30) @[Exceptions.scala 86:59]
                node _T_81 = and(intrPendReg[30], _T_80) @[Exceptions.scala 86:43]
                intrPend[30] <= _T_81 @[Exceptions.scala 86:25]
                node _T_82 = bits(masterReg.Data, 31, 31) @[Exceptions.scala 86:59]
                node _T_83 = and(intrPendReg[31], _T_82) @[Exceptions.scala 86:43]
                intrPend[31] <= _T_83 @[Exceptions.scala 86:25]
                skip @[Exceptions.scala 33:22]
              else : @[Exceptions.scala 33:42]
                io.ocp.S.Resp <= UInt<2>("h03") @[Exceptions.scala 33:58]
                skip @[Exceptions.scala 33:42]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_84 = eq(UInt<3>("h04"), _T_15) @[Conditional.scala 37:30]
              when _T_84 : @[Conditional.scala 39:67]
                when superMode : @[Exceptions.scala 33:22]
                  io.ocp.S.Resp <= UInt<2>("h00") @[Exceptions.scala 92:25]
                  sleepReg <= UInt<1>("h01") @[Exceptions.scala 93:20]
                  skip @[Exceptions.scala 33:22]
                else : @[Exceptions.scala 33:42]
                  io.ocp.S.Resp <= UInt<2>("h03") @[Exceptions.scala 33:58]
                  skip @[Exceptions.scala 33:42]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_85 = eq(UInt<3>("h05"), _T_15) @[Conditional.scala 37:30]
                when _T_85 : @[Conditional.scala 39:67]
                  when superMode : @[Exceptions.scala 33:22]
                    node _T_86 = bits(masterReg.Data, 0, 0) @[Exceptions.scala 98:43]
                    io.invalDCache <= _T_86 @[Exceptions.scala 98:26]
                    node _T_87 = bits(masterReg.Data, 1, 1) @[Exceptions.scala 99:43]
                    io.invalICache <= _T_87 @[Exceptions.scala 99:26]
                    node _T_88 = bits(masterReg.Data, 31, 31) @[Exceptions.scala 100:56]
                    node _T_89 = xor(localModeReg, _T_88) @[Exceptions.scala 100:40]
                    localModeReg <= _T_89 @[Exceptions.scala 100:24]
                    skip @[Exceptions.scala 33:22]
                  else : @[Exceptions.scala 33:42]
                    io.ocp.S.Resp <= UInt<2>("h03") @[Exceptions.scala 33:58]
                    skip @[Exceptions.scala 33:42]
                  skip @[Conditional.scala 39:67]
      node _T_90 = bits(masterReg.Addr, 7, 7) @[Exceptions.scala 104:24]
      node _T_91 = eq(_T_90, UInt<1>("h01")) @[Exceptions.scala 104:43]
      when _T_91 : @[Exceptions.scala 104:59]
        when superMode : @[Exceptions.scala 33:22]
          node _T_92 = bits(masterReg.Addr, 6, 2) @[Exceptions.scala 106:27]
          infer mport MPORT_1 = vec[_T_92], clock @[Exceptions.scala 106:12]
          MPORT_1 <= masterReg.Data @[Exceptions.scala 106:50]
          node _T_93 = bits(masterReg.Addr, 6, 2) @[Exceptions.scala 107:30]
          infer mport MPORT_2 = vecDup[_T_93], clock @[Exceptions.scala 107:15]
          MPORT_2 <= masterReg.Data @[Exceptions.scala 107:53]
          skip @[Exceptions.scala 33:22]
        else : @[Exceptions.scala 33:42]
          io.ocp.S.Resp <= UInt<2>("h03") @[Exceptions.scala 33:58]
          skip @[Exceptions.scala 33:42]
        skip @[Exceptions.scala 104:59]
      skip @[Exceptions.scala 77:37]
    when io.memexc.call : @[Exceptions.scala 113:24]
      excPend[io.memexc.src] <= UInt<1>("h00") @[Exceptions.scala 114:28]
      intrPend[io.memexc.src] <= UInt<1>("h00") @[Exceptions.scala 115:29]
      when io.ena : @[Exceptions.scala 116:18]
        sourceReg <= io.memexc.src @[Exceptions.scala 117:17]
        node _T_94 = dshl(statusReg, UInt<2>("h02")) @[Exceptions.scala 119:31]
        node _T_95 = or(_T_94, UInt<2>("h02")) @[Exceptions.scala 119:43]
        statusReg <= _T_95 @[Exceptions.scala 119:17]
        skip @[Exceptions.scala 116:18]
      skip @[Exceptions.scala 113:24]
    when io.memexc.ret : @[Exceptions.scala 123:23]
      when io.ena : @[Exceptions.scala 124:18]
        node _T_96 = dshr(statusReg, UInt<2>("h02")) @[Exceptions.scala 126:30]
        statusReg <= _T_96 @[Exceptions.scala 126:17]
        skip @[Exceptions.scala 124:18]
      skip @[Exceptions.scala 123:23]
    reg REG : UInt<1>, clock @[Exceptions.scala 132:17]
    REG <= io.intrs[0] @[Exceptions.scala 132:17]
    when REG : @[Exceptions.scala 132:32]
      intrPend[16] <= UInt<1>("h01") @[Exceptions.scala 133:22]
      skip @[Exceptions.scala 132:32]
    reg REG_1 : UInt<1>, clock @[Exceptions.scala 132:17]
    REG_1 <= io.intrs[1] @[Exceptions.scala 132:17]
    when REG_1 : @[Exceptions.scala 132:32]
      intrPend[17] <= UInt<1>("h01") @[Exceptions.scala 133:22]
      skip @[Exceptions.scala 132:32]
    reg REG_2 : UInt<1>, clock @[Exceptions.scala 132:17]
    REG_2 <= io.intrs[2] @[Exceptions.scala 132:17]
    when REG_2 : @[Exceptions.scala 132:32]
      intrPend[18] <= UInt<1>("h01") @[Exceptions.scala 133:22]
      skip @[Exceptions.scala 132:32]
    reg REG_3 : UInt<1>, clock @[Exceptions.scala 132:17]
    REG_3 <= io.intrs[3] @[Exceptions.scala 132:17]
    when REG_3 : @[Exceptions.scala 132:32]
      intrPend[19] <= UInt<1>("h01") @[Exceptions.scala 133:22]
      skip @[Exceptions.scala 132:32]
    reg REG_4 : UInt<1>, clock @[Exceptions.scala 132:17]
    REG_4 <= io.intrs[4] @[Exceptions.scala 132:17]
    when REG_4 : @[Exceptions.scala 132:32]
      intrPend[20] <= UInt<1>("h01") @[Exceptions.scala 133:22]
      skip @[Exceptions.scala 132:32]
    reg REG_5 : UInt<1>, clock @[Exceptions.scala 132:17]
    REG_5 <= io.intrs[5] @[Exceptions.scala 132:17]
    when REG_5 : @[Exceptions.scala 132:32]
      intrPend[21] <= UInt<1>("h01") @[Exceptions.scala 133:22]
      skip @[Exceptions.scala 132:32]
    reg REG_6 : UInt<1>, clock @[Exceptions.scala 132:17]
    REG_6 <= io.intrs[6] @[Exceptions.scala 132:17]
    when REG_6 : @[Exceptions.scala 132:32]
      intrPend[22] <= UInt<1>("h01") @[Exceptions.scala 133:22]
      skip @[Exceptions.scala 132:32]
    reg REG_7 : UInt<1>, clock @[Exceptions.scala 132:17]
    REG_7 <= io.intrs[7] @[Exceptions.scala 132:17]
    when REG_7 : @[Exceptions.scala 132:32]
      intrPend[23] <= UInt<1>("h01") @[Exceptions.scala 133:22]
      skip @[Exceptions.scala 132:32]
    reg REG_8 : UInt<1>, clock @[Exceptions.scala 132:17]
    REG_8 <= io.intrs[8] @[Exceptions.scala 132:17]
    when REG_8 : @[Exceptions.scala 132:32]
      intrPend[24] <= UInt<1>("h01") @[Exceptions.scala 133:22]
      skip @[Exceptions.scala 132:32]
    reg REG_9 : UInt<1>, clock @[Exceptions.scala 132:17]
    REG_9 <= io.intrs[9] @[Exceptions.scala 132:17]
    when REG_9 : @[Exceptions.scala 132:32]
      intrPend[25] <= UInt<1>("h01") @[Exceptions.scala 133:22]
      skip @[Exceptions.scala 132:32]
    reg REG_10 : UInt<1>, clock @[Exceptions.scala 132:17]
    REG_10 <= io.intrs[10] @[Exceptions.scala 132:17]
    when REG_10 : @[Exceptions.scala 132:32]
      intrPend[26] <= UInt<1>("h01") @[Exceptions.scala 133:22]
      skip @[Exceptions.scala 132:32]
    reg REG_11 : UInt<1>, clock @[Exceptions.scala 132:17]
    REG_11 <= io.intrs[11] @[Exceptions.scala 132:17]
    when REG_11 : @[Exceptions.scala 132:32]
      intrPend[27] <= UInt<1>("h01") @[Exceptions.scala 133:22]
      skip @[Exceptions.scala 132:32]
    reg REG_12 : UInt<1>, clock @[Exceptions.scala 132:17]
    REG_12 <= io.intrs[12] @[Exceptions.scala 132:17]
    when REG_12 : @[Exceptions.scala 132:32]
      intrPend[28] <= UInt<1>("h01") @[Exceptions.scala 133:22]
      skip @[Exceptions.scala 132:32]
    reg REG_13 : UInt<1>, clock @[Exceptions.scala 132:17]
    REG_13 <= io.intrs[13] @[Exceptions.scala 132:17]
    when REG_13 : @[Exceptions.scala 132:32]
      intrPend[29] <= UInt<1>("h01") @[Exceptions.scala 133:22]
      skip @[Exceptions.scala 132:32]
    reg REG_14 : UInt<1>, clock @[Exceptions.scala 132:17]
    REG_14 <= io.intrs[14] @[Exceptions.scala 132:17]
    when REG_14 : @[Exceptions.scala 132:32]
      intrPend[30] <= UInt<1>("h01") @[Exceptions.scala 133:22]
      skip @[Exceptions.scala 132:32]
    reg REG_15 : UInt<1>, clock @[Exceptions.scala 132:17]
    REG_15 <= io.intrs[15] @[Exceptions.scala 132:17]
    when REG_15 : @[Exceptions.scala 132:32]
      intrPend[31] <= UInt<1>("h01") @[Exceptions.scala 133:22]
      skip @[Exceptions.scala 132:32]
    reg excBaseReg : UInt<30>, clock @[Exceptions.scala 138:23]
    reg excAddrReg : UInt<30>, clock @[Exceptions.scala 139:23]
    when io.memexc.exc : @[Exceptions.scala 140:23]
      excPend[io.memexc.src] <= UInt<1>("h01") @[Exceptions.scala 141:28]
      excBaseReg <= io.memexc.excBase @[Exceptions.scala 142:16]
      excAddrReg <= io.memexc.excAddr @[Exceptions.scala 143:16]
      skip @[Exceptions.scala 140:23]
    excPendReg <- excPend @[Exceptions.scala 147:14]
    intrPendReg <- intrPend @[Exceptions.scala 148:15]
    wire src : UInt<5> @[Exceptions.scala 151:17]
    src is invalid @[Exceptions.scala 151:17]
    reg srcReg : UInt, clock @[Exceptions.scala 152:23]
    srcReg <= src @[Exceptions.scala 152:23]
    src <= UInt<1>("h00") @[Exceptions.scala 153:7]
    node _T_97 = bits(maskReg, 31, 31) @[Exceptions.scala 155:33]
    node _T_98 = eq(_T_97, UInt<1>("h01")) @[Exceptions.scala 155:37]
    node _T_99 = and(intrPend[31], _T_98) @[Exceptions.scala 155:22]
    when _T_99 : @[Exceptions.scala 155:51]
      src <= UInt<5>("h01f") @[Exceptions.scala 155:57]
      skip @[Exceptions.scala 155:51]
    node _T_100 = bits(maskReg, 30, 30) @[Exceptions.scala 155:33]
    node _T_101 = eq(_T_100, UInt<1>("h01")) @[Exceptions.scala 155:37]
    node _T_102 = and(intrPend[30], _T_101) @[Exceptions.scala 155:22]
    when _T_102 : @[Exceptions.scala 155:51]
      src <= UInt<5>("h01e") @[Exceptions.scala 155:57]
      skip @[Exceptions.scala 155:51]
    node _T_103 = bits(maskReg, 29, 29) @[Exceptions.scala 155:33]
    node _T_104 = eq(_T_103, UInt<1>("h01")) @[Exceptions.scala 155:37]
    node _T_105 = and(intrPend[29], _T_104) @[Exceptions.scala 155:22]
    when _T_105 : @[Exceptions.scala 155:51]
      src <= UInt<5>("h01d") @[Exceptions.scala 155:57]
      skip @[Exceptions.scala 155:51]
    node _T_106 = bits(maskReg, 28, 28) @[Exceptions.scala 155:33]
    node _T_107 = eq(_T_106, UInt<1>("h01")) @[Exceptions.scala 155:37]
    node _T_108 = and(intrPend[28], _T_107) @[Exceptions.scala 155:22]
    when _T_108 : @[Exceptions.scala 155:51]
      src <= UInt<5>("h01c") @[Exceptions.scala 155:57]
      skip @[Exceptions.scala 155:51]
    node _T_109 = bits(maskReg, 27, 27) @[Exceptions.scala 155:33]
    node _T_110 = eq(_T_109, UInt<1>("h01")) @[Exceptions.scala 155:37]
    node _T_111 = and(intrPend[27], _T_110) @[Exceptions.scala 155:22]
    when _T_111 : @[Exceptions.scala 155:51]
      src <= UInt<5>("h01b") @[Exceptions.scala 155:57]
      skip @[Exceptions.scala 155:51]
    node _T_112 = bits(maskReg, 26, 26) @[Exceptions.scala 155:33]
    node _T_113 = eq(_T_112, UInt<1>("h01")) @[Exceptions.scala 155:37]
    node _T_114 = and(intrPend[26], _T_113) @[Exceptions.scala 155:22]
    when _T_114 : @[Exceptions.scala 155:51]
      src <= UInt<5>("h01a") @[Exceptions.scala 155:57]
      skip @[Exceptions.scala 155:51]
    node _T_115 = bits(maskReg, 25, 25) @[Exceptions.scala 155:33]
    node _T_116 = eq(_T_115, UInt<1>("h01")) @[Exceptions.scala 155:37]
    node _T_117 = and(intrPend[25], _T_116) @[Exceptions.scala 155:22]
    when _T_117 : @[Exceptions.scala 155:51]
      src <= UInt<5>("h019") @[Exceptions.scala 155:57]
      skip @[Exceptions.scala 155:51]
    node _T_118 = bits(maskReg, 24, 24) @[Exceptions.scala 155:33]
    node _T_119 = eq(_T_118, UInt<1>("h01")) @[Exceptions.scala 155:37]
    node _T_120 = and(intrPend[24], _T_119) @[Exceptions.scala 155:22]
    when _T_120 : @[Exceptions.scala 155:51]
      src <= UInt<5>("h018") @[Exceptions.scala 155:57]
      skip @[Exceptions.scala 155:51]
    node _T_121 = bits(maskReg, 23, 23) @[Exceptions.scala 155:33]
    node _T_122 = eq(_T_121, UInt<1>("h01")) @[Exceptions.scala 155:37]
    node _T_123 = and(intrPend[23], _T_122) @[Exceptions.scala 155:22]
    when _T_123 : @[Exceptions.scala 155:51]
      src <= UInt<5>("h017") @[Exceptions.scala 155:57]
      skip @[Exceptions.scala 155:51]
    node _T_124 = bits(maskReg, 22, 22) @[Exceptions.scala 155:33]
    node _T_125 = eq(_T_124, UInt<1>("h01")) @[Exceptions.scala 155:37]
    node _T_126 = and(intrPend[22], _T_125) @[Exceptions.scala 155:22]
    when _T_126 : @[Exceptions.scala 155:51]
      src <= UInt<5>("h016") @[Exceptions.scala 155:57]
      skip @[Exceptions.scala 155:51]
    node _T_127 = bits(maskReg, 21, 21) @[Exceptions.scala 155:33]
    node _T_128 = eq(_T_127, UInt<1>("h01")) @[Exceptions.scala 155:37]
    node _T_129 = and(intrPend[21], _T_128) @[Exceptions.scala 155:22]
    when _T_129 : @[Exceptions.scala 155:51]
      src <= UInt<5>("h015") @[Exceptions.scala 155:57]
      skip @[Exceptions.scala 155:51]
    node _T_130 = bits(maskReg, 20, 20) @[Exceptions.scala 155:33]
    node _T_131 = eq(_T_130, UInt<1>("h01")) @[Exceptions.scala 155:37]
    node _T_132 = and(intrPend[20], _T_131) @[Exceptions.scala 155:22]
    when _T_132 : @[Exceptions.scala 155:51]
      src <= UInt<5>("h014") @[Exceptions.scala 155:57]
      skip @[Exceptions.scala 155:51]
    node _T_133 = bits(maskReg, 19, 19) @[Exceptions.scala 155:33]
    node _T_134 = eq(_T_133, UInt<1>("h01")) @[Exceptions.scala 155:37]
    node _T_135 = and(intrPend[19], _T_134) @[Exceptions.scala 155:22]
    when _T_135 : @[Exceptions.scala 155:51]
      src <= UInt<5>("h013") @[Exceptions.scala 155:57]
      skip @[Exceptions.scala 155:51]
    node _T_136 = bits(maskReg, 18, 18) @[Exceptions.scala 155:33]
    node _T_137 = eq(_T_136, UInt<1>("h01")) @[Exceptions.scala 155:37]
    node _T_138 = and(intrPend[18], _T_137) @[Exceptions.scala 155:22]
    when _T_138 : @[Exceptions.scala 155:51]
      src <= UInt<5>("h012") @[Exceptions.scala 155:57]
      skip @[Exceptions.scala 155:51]
    node _T_139 = bits(maskReg, 17, 17) @[Exceptions.scala 155:33]
    node _T_140 = eq(_T_139, UInt<1>("h01")) @[Exceptions.scala 155:37]
    node _T_141 = and(intrPend[17], _T_140) @[Exceptions.scala 155:22]
    when _T_141 : @[Exceptions.scala 155:51]
      src <= UInt<5>("h011") @[Exceptions.scala 155:57]
      skip @[Exceptions.scala 155:51]
    node _T_142 = bits(maskReg, 16, 16) @[Exceptions.scala 155:33]
    node _T_143 = eq(_T_142, UInt<1>("h01")) @[Exceptions.scala 155:37]
    node _T_144 = and(intrPend[16], _T_143) @[Exceptions.scala 155:22]
    when _T_144 : @[Exceptions.scala 155:51]
      src <= UInt<5>("h010") @[Exceptions.scala 155:57]
      skip @[Exceptions.scala 155:51]
    node _T_145 = bits(maskReg, 15, 15) @[Exceptions.scala 155:33]
    node _T_146 = eq(_T_145, UInt<1>("h01")) @[Exceptions.scala 155:37]
    node _T_147 = and(intrPend[15], _T_146) @[Exceptions.scala 155:22]
    when _T_147 : @[Exceptions.scala 155:51]
      src <= UInt<4>("h0f") @[Exceptions.scala 155:57]
      skip @[Exceptions.scala 155:51]
    node _T_148 = bits(maskReg, 14, 14) @[Exceptions.scala 155:33]
    node _T_149 = eq(_T_148, UInt<1>("h01")) @[Exceptions.scala 155:37]
    node _T_150 = and(intrPend[14], _T_149) @[Exceptions.scala 155:22]
    when _T_150 : @[Exceptions.scala 155:51]
      src <= UInt<4>("h0e") @[Exceptions.scala 155:57]
      skip @[Exceptions.scala 155:51]
    node _T_151 = bits(maskReg, 13, 13) @[Exceptions.scala 155:33]
    node _T_152 = eq(_T_151, UInt<1>("h01")) @[Exceptions.scala 155:37]
    node _T_153 = and(intrPend[13], _T_152) @[Exceptions.scala 155:22]
    when _T_153 : @[Exceptions.scala 155:51]
      src <= UInt<4>("h0d") @[Exceptions.scala 155:57]
      skip @[Exceptions.scala 155:51]
    node _T_154 = bits(maskReg, 12, 12) @[Exceptions.scala 155:33]
    node _T_155 = eq(_T_154, UInt<1>("h01")) @[Exceptions.scala 155:37]
    node _T_156 = and(intrPend[12], _T_155) @[Exceptions.scala 155:22]
    when _T_156 : @[Exceptions.scala 155:51]
      src <= UInt<4>("h0c") @[Exceptions.scala 155:57]
      skip @[Exceptions.scala 155:51]
    node _T_157 = bits(maskReg, 11, 11) @[Exceptions.scala 155:33]
    node _T_158 = eq(_T_157, UInt<1>("h01")) @[Exceptions.scala 155:37]
    node _T_159 = and(intrPend[11], _T_158) @[Exceptions.scala 155:22]
    when _T_159 : @[Exceptions.scala 155:51]
      src <= UInt<4>("h0b") @[Exceptions.scala 155:57]
      skip @[Exceptions.scala 155:51]
    node _T_160 = bits(maskReg, 10, 10) @[Exceptions.scala 155:33]
    node _T_161 = eq(_T_160, UInt<1>("h01")) @[Exceptions.scala 155:37]
    node _T_162 = and(intrPend[10], _T_161) @[Exceptions.scala 155:22]
    when _T_162 : @[Exceptions.scala 155:51]
      src <= UInt<4>("h0a") @[Exceptions.scala 155:57]
      skip @[Exceptions.scala 155:51]
    node _T_163 = bits(maskReg, 9, 9) @[Exceptions.scala 155:33]
    node _T_164 = eq(_T_163, UInt<1>("h01")) @[Exceptions.scala 155:37]
    node _T_165 = and(intrPend[9], _T_164) @[Exceptions.scala 155:22]
    when _T_165 : @[Exceptions.scala 155:51]
      src <= UInt<4>("h09") @[Exceptions.scala 155:57]
      skip @[Exceptions.scala 155:51]
    node _T_166 = bits(maskReg, 8, 8) @[Exceptions.scala 155:33]
    node _T_167 = eq(_T_166, UInt<1>("h01")) @[Exceptions.scala 155:37]
    node _T_168 = and(intrPend[8], _T_167) @[Exceptions.scala 155:22]
    when _T_168 : @[Exceptions.scala 155:51]
      src <= UInt<4>("h08") @[Exceptions.scala 155:57]
      skip @[Exceptions.scala 155:51]
    node _T_169 = bits(maskReg, 7, 7) @[Exceptions.scala 155:33]
    node _T_170 = eq(_T_169, UInt<1>("h01")) @[Exceptions.scala 155:37]
    node _T_171 = and(intrPend[7], _T_170) @[Exceptions.scala 155:22]
    when _T_171 : @[Exceptions.scala 155:51]
      src <= UInt<3>("h07") @[Exceptions.scala 155:57]
      skip @[Exceptions.scala 155:51]
    node _T_172 = bits(maskReg, 6, 6) @[Exceptions.scala 155:33]
    node _T_173 = eq(_T_172, UInt<1>("h01")) @[Exceptions.scala 155:37]
    node _T_174 = and(intrPend[6], _T_173) @[Exceptions.scala 155:22]
    when _T_174 : @[Exceptions.scala 155:51]
      src <= UInt<3>("h06") @[Exceptions.scala 155:57]
      skip @[Exceptions.scala 155:51]
    node _T_175 = bits(maskReg, 5, 5) @[Exceptions.scala 155:33]
    node _T_176 = eq(_T_175, UInt<1>("h01")) @[Exceptions.scala 155:37]
    node _T_177 = and(intrPend[5], _T_176) @[Exceptions.scala 155:22]
    when _T_177 : @[Exceptions.scala 155:51]
      src <= UInt<3>("h05") @[Exceptions.scala 155:57]
      skip @[Exceptions.scala 155:51]
    node _T_178 = bits(maskReg, 4, 4) @[Exceptions.scala 155:33]
    node _T_179 = eq(_T_178, UInt<1>("h01")) @[Exceptions.scala 155:37]
    node _T_180 = and(intrPend[4], _T_179) @[Exceptions.scala 155:22]
    when _T_180 : @[Exceptions.scala 155:51]
      src <= UInt<3>("h04") @[Exceptions.scala 155:57]
      skip @[Exceptions.scala 155:51]
    node _T_181 = bits(maskReg, 3, 3) @[Exceptions.scala 155:33]
    node _T_182 = eq(_T_181, UInt<1>("h01")) @[Exceptions.scala 155:37]
    node _T_183 = and(intrPend[3], _T_182) @[Exceptions.scala 155:22]
    when _T_183 : @[Exceptions.scala 155:51]
      src <= UInt<2>("h03") @[Exceptions.scala 155:57]
      skip @[Exceptions.scala 155:51]
    node _T_184 = bits(maskReg, 2, 2) @[Exceptions.scala 155:33]
    node _T_185 = eq(_T_184, UInt<1>("h01")) @[Exceptions.scala 155:37]
    node _T_186 = and(intrPend[2], _T_185) @[Exceptions.scala 155:22]
    when _T_186 : @[Exceptions.scala 155:51]
      src <= UInt<2>("h02") @[Exceptions.scala 155:57]
      skip @[Exceptions.scala 155:51]
    node _T_187 = bits(maskReg, 1, 1) @[Exceptions.scala 155:33]
    node _T_188 = eq(_T_187, UInt<1>("h01")) @[Exceptions.scala 155:37]
    node _T_189 = and(intrPend[1], _T_188) @[Exceptions.scala 155:22]
    when _T_189 : @[Exceptions.scala 155:51]
      src <= UInt<1>("h01") @[Exceptions.scala 155:57]
      skip @[Exceptions.scala 155:51]
    node _T_190 = bits(maskReg, 0, 0) @[Exceptions.scala 155:33]
    node _T_191 = eq(_T_190, UInt<1>("h01")) @[Exceptions.scala 155:37]
    node _T_192 = and(intrPend[0], _T_191) @[Exceptions.scala 155:22]
    when _T_192 : @[Exceptions.scala 155:51]
      src <= UInt<1>("h00") @[Exceptions.scala 155:57]
      skip @[Exceptions.scala 155:51]
    when excPend[31] : @[Exceptions.scala 158:22]
      src <= UInt<5>("h01f") @[Exceptions.scala 158:28]
      skip @[Exceptions.scala 158:22]
    when excPend[30] : @[Exceptions.scala 158:22]
      src <= UInt<5>("h01e") @[Exceptions.scala 158:28]
      skip @[Exceptions.scala 158:22]
    when excPend[29] : @[Exceptions.scala 158:22]
      src <= UInt<5>("h01d") @[Exceptions.scala 158:28]
      skip @[Exceptions.scala 158:22]
    when excPend[28] : @[Exceptions.scala 158:22]
      src <= UInt<5>("h01c") @[Exceptions.scala 158:28]
      skip @[Exceptions.scala 158:22]
    when excPend[27] : @[Exceptions.scala 158:22]
      src <= UInt<5>("h01b") @[Exceptions.scala 158:28]
      skip @[Exceptions.scala 158:22]
    when excPend[26] : @[Exceptions.scala 158:22]
      src <= UInt<5>("h01a") @[Exceptions.scala 158:28]
      skip @[Exceptions.scala 158:22]
    when excPend[25] : @[Exceptions.scala 158:22]
      src <= UInt<5>("h019") @[Exceptions.scala 158:28]
      skip @[Exceptions.scala 158:22]
    when excPend[24] : @[Exceptions.scala 158:22]
      src <= UInt<5>("h018") @[Exceptions.scala 158:28]
      skip @[Exceptions.scala 158:22]
    when excPend[23] : @[Exceptions.scala 158:22]
      src <= UInt<5>("h017") @[Exceptions.scala 158:28]
      skip @[Exceptions.scala 158:22]
    when excPend[22] : @[Exceptions.scala 158:22]
      src <= UInt<5>("h016") @[Exceptions.scala 158:28]
      skip @[Exceptions.scala 158:22]
    when excPend[21] : @[Exceptions.scala 158:22]
      src <= UInt<5>("h015") @[Exceptions.scala 158:28]
      skip @[Exceptions.scala 158:22]
    when excPend[20] : @[Exceptions.scala 158:22]
      src <= UInt<5>("h014") @[Exceptions.scala 158:28]
      skip @[Exceptions.scala 158:22]
    when excPend[19] : @[Exceptions.scala 158:22]
      src <= UInt<5>("h013") @[Exceptions.scala 158:28]
      skip @[Exceptions.scala 158:22]
    when excPend[18] : @[Exceptions.scala 158:22]
      src <= UInt<5>("h012") @[Exceptions.scala 158:28]
      skip @[Exceptions.scala 158:22]
    when excPend[17] : @[Exceptions.scala 158:22]
      src <= UInt<5>("h011") @[Exceptions.scala 158:28]
      skip @[Exceptions.scala 158:22]
    when excPend[16] : @[Exceptions.scala 158:22]
      src <= UInt<5>("h010") @[Exceptions.scala 158:28]
      skip @[Exceptions.scala 158:22]
    when excPend[15] : @[Exceptions.scala 158:22]
      src <= UInt<4>("h0f") @[Exceptions.scala 158:28]
      skip @[Exceptions.scala 158:22]
    when excPend[14] : @[Exceptions.scala 158:22]
      src <= UInt<4>("h0e") @[Exceptions.scala 158:28]
      skip @[Exceptions.scala 158:22]
    when excPend[13] : @[Exceptions.scala 158:22]
      src <= UInt<4>("h0d") @[Exceptions.scala 158:28]
      skip @[Exceptions.scala 158:22]
    when excPend[12] : @[Exceptions.scala 158:22]
      src <= UInt<4>("h0c") @[Exceptions.scala 158:28]
      skip @[Exceptions.scala 158:22]
    when excPend[11] : @[Exceptions.scala 158:22]
      src <= UInt<4>("h0b") @[Exceptions.scala 158:28]
      skip @[Exceptions.scala 158:22]
    when excPend[10] : @[Exceptions.scala 158:22]
      src <= UInt<4>("h0a") @[Exceptions.scala 158:28]
      skip @[Exceptions.scala 158:22]
    when excPend[9] : @[Exceptions.scala 158:22]
      src <= UInt<4>("h09") @[Exceptions.scala 158:28]
      skip @[Exceptions.scala 158:22]
    when excPend[8] : @[Exceptions.scala 158:22]
      src <= UInt<4>("h08") @[Exceptions.scala 158:28]
      skip @[Exceptions.scala 158:22]
    when excPend[7] : @[Exceptions.scala 158:22]
      src <= UInt<3>("h07") @[Exceptions.scala 158:28]
      skip @[Exceptions.scala 158:22]
    when excPend[6] : @[Exceptions.scala 158:22]
      src <= UInt<3>("h06") @[Exceptions.scala 158:28]
      skip @[Exceptions.scala 158:22]
    when excPend[5] : @[Exceptions.scala 158:22]
      src <= UInt<3>("h05") @[Exceptions.scala 158:28]
      skip @[Exceptions.scala 158:22]
    when excPend[4] : @[Exceptions.scala 158:22]
      src <= UInt<3>("h04") @[Exceptions.scala 158:28]
      skip @[Exceptions.scala 158:22]
    when excPend[3] : @[Exceptions.scala 158:22]
      src <= UInt<2>("h03") @[Exceptions.scala 158:28]
      skip @[Exceptions.scala 158:22]
    when excPend[2] : @[Exceptions.scala 158:22]
      src <= UInt<2>("h02") @[Exceptions.scala 158:28]
      skip @[Exceptions.scala 158:22]
    when excPend[1] : @[Exceptions.scala 158:22]
      src <= UInt<1>("h01") @[Exceptions.scala 158:28]
      skip @[Exceptions.scala 158:22]
    when excPend[0] : @[Exceptions.scala 158:22]
      src <= UInt<1>("h00") @[Exceptions.scala 158:28]
      skip @[Exceptions.scala 158:22]
    node lo_lo_lo_lo_1 = cat(excPend[1], excPend[0]) @[Exceptions.scala 162:29]
    node lo_lo_lo_hi_1 = cat(excPend[3], excPend[2]) @[Exceptions.scala 162:29]
    node lo_lo_lo_1 = cat(lo_lo_lo_hi_1, lo_lo_lo_lo_1) @[Exceptions.scala 162:29]
    node lo_lo_hi_lo_1 = cat(excPend[5], excPend[4]) @[Exceptions.scala 162:29]
    node lo_lo_hi_hi_1 = cat(excPend[7], excPend[6]) @[Exceptions.scala 162:29]
    node lo_lo_hi_1 = cat(lo_lo_hi_hi_1, lo_lo_hi_lo_1) @[Exceptions.scala 162:29]
    node lo_lo_1 = cat(lo_lo_hi_1, lo_lo_lo_1) @[Exceptions.scala 162:29]
    node lo_hi_lo_lo_1 = cat(excPend[9], excPend[8]) @[Exceptions.scala 162:29]
    node lo_hi_lo_hi_1 = cat(excPend[11], excPend[10]) @[Exceptions.scala 162:29]
    node lo_hi_lo_1 = cat(lo_hi_lo_hi_1, lo_hi_lo_lo_1) @[Exceptions.scala 162:29]
    node lo_hi_hi_lo_1 = cat(excPend[13], excPend[12]) @[Exceptions.scala 162:29]
    node lo_hi_hi_hi_1 = cat(excPend[15], excPend[14]) @[Exceptions.scala 162:29]
    node lo_hi_hi_1 = cat(lo_hi_hi_hi_1, lo_hi_hi_lo_1) @[Exceptions.scala 162:29]
    node lo_hi_1 = cat(lo_hi_hi_1, lo_hi_lo_1) @[Exceptions.scala 162:29]
    node lo_1 = cat(lo_hi_1, lo_lo_1) @[Exceptions.scala 162:29]
    node hi_lo_lo_lo_1 = cat(excPend[17], excPend[16]) @[Exceptions.scala 162:29]
    node hi_lo_lo_hi_1 = cat(excPend[19], excPend[18]) @[Exceptions.scala 162:29]
    node hi_lo_lo_1 = cat(hi_lo_lo_hi_1, hi_lo_lo_lo_1) @[Exceptions.scala 162:29]
    node hi_lo_hi_lo_1 = cat(excPend[21], excPend[20]) @[Exceptions.scala 162:29]
    node hi_lo_hi_hi_1 = cat(excPend[23], excPend[22]) @[Exceptions.scala 162:29]
    node hi_lo_hi_1 = cat(hi_lo_hi_hi_1, hi_lo_hi_lo_1) @[Exceptions.scala 162:29]
    node hi_lo_1 = cat(hi_lo_hi_1, hi_lo_lo_1) @[Exceptions.scala 162:29]
    node hi_hi_lo_lo_1 = cat(excPend[25], excPend[24]) @[Exceptions.scala 162:29]
    node hi_hi_lo_hi_1 = cat(excPend[27], excPend[26]) @[Exceptions.scala 162:29]
    node hi_hi_lo_1 = cat(hi_hi_lo_hi_1, hi_hi_lo_lo_1) @[Exceptions.scala 162:29]
    node hi_hi_hi_lo_1 = cat(excPend[29], excPend[28]) @[Exceptions.scala 162:29]
    node hi_hi_hi_hi_1 = cat(excPend[31], excPend[30]) @[Exceptions.scala 162:29]
    node hi_hi_hi_1 = cat(hi_hi_hi_hi_1, hi_hi_hi_lo_1) @[Exceptions.scala 162:29]
    node hi_hi_1 = cat(hi_hi_hi_1, hi_hi_lo_1) @[Exceptions.scala 162:29]
    node hi_1 = cat(hi_hi_1, hi_lo_1) @[Exceptions.scala 162:29]
    node _T_193 = cat(hi_1, lo_1) @[Exceptions.scala 162:29]
    node _T_194 = neq(_T_193, UInt<1>("h00")) @[Exceptions.scala 162:36]
    reg exc : UInt<1>, clock @[Exceptions.scala 162:20]
    exc <= _T_194 @[Exceptions.scala 162:20]
    node lo_lo_lo_lo_2 = cat(intrPend[1], intrPend[0]) @[Exceptions.scala 163:32]
    node lo_lo_lo_hi_2 = cat(intrPend[3], intrPend[2]) @[Exceptions.scala 163:32]
    node lo_lo_lo_2 = cat(lo_lo_lo_hi_2, lo_lo_lo_lo_2) @[Exceptions.scala 163:32]
    node lo_lo_hi_lo_2 = cat(intrPend[5], intrPend[4]) @[Exceptions.scala 163:32]
    node lo_lo_hi_hi_2 = cat(intrPend[7], intrPend[6]) @[Exceptions.scala 163:32]
    node lo_lo_hi_2 = cat(lo_lo_hi_hi_2, lo_lo_hi_lo_2) @[Exceptions.scala 163:32]
    node lo_lo_2 = cat(lo_lo_hi_2, lo_lo_lo_2) @[Exceptions.scala 163:32]
    node lo_hi_lo_lo_2 = cat(intrPend[9], intrPend[8]) @[Exceptions.scala 163:32]
    node lo_hi_lo_hi_2 = cat(intrPend[11], intrPend[10]) @[Exceptions.scala 163:32]
    node lo_hi_lo_2 = cat(lo_hi_lo_hi_2, lo_hi_lo_lo_2) @[Exceptions.scala 163:32]
    node lo_hi_hi_lo_2 = cat(intrPend[13], intrPend[12]) @[Exceptions.scala 163:32]
    node lo_hi_hi_hi_2 = cat(intrPend[15], intrPend[14]) @[Exceptions.scala 163:32]
    node lo_hi_hi_2 = cat(lo_hi_hi_hi_2, lo_hi_hi_lo_2) @[Exceptions.scala 163:32]
    node lo_hi_2 = cat(lo_hi_hi_2, lo_hi_lo_2) @[Exceptions.scala 163:32]
    node lo_2 = cat(lo_hi_2, lo_lo_2) @[Exceptions.scala 163:32]
    node hi_lo_lo_lo_2 = cat(intrPend[17], intrPend[16]) @[Exceptions.scala 163:32]
    node hi_lo_lo_hi_2 = cat(intrPend[19], intrPend[18]) @[Exceptions.scala 163:32]
    node hi_lo_lo_2 = cat(hi_lo_lo_hi_2, hi_lo_lo_lo_2) @[Exceptions.scala 163:32]
    node hi_lo_hi_lo_2 = cat(intrPend[21], intrPend[20]) @[Exceptions.scala 163:32]
    node hi_lo_hi_hi_2 = cat(intrPend[23], intrPend[22]) @[Exceptions.scala 163:32]
    node hi_lo_hi_2 = cat(hi_lo_hi_hi_2, hi_lo_hi_lo_2) @[Exceptions.scala 163:32]
    node hi_lo_2 = cat(hi_lo_hi_2, hi_lo_lo_2) @[Exceptions.scala 163:32]
    node hi_hi_lo_lo_2 = cat(intrPend[25], intrPend[24]) @[Exceptions.scala 163:32]
    node hi_hi_lo_hi_2 = cat(intrPend[27], intrPend[26]) @[Exceptions.scala 163:32]
    node hi_hi_lo_2 = cat(hi_hi_lo_hi_2, hi_hi_lo_lo_2) @[Exceptions.scala 163:32]
    node hi_hi_hi_lo_2 = cat(intrPend[29], intrPend[28]) @[Exceptions.scala 163:32]
    node hi_hi_hi_hi_2 = cat(intrPend[31], intrPend[30]) @[Exceptions.scala 163:32]
    node hi_hi_hi_2 = cat(hi_hi_hi_hi_2, hi_hi_hi_lo_2) @[Exceptions.scala 163:32]
    node hi_hi_2 = cat(hi_hi_hi_2, hi_hi_lo_2) @[Exceptions.scala 163:32]
    node hi_2 = cat(hi_hi_2, hi_lo_2) @[Exceptions.scala 163:32]
    node _T_195 = cat(hi_2, lo_2) @[Exceptions.scala 163:32]
    node _T_196 = and(_T_195, maskReg) @[Exceptions.scala 163:39]
    node _T_197 = neq(_T_196, UInt<1>("h00")) @[Exceptions.scala 163:50]
    reg intr : UInt<1>, clock @[Exceptions.scala 163:21]
    intr <= _T_197 @[Exceptions.scala 163:21]
    io.excdec.exc <= exc @[Exceptions.scala 165:19]
    node _T_198 = and(intr, intrEna) @[Exceptions.scala 166:27]
    io.excdec.intr <= _T_198 @[Exceptions.scala 166:19]
    node _T_199 = or(srcReg, UInt<5>("h00")) @[Exceptions.scala 167:28]
    node _T_200 = bits(_T_199, 4, 0) @[Exceptions.scala 167:28]
    infer mport MPORT_3 = vecDup[_T_200], clock @[Exceptions.scala 167:28]
    io.excdec.addr <= MPORT_3 @[Exceptions.scala 167:19]
    io.excdec.src <= srcReg @[Exceptions.scala 168:19]
    io.excdec.local <= localModeReg @[Exceptions.scala 169:19]
    io.excdec.excBase <= excBaseReg @[Exceptions.scala 171:21]
    io.excdec.excAddr <= excAddrReg @[Exceptions.scala 172:21]
    node _T_201 = eq(exc, UInt<1>("h01")) @[Exceptions.scala 175:26]
    node _T_202 = and(intr, intrEna) @[Exceptions.scala 175:47]
    node _T_203 = or(_T_201, _T_202) @[Exceptions.scala 175:38]
    node _T_204 = and(sleepReg, _T_203) @[Exceptions.scala 175:18]
    when _T_204 : @[Exceptions.scala 175:61]
      io.ocp.S.Resp <= UInt<2>("h01") @[Exceptions.scala 176:19]
      sleepReg <= UInt<1>("h00") @[Exceptions.scala 177:14]
      skip @[Exceptions.scala 175:61]
    
  module MemBlock_4 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rdAddr : UInt<8>, rdData : UInt<20>, flip wrAddr : UInt<8>, flip wrEna : UInt<1>, flip wrData : UInt<20>}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem mem : UInt<20>[256]
    node _T = eq(io.wrEna, UInt<1>("h01")) @[MemBlock.scala 54:17]
    when _T : @[MemBlock.scala 54:30]
      infer mport MPORT = mem[io.wrAddr], clock @[MemBlock.scala 55:8]
      MPORT <= io.wrData @[MemBlock.scala 55:20]
      skip @[MemBlock.scala 54:30]
    reg rdAddrReg : UInt, clock @[MemBlock.scala 59:22]
    rdAddrReg <= io.rdAddr @[MemBlock.scala 59:22]
    node _T_1 = or(rdAddrReg, UInt<8>("h00")) @[MemBlock.scala 60:19]
    node _T_2 = bits(_T_1, 7, 0) @[MemBlock.scala 60:19]
    infer mport MPORT_1 = mem[_T_2], clock @[MemBlock.scala 60:19]
    io.rdData <= MPORT_1 @[MemBlock.scala 60:13]
    reg REG : UInt, clock @[MemBlock.scala 64:14]
    REG <= io.wrEna @[MemBlock.scala 64:14]
    node _T_3 = eq(REG, UInt<1>("h01")) @[MemBlock.scala 64:32]
    reg REG_1 : UInt, clock @[MemBlock.scala 65:14]
    REG_1 <= io.wrAddr @[MemBlock.scala 65:14]
    node _T_4 = eq(REG_1, rdAddrReg) @[MemBlock.scala 65:33]
    node _T_5 = and(_T_3, _T_4) @[MemBlock.scala 64:44]
    when _T_5 : @[MemBlock.scala 65:48]
      reg REG_2 : UInt, clock @[MemBlock.scala 66:29]
      REG_2 <= io.wrData @[MemBlock.scala 66:29]
      io.rdData <= REG_2 @[MemBlock.scala 66:23]
      skip @[MemBlock.scala 65:48]
    
  module MemBlock_5 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rdAddr : UInt<10>, rdData : UInt<8>, flip wrAddr : UInt<10>, flip wrEna : UInt<1>, flip wrData : UInt<8>}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem mem : UInt<8>[1024]
    node _T = eq(io.wrEna, UInt<1>("h01")) @[MemBlock.scala 54:17]
    when _T : @[MemBlock.scala 54:30]
      infer mport MPORT = mem[io.wrAddr], clock @[MemBlock.scala 55:8]
      MPORT <= io.wrData @[MemBlock.scala 55:20]
      skip @[MemBlock.scala 54:30]
    reg rdAddrReg : UInt, clock @[MemBlock.scala 59:22]
    rdAddrReg <= io.rdAddr @[MemBlock.scala 59:22]
    node _T_1 = or(rdAddrReg, UInt<10>("h00")) @[MemBlock.scala 60:19]
    node _T_2 = bits(_T_1, 9, 0) @[MemBlock.scala 60:19]
    infer mport MPORT_1 = mem[_T_2], clock @[MemBlock.scala 60:19]
    io.rdData <= MPORT_1 @[MemBlock.scala 60:13]
    reg REG : UInt, clock @[MemBlock.scala 64:14]
    REG <= io.wrEna @[MemBlock.scala 64:14]
    node _T_3 = eq(REG, UInt<1>("h01")) @[MemBlock.scala 64:32]
    reg REG_1 : UInt, clock @[MemBlock.scala 65:14]
    REG_1 <= io.wrAddr @[MemBlock.scala 65:14]
    node _T_4 = eq(REG_1, rdAddrReg) @[MemBlock.scala 65:33]
    node _T_5 = and(_T_3, _T_4) @[MemBlock.scala 64:44]
    when _T_5 : @[MemBlock.scala 65:48]
      reg REG_2 : UInt, clock @[MemBlock.scala 66:29]
      REG_2 <= io.wrData @[MemBlock.scala 66:29]
      io.rdData <= REG_2 @[MemBlock.scala 66:23]
      skip @[MemBlock.scala 65:48]
    
  module MemBlock_6 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rdAddr : UInt<10>, rdData : UInt<8>, flip wrAddr : UInt<10>, flip wrEna : UInt<1>, flip wrData : UInt<8>}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem mem : UInt<8>[1024]
    node _T = eq(io.wrEna, UInt<1>("h01")) @[MemBlock.scala 54:17]
    when _T : @[MemBlock.scala 54:30]
      infer mport MPORT = mem[io.wrAddr], clock @[MemBlock.scala 55:8]
      MPORT <= io.wrData @[MemBlock.scala 55:20]
      skip @[MemBlock.scala 54:30]
    reg rdAddrReg : UInt, clock @[MemBlock.scala 59:22]
    rdAddrReg <= io.rdAddr @[MemBlock.scala 59:22]
    node _T_1 = or(rdAddrReg, UInt<10>("h00")) @[MemBlock.scala 60:19]
    node _T_2 = bits(_T_1, 9, 0) @[MemBlock.scala 60:19]
    infer mport MPORT_1 = mem[_T_2], clock @[MemBlock.scala 60:19]
    io.rdData <= MPORT_1 @[MemBlock.scala 60:13]
    reg REG : UInt, clock @[MemBlock.scala 64:14]
    REG <= io.wrEna @[MemBlock.scala 64:14]
    node _T_3 = eq(REG, UInt<1>("h01")) @[MemBlock.scala 64:32]
    reg REG_1 : UInt, clock @[MemBlock.scala 65:14]
    REG_1 <= io.wrAddr @[MemBlock.scala 65:14]
    node _T_4 = eq(REG_1, rdAddrReg) @[MemBlock.scala 65:33]
    node _T_5 = and(_T_3, _T_4) @[MemBlock.scala 64:44]
    when _T_5 : @[MemBlock.scala 65:48]
      reg REG_2 : UInt, clock @[MemBlock.scala 66:29]
      REG_2 <= io.wrData @[MemBlock.scala 66:29]
      io.rdData <= REG_2 @[MemBlock.scala 66:23]
      skip @[MemBlock.scala 65:48]
    
  module MemBlock_7 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rdAddr : UInt<10>, rdData : UInt<8>, flip wrAddr : UInt<10>, flip wrEna : UInt<1>, flip wrData : UInt<8>}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem mem : UInt<8>[1024]
    node _T = eq(io.wrEna, UInt<1>("h01")) @[MemBlock.scala 54:17]
    when _T : @[MemBlock.scala 54:30]
      infer mport MPORT = mem[io.wrAddr], clock @[MemBlock.scala 55:8]
      MPORT <= io.wrData @[MemBlock.scala 55:20]
      skip @[MemBlock.scala 54:30]
    reg rdAddrReg : UInt, clock @[MemBlock.scala 59:22]
    rdAddrReg <= io.rdAddr @[MemBlock.scala 59:22]
    node _T_1 = or(rdAddrReg, UInt<10>("h00")) @[MemBlock.scala 60:19]
    node _T_2 = bits(_T_1, 9, 0) @[MemBlock.scala 60:19]
    infer mport MPORT_1 = mem[_T_2], clock @[MemBlock.scala 60:19]
    io.rdData <= MPORT_1 @[MemBlock.scala 60:13]
    reg REG : UInt, clock @[MemBlock.scala 64:14]
    REG <= io.wrEna @[MemBlock.scala 64:14]
    node _T_3 = eq(REG, UInt<1>("h01")) @[MemBlock.scala 64:32]
    reg REG_1 : UInt, clock @[MemBlock.scala 65:14]
    REG_1 <= io.wrAddr @[MemBlock.scala 65:14]
    node _T_4 = eq(REG_1, rdAddrReg) @[MemBlock.scala 65:33]
    node _T_5 = and(_T_3, _T_4) @[MemBlock.scala 64:44]
    when _T_5 : @[MemBlock.scala 65:48]
      reg REG_2 : UInt, clock @[MemBlock.scala 66:29]
      REG_2 <= io.wrData @[MemBlock.scala 66:29]
      io.rdData <= REG_2 @[MemBlock.scala 66:23]
      skip @[MemBlock.scala 65:48]
    
  module MemBlock_8 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rdAddr : UInt<10>, rdData : UInt<8>, flip wrAddr : UInt<10>, flip wrEna : UInt<1>, flip wrData : UInt<8>}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem mem : UInt<8>[1024]
    node _T = eq(io.wrEna, UInt<1>("h01")) @[MemBlock.scala 54:17]
    when _T : @[MemBlock.scala 54:30]
      infer mport MPORT = mem[io.wrAddr], clock @[MemBlock.scala 55:8]
      MPORT <= io.wrData @[MemBlock.scala 55:20]
      skip @[MemBlock.scala 54:30]
    reg rdAddrReg : UInt, clock @[MemBlock.scala 59:22]
    rdAddrReg <= io.rdAddr @[MemBlock.scala 59:22]
    node _T_1 = or(rdAddrReg, UInt<10>("h00")) @[MemBlock.scala 60:19]
    node _T_2 = bits(_T_1, 9, 0) @[MemBlock.scala 60:19]
    infer mport MPORT_1 = mem[_T_2], clock @[MemBlock.scala 60:19]
    io.rdData <= MPORT_1 @[MemBlock.scala 60:13]
    reg REG : UInt, clock @[MemBlock.scala 64:14]
    REG <= io.wrEna @[MemBlock.scala 64:14]
    node _T_3 = eq(REG, UInt<1>("h01")) @[MemBlock.scala 64:32]
    reg REG_1 : UInt, clock @[MemBlock.scala 65:14]
    REG_1 <= io.wrAddr @[MemBlock.scala 65:14]
    node _T_4 = eq(REG_1, rdAddrReg) @[MemBlock.scala 65:33]
    node _T_5 = and(_T_3, _T_4) @[MemBlock.scala 64:44]
    when _T_5 : @[MemBlock.scala 65:48]
      reg REG_2 : UInt, clock @[MemBlock.scala 66:29]
      REG_2 <= io.wrData @[MemBlock.scala 66:29]
      io.rdData <= REG_2 @[MemBlock.scala 66:23]
      skip @[MemBlock.scala 65:48]
    
  module DirectMappedCache : 
    input clock : Clock
    input reset : UInt<1>
    output io : {master : {flip M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, ByteEn : UInt<4>}, S : {Resp : UInt<2>, Data : UInt<32>}}, slave : {M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, DataValid : UInt<1>, DataByteEn : UInt<4>}, flip S : {Resp : UInt<2>, Data : UInt<32>, CmdAccept : UInt<1>, DataAccept : UInt<1>}}, flip invalidate : UInt<1>, perf : {hit : UInt<1>, miss : UInt<1>}}
    
    clock is invalid
    reset is invalid
    io is invalid
    io.perf.hit <= UInt<1>("h00") @[DirectMappedCache.scala 27:15]
    io.perf.miss <= UInt<1>("h00") @[DirectMappedCache.scala 28:16]
    reg masterReg : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, ByteEn : UInt<4>}, clock @[DirectMappedCache.scala 37:22]
    masterReg <- io.master.M @[DirectMappedCache.scala 38:13]
    inst tagMem of MemBlock_4 @[MemBlock.scala 15:11]
    tagMem.io is invalid
    tagMem.clock <= clock
    tagMem.reset <= reset
    wire _WIRE : UInt<1>[256] @[compatibility.scala 127:12]
    _WIRE is invalid @[compatibility.scala 127:12]
    _WIRE[0] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[1] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[2] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[3] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[4] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[5] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[6] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[7] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[8] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[9] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[10] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[11] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[12] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[13] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[14] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[15] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[16] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[17] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[18] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[19] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[20] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[21] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[22] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[23] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[24] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[25] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[26] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[27] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[28] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[29] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[30] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[31] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[32] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[33] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[34] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[35] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[36] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[37] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[38] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[39] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[40] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[41] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[42] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[43] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[44] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[45] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[46] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[47] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[48] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[49] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[50] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[51] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[52] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[53] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[54] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[55] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[56] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[57] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[58] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[59] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[60] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[61] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[62] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[63] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[64] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[65] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[66] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[67] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[68] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[69] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[70] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[71] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[72] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[73] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[74] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[75] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[76] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[77] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[78] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[79] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[80] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[81] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[82] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[83] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[84] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[85] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[86] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[87] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[88] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[89] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[90] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[91] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[92] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[93] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[94] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[95] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[96] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[97] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[98] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[99] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[100] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[101] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[102] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[103] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[104] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[105] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[106] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[107] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[108] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[109] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[110] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[111] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[112] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[113] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[114] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[115] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[116] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[117] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[118] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[119] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[120] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[121] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[122] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[123] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[124] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[125] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[126] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[127] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[128] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[129] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[130] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[131] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[132] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[133] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[134] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[135] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[136] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[137] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[138] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[139] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[140] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[141] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[142] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[143] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[144] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[145] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[146] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[147] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[148] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[149] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[150] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[151] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[152] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[153] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[154] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[155] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[156] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[157] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[158] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[159] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[160] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[161] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[162] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[163] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[164] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[165] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[166] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[167] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[168] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[169] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[170] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[171] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[172] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[173] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[174] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[175] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[176] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[177] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[178] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[179] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[180] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[181] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[182] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[183] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[184] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[185] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[186] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[187] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[188] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[189] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[190] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[191] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[192] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[193] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[194] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[195] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[196] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[197] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[198] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[199] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[200] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[201] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[202] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[203] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[204] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[205] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[206] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[207] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[208] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[209] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[210] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[211] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[212] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[213] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[214] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[215] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[216] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[217] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[218] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[219] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[220] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[221] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[222] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[223] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[224] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[225] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[226] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[227] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[228] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[229] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[230] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[231] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[232] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[233] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[234] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[235] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[236] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[237] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[238] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[239] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[240] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[241] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[242] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[243] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[244] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[245] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[246] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[247] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[248] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[249] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[250] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[251] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[252] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[253] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[254] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[255] <= UInt<1>("h00") @[compatibility.scala 127:12]
    reg tagVMem : UInt<1>[256], clock with : (reset => (reset, _WIRE)) @[DirectMappedCache.scala 42:24]
    inst MemBlock of MemBlock_5 @[MemBlock.scala 15:11]
    MemBlock.io is invalid
    MemBlock.clock <= clock
    MemBlock.reset <= reset
    inst MemBlock_1 of MemBlock_6 @[MemBlock.scala 15:11]
    MemBlock_1.io is invalid
    MemBlock_1.clock <= clock
    MemBlock_1.reset <= reset
    inst MemBlock_2 of MemBlock_7 @[MemBlock.scala 15:11]
    MemBlock_2.io is invalid
    MemBlock_2.clock <= clock
    MemBlock_2.reset <= reset
    inst MemBlock_3 of MemBlock_8 @[MemBlock.scala 15:11]
    MemBlock_3.io is invalid
    MemBlock_3.clock <= clock
    MemBlock_3.reset <= reset
    node _T = bits(io.master.M.Addr, 11, 4) @[DirectMappedCache.scala 48:39]
    tagMem.io.rdAddr <= _T @[MemBlock.scala 44:12]
    node _T_1 = bits(io.master.M.Addr, 11, 4) @[DirectMappedCache.scala 49:49]
    reg tagV : UInt<1>, clock @[DirectMappedCache.scala 49:17]
    tagV <= tagVMem[_T_1] @[DirectMappedCache.scala 49:17]
    node _T_2 = bits(masterReg.Addr, 31, 12) @[DirectMappedCache.scala 50:52]
    node _T_3 = eq(tagMem.io.rdData, _T_2) @[DirectMappedCache.scala 50:30]
    node tagValid = and(tagV, _T_3) @[DirectMappedCache.scala 50:23]
    reg fillReg : UInt<1>, clock @[DirectMappedCache.scala 52:20]
    reg wrAddrReg : UInt<10>, clock @[DirectMappedCache.scala 54:22]
    reg wrDataReg : UInt<32>, clock @[DirectMappedCache.scala 55:22]
    node _T_4 = bits(io.master.M.Addr, 11, 2) @[DirectMappedCache.scala 57:32]
    wrAddrReg <= _T_4 @[DirectMappedCache.scala 57:13]
    wrDataReg <= io.master.M.Data @[DirectMappedCache.scala 58:13]
    node _T_5 = eq(masterReg.Cmd, UInt<3>("h01")) @[DirectMappedCache.scala 61:33]
    node stmsk = mux(_T_5, masterReg.ByteEn, UInt<4>("h00")) @[DirectMappedCache.scala 61:18]
    node _T_6 = bits(stmsk, 0, 0) @[DirectMappedCache.scala 63:45]
    node _T_7 = and(tagValid, _T_6) @[DirectMappedCache.scala 63:37]
    node _T_8 = or(fillReg, _T_7) @[DirectMappedCache.scala 63:24]
    node _T_9 = bits(wrDataReg, 7, 0) @[DirectMappedCache.scala 64:25]
    MemBlock.io.wrAddr <= wrAddrReg @[MemBlock.scala 34:12]
    MemBlock.io.wrEna <= _T_8 @[MemBlock.scala 35:11]
    MemBlock.io.wrData <= _T_9 @[MemBlock.scala 36:12]
    node _T_10 = bits(stmsk, 1, 1) @[DirectMappedCache.scala 63:45]
    node _T_11 = and(tagValid, _T_10) @[DirectMappedCache.scala 63:37]
    node _T_12 = or(fillReg, _T_11) @[DirectMappedCache.scala 63:24]
    node _T_13 = bits(wrDataReg, 15, 8) @[DirectMappedCache.scala 64:25]
    MemBlock_1.io.wrAddr <= wrAddrReg @[MemBlock.scala 34:12]
    MemBlock_1.io.wrEna <= _T_12 @[MemBlock.scala 35:11]
    MemBlock_1.io.wrData <= _T_13 @[MemBlock.scala 36:12]
    node _T_14 = bits(stmsk, 2, 2) @[DirectMappedCache.scala 63:45]
    node _T_15 = and(tagValid, _T_14) @[DirectMappedCache.scala 63:37]
    node _T_16 = or(fillReg, _T_15) @[DirectMappedCache.scala 63:24]
    node _T_17 = bits(wrDataReg, 23, 16) @[DirectMappedCache.scala 64:25]
    MemBlock_2.io.wrAddr <= wrAddrReg @[MemBlock.scala 34:12]
    MemBlock_2.io.wrEna <= _T_16 @[MemBlock.scala 35:11]
    MemBlock_2.io.wrData <= _T_17 @[MemBlock.scala 36:12]
    node _T_18 = bits(stmsk, 3, 3) @[DirectMappedCache.scala 63:45]
    node _T_19 = and(tagValid, _T_18) @[DirectMappedCache.scala 63:37]
    node _T_20 = or(fillReg, _T_19) @[DirectMappedCache.scala 63:24]
    node _T_21 = bits(wrDataReg, 31, 24) @[DirectMappedCache.scala 64:25]
    MemBlock_3.io.wrAddr <= wrAddrReg @[MemBlock.scala 34:12]
    MemBlock_3.io.wrEna <= _T_20 @[MemBlock.scala 35:11]
    MemBlock_3.io.wrData <= _T_21 @[MemBlock.scala 36:12]
    node _T_22 = bits(io.master.M.Addr, 11, 2) @[DirectMappedCache.scala 68:42]
    MemBlock.io.rdAddr <= _T_22 @[MemBlock.scala 44:12]
    node _T_23 = bits(io.master.M.Addr, 11, 2) @[DirectMappedCache.scala 68:42]
    MemBlock_1.io.rdAddr <= _T_23 @[MemBlock.scala 44:12]
    node _T_24 = bits(io.master.M.Addr, 11, 2) @[DirectMappedCache.scala 68:42]
    MemBlock_2.io.rdAddr <= _T_24 @[MemBlock.scala 44:12]
    node _T_25 = bits(io.master.M.Addr, 11, 2) @[DirectMappedCache.scala 68:42]
    MemBlock_3.io.rdAddr <= _T_25 @[MemBlock.scala 44:12]
    node _T_26 = cat(MemBlock_1.io.rdData, MemBlock.io.rdData) @[DirectMappedCache.scala 68:84]
    node _T_27 = cat(MemBlock_2.io.rdData, _T_26) @[DirectMappedCache.scala 68:84]
    node rdData = cat(MemBlock_3.io.rdData, _T_27) @[DirectMappedCache.scala 68:84]
    io.master.S.Data <= rdData @[DirectMappedCache.scala 71:20]
    node _T_28 = eq(masterReg.Cmd, UInt<3>("h02")) @[DirectMappedCache.scala 72:53]
    node _T_29 = and(tagValid, _T_28) @[DirectMappedCache.scala 72:36]
    node _T_30 = mux(_T_29, UInt<2>("h01"), UInt<2>("h00")) @[DirectMappedCache.scala 72:26]
    io.master.S.Resp <= _T_30 @[DirectMappedCache.scala 72:20]
    reg stateReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[DirectMappedCache.scala 77:21]
    reg burstCntReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[DirectMappedCache.scala 79:24]
    reg missIndexReg : UInt<2>, clock @[DirectMappedCache.scala 80:25]
    reg slaveReg : {Resp : UInt<2>, Data : UInt<32>}, clock @[DirectMappedCache.scala 83:21]
    io.slave.M.Cmd <= UInt<3>("h00") @[DirectMappedCache.scala 86:18]
    node hi = bits(masterReg.Addr, 31, 4) @[DirectMappedCache.scala 87:40]
    node lo = mux(UInt<1>("h00"), UInt<4>("h0f"), UInt<4>("h00")) @[Bitwise.scala 72:12]
    node _T_31 = cat(hi, lo) @[Cat.scala 30:58]
    io.slave.M.Addr <= _T_31 @[DirectMappedCache.scala 87:19]
    io.slave.M.Data <= UInt<1>("h00") @[DirectMappedCache.scala 89:19]
    io.slave.M.DataValid <= UInt<1>("h00") @[DirectMappedCache.scala 90:24]
    io.slave.M.DataByteEn <= UInt<1>("h00") @[DirectMappedCache.scala 91:25]
    fillReg <= UInt<1>("h00") @[DirectMappedCache.scala 93:11]
    node _T_32 = eq(masterReg.Cmd, UInt<3>("h02")) @[DirectMappedCache.scala 96:34]
    node _T_33 = and(tagValid, _T_32) @[DirectMappedCache.scala 96:17]
    when _T_33 : @[DirectMappedCache.scala 96:49]
      io.perf.hit <= UInt<1>("h01") @[DirectMappedCache.scala 97:17]
      skip @[DirectMappedCache.scala 96:49]
    node _T_34 = eq(tagValid, UInt<1>("h00")) @[DirectMappedCache.scala 101:8]
    node _T_35 = eq(masterReg.Cmd, UInt<3>("h02")) @[DirectMappedCache.scala 101:35]
    node _T_36 = and(_T_34, _T_35) @[DirectMappedCache.scala 101:18]
    when _T_36 : @[DirectMappedCache.scala 101:50]
      node _T_37 = bits(masterReg.Addr, 11, 4) @[DirectMappedCache.scala 102:27]
      tagVMem[_T_37] <= UInt<1>("h01") @[DirectMappedCache.scala 102:53]
      node _T_38 = bits(masterReg.Addr, 3, 2) @[DirectMappedCache.scala 103:35]
      missIndexReg <= _T_38 @[DirectMappedCache.scala 103:18]
      io.slave.M.Cmd <= UInt<3>("h02") @[DirectMappedCache.scala 104:20]
      node _T_39 = eq(io.slave.S.CmdAccept, UInt<1>("h01")) @[DirectMappedCache.scala 105:31]
      when _T_39 : @[DirectMappedCache.scala 105:44]
        stateReg <= UInt<2>("h02") @[DirectMappedCache.scala 106:16]
        skip @[DirectMappedCache.scala 105:44]
      else : @[DirectMappedCache.scala 108:16]
        stateReg <= UInt<2>("h01") @[DirectMappedCache.scala 109:16]
        skip @[DirectMappedCache.scala 108:16]
      masterReg.Addr <= masterReg.Addr @[DirectMappedCache.scala 111:20]
      io.perf.miss <= UInt<1>("h01") @[DirectMappedCache.scala 112:18]
      skip @[DirectMappedCache.scala 101:50]
    node _T_40 = eq(tagValid, UInt<1>("h00")) @[DirectMappedCache.scala 114:17]
    node _T_41 = eq(masterReg.Cmd, UInt<3>("h02")) @[DirectMappedCache.scala 114:44]
    node _T_42 = and(_T_40, _T_41) @[DirectMappedCache.scala 114:27]
    node _T_43 = bits(masterReg.Addr, 11, 4) @[DirectMappedCache.scala 115:31]
    node _T_44 = bits(masterReg.Addr, 31, 12) @[DirectMappedCache.scala 116:31]
    tagMem.io.wrAddr <= _T_43 @[MemBlock.scala 34:12]
    tagMem.io.wrEna <= _T_42 @[MemBlock.scala 35:11]
    tagMem.io.wrData <= _T_44 @[MemBlock.scala 36:12]
    node _T_45 = eq(stateReg, UInt<2>("h01")) @[DirectMappedCache.scala 119:17]
    when _T_45 : @[DirectMappedCache.scala 119:27]
      io.slave.M.Cmd <= UInt<3>("h02") @[DirectMappedCache.scala 120:20]
      node _T_46 = eq(io.slave.S.CmdAccept, UInt<1>("h01")) @[DirectMappedCache.scala 121:31]
      when _T_46 : @[DirectMappedCache.scala 121:44]
        stateReg <= UInt<2>("h02") @[DirectMappedCache.scala 122:16]
        skip @[DirectMappedCache.scala 121:44]
      else : @[DirectMappedCache.scala 124:16]
        stateReg <= UInt<2>("h01") @[DirectMappedCache.scala 125:16]
        skip @[DirectMappedCache.scala 124:16]
      masterReg.Addr <= masterReg.Addr @[DirectMappedCache.scala 127:20]
      skip @[DirectMappedCache.scala 119:27]
    node _T_47 = eq(stateReg, UInt<2>("h02")) @[DirectMappedCache.scala 130:17]
    when _T_47 : @[DirectMappedCache.scala 130:27]
      node hi_1 = bits(masterReg.Addr, 11, 4) @[DirectMappedCache.scala 131:36]
      node _T_48 = cat(hi_1, burstCntReg) @[Cat.scala 30:58]
      wrAddrReg <= _T_48 @[DirectMappedCache.scala 131:15]
      node _T_49 = neq(io.slave.S.Resp, UInt<2>("h00")) @[DirectMappedCache.scala 133:26]
      when _T_49 : @[DirectMappedCache.scala 133:44]
        fillReg <= UInt<1>("h01") @[DirectMappedCache.scala 134:15]
        wrDataReg <= io.slave.S.Data @[DirectMappedCache.scala 135:17]
        node _T_50 = eq(burstCntReg, missIndexReg) @[DirectMappedCache.scala 136:24]
        when _T_50 : @[DirectMappedCache.scala 136:42]
          slaveReg <- io.slave.S @[DirectMappedCache.scala 137:18]
          skip @[DirectMappedCache.scala 136:42]
        node _T_51 = eq(burstCntReg, UInt<2>("h03")) @[DirectMappedCache.scala 139:24]
        when _T_51 : @[DirectMappedCache.scala 139:48]
          stateReg <= UInt<2>("h03") @[DirectMappedCache.scala 140:18]
          skip @[DirectMappedCache.scala 139:48]
        node _lo_T = add(burstCntReg, UInt<1>("h01")) @[DirectMappedCache.scala 142:34]
        node _lo_T_1 = tail(_lo_T, 1) @[DirectMappedCache.scala 142:34]
        burstCntReg <= _lo_T_1 @[DirectMappedCache.scala 142:19]
        skip @[DirectMappedCache.scala 133:44]
      node _T_52 = eq(io.slave.S.Resp, UInt<2>("h03")) @[DirectMappedCache.scala 144:26]
      when _T_52 : @[DirectMappedCache.scala 144:43]
        node _T_53 = bits(masterReg.Addr, 11, 4) @[DirectMappedCache.scala 145:29]
        tagVMem[_T_53] <= UInt<1>("h00") @[DirectMappedCache.scala 145:55]
        skip @[DirectMappedCache.scala 144:43]
      masterReg.Addr <= masterReg.Addr @[DirectMappedCache.scala 147:20]
      skip @[DirectMappedCache.scala 130:27]
    node _T_54 = eq(stateReg, UInt<2>("h03")) @[DirectMappedCache.scala 150:17]
    when _T_54 : @[DirectMappedCache.scala 150:30]
      io.master.S <- slaveReg @[DirectMappedCache.scala 151:17]
      stateReg <= UInt<2>("h00") @[DirectMappedCache.scala 152:14]
      skip @[DirectMappedCache.scala 150:30]
    when io.invalidate : @[DirectMappedCache.scala 156:24]
      tagVMem[0] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[1] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[2] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[3] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[4] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[5] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[6] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[7] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[8] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[9] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[10] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[11] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[12] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[13] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[14] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[15] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[16] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[17] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[18] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[19] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[20] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[21] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[22] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[23] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[24] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[25] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[26] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[27] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[28] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[29] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[30] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[31] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[32] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[33] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[34] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[35] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[36] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[37] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[38] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[39] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[40] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[41] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[42] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[43] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[44] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[45] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[46] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[47] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[48] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[49] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[50] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[51] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[52] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[53] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[54] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[55] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[56] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[57] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[58] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[59] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[60] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[61] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[62] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[63] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[64] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[65] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[66] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[67] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[68] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[69] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[70] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[71] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[72] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[73] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[74] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[75] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[76] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[77] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[78] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[79] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[80] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[81] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[82] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[83] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[84] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[85] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[86] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[87] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[88] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[89] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[90] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[91] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[92] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[93] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[94] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[95] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[96] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[97] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[98] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[99] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[100] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[101] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[102] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[103] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[104] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[105] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[106] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[107] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[108] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[109] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[110] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[111] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[112] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[113] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[114] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[115] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[116] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[117] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[118] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[119] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[120] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[121] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[122] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[123] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[124] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[125] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[126] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[127] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[128] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[129] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[130] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[131] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[132] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[133] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[134] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[135] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[136] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[137] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[138] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[139] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[140] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[141] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[142] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[143] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[144] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[145] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[146] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[147] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[148] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[149] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[150] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[151] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[152] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[153] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[154] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[155] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[156] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[157] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[158] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[159] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[160] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[161] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[162] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[163] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[164] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[165] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[166] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[167] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[168] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[169] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[170] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[171] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[172] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[173] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[174] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[175] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[176] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[177] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[178] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[179] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[180] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[181] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[182] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[183] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[184] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[185] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[186] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[187] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[188] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[189] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[190] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[191] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[192] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[193] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[194] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[195] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[196] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[197] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[198] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[199] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[200] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[201] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[202] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[203] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[204] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[205] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[206] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[207] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[208] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[209] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[210] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[211] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[212] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[213] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[214] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[215] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[216] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[217] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[218] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[219] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[220] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[221] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[222] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[223] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[224] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[225] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[226] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[227] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[228] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[229] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[230] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[231] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[232] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[233] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[234] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[235] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[236] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[237] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[238] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[239] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[240] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[241] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[242] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[243] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[244] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[245] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[246] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[247] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[248] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[249] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[250] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[251] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[252] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[253] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[254] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      tagVMem[255] <= UInt<1>("h00") @[DirectMappedCache.scala 157:19]
      skip @[DirectMappedCache.scala 156:24]
    
  module MemBlock_9 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rdAddr : UInt<9>, rdData : UInt<8>, flip wrAddr : UInt<9>, flip wrEna : UInt<1>, flip wrData : UInt<8>}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem mem : UInt<8>[512]
    node _T = eq(io.wrEna, UInt<1>("h01")) @[MemBlock.scala 54:17]
    when _T : @[MemBlock.scala 54:30]
      infer mport MPORT = mem[io.wrAddr], clock @[MemBlock.scala 55:8]
      MPORT <= io.wrData @[MemBlock.scala 55:20]
      skip @[MemBlock.scala 54:30]
    reg rdAddrReg : UInt, clock @[MemBlock.scala 59:22]
    rdAddrReg <= io.rdAddr @[MemBlock.scala 59:22]
    node _T_1 = or(rdAddrReg, UInt<9>("h00")) @[MemBlock.scala 60:19]
    node _T_2 = bits(_T_1, 8, 0) @[MemBlock.scala 60:19]
    infer mport MPORT_1 = mem[_T_2], clock @[MemBlock.scala 60:19]
    io.rdData <= MPORT_1 @[MemBlock.scala 60:13]
    
  module MemBlock_10 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rdAddr : UInt<9>, rdData : UInt<8>, flip wrAddr : UInt<9>, flip wrEna : UInt<1>, flip wrData : UInt<8>}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem mem : UInt<8>[512]
    node _T = eq(io.wrEna, UInt<1>("h01")) @[MemBlock.scala 54:17]
    when _T : @[MemBlock.scala 54:30]
      infer mport MPORT = mem[io.wrAddr], clock @[MemBlock.scala 55:8]
      MPORT <= io.wrData @[MemBlock.scala 55:20]
      skip @[MemBlock.scala 54:30]
    reg rdAddrReg : UInt, clock @[MemBlock.scala 59:22]
    rdAddrReg <= io.rdAddr @[MemBlock.scala 59:22]
    node _T_1 = or(rdAddrReg, UInt<9>("h00")) @[MemBlock.scala 60:19]
    node _T_2 = bits(_T_1, 8, 0) @[MemBlock.scala 60:19]
    infer mport MPORT_1 = mem[_T_2], clock @[MemBlock.scala 60:19]
    io.rdData <= MPORT_1 @[MemBlock.scala 60:13]
    
  module MemBlock_11 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rdAddr : UInt<9>, rdData : UInt<8>, flip wrAddr : UInt<9>, flip wrEna : UInt<1>, flip wrData : UInt<8>}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem mem : UInt<8>[512]
    node _T = eq(io.wrEna, UInt<1>("h01")) @[MemBlock.scala 54:17]
    when _T : @[MemBlock.scala 54:30]
      infer mport MPORT = mem[io.wrAddr], clock @[MemBlock.scala 55:8]
      MPORT <= io.wrData @[MemBlock.scala 55:20]
      skip @[MemBlock.scala 54:30]
    reg rdAddrReg : UInt, clock @[MemBlock.scala 59:22]
    rdAddrReg <= io.rdAddr @[MemBlock.scala 59:22]
    node _T_1 = or(rdAddrReg, UInt<9>("h00")) @[MemBlock.scala 60:19]
    node _T_2 = bits(_T_1, 8, 0) @[MemBlock.scala 60:19]
    infer mport MPORT_1 = mem[_T_2], clock @[MemBlock.scala 60:19]
    io.rdData <= MPORT_1 @[MemBlock.scala 60:13]
    
  module MemBlock_12 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rdAddr : UInt<9>, rdData : UInt<8>, flip wrAddr : UInt<9>, flip wrEna : UInt<1>, flip wrData : UInt<8>}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem mem : UInt<8>[512]
    node _T = eq(io.wrEna, UInt<1>("h01")) @[MemBlock.scala 54:17]
    when _T : @[MemBlock.scala 54:30]
      infer mport MPORT = mem[io.wrAddr], clock @[MemBlock.scala 55:8]
      MPORT <= io.wrData @[MemBlock.scala 55:20]
      skip @[MemBlock.scala 54:30]
    reg rdAddrReg : UInt, clock @[MemBlock.scala 59:22]
    rdAddrReg <= io.rdAddr @[MemBlock.scala 59:22]
    node _T_1 = or(rdAddrReg, UInt<9>("h00")) @[MemBlock.scala 60:19]
    node _T_2 = bits(_T_1, 8, 0) @[MemBlock.scala 60:19]
    infer mport MPORT_1 = mem[_T_2], clock @[MemBlock.scala 60:19]
    io.rdData <= MPORT_1 @[MemBlock.scala 60:13]
    
  module StackCache : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip ena_in : UInt<1>, flip exsc : {op : UInt<3>, opData : UInt<32>, opOff : UInt<32>}, scex : {stackTop : UInt<32>, memTop : UInt<32>}, illMem : UInt<1>, stall : UInt<1>, fromCPU : {flip M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, ByteEn : UInt<4>}, S : {Resp : UInt<2>, Data : UInt<32>}}, toMemory : {M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, DataValid : UInt<1>, DataByteEn : UInt<4>}, flip S : {Resp : UInt<2>, Data : UInt<32>, CmdAccept : UInt<1>, DataAccept : UInt<1>}}, perf : {spill : UInt<1>, fill : UInt<1>}}
    
    clock is invalid
    reset is invalid
    io is invalid
    io.perf.spill <= UInt<1>("h00") @[StackCache.scala 60:17]
    io.perf.fill <= UInt<1>("h00") @[StackCache.scala 61:16]
    reg stateReg : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[StackCache.scala 74:21]
    reg isReserveReg : UInt<1>, clock @[StackCache.scala 77:25]
    reg stackTopReg : UInt<32>, clock @[StackCache.scala 80:24]
    reg memTopReg : UInt<32>, clock @[StackCache.scala 83:22]
    reg transferAddrReg : UInt<33>, clock @[StackCache.scala 86:28]
    reg newMemTopReg : UInt<32>, clock @[StackCache.scala 89:25]
    inst MemBlock of MemBlock_9 @[MemBlock.scala 15:11]
    MemBlock.io is invalid
    MemBlock.clock <= clock
    MemBlock.reset <= reset
    inst MemBlock_1 of MemBlock_10 @[MemBlock.scala 15:11]
    MemBlock_1.io is invalid
    MemBlock_1.clock <= clock
    MemBlock_1.reset <= reset
    inst MemBlock_2 of MemBlock_11 @[MemBlock.scala 15:11]
    MemBlock_2.io is invalid
    MemBlock_2.clock <= clock
    MemBlock_2.reset <= reset
    inst MemBlock_3 of MemBlock_12 @[MemBlock.scala 15:11]
    MemBlock_3.io is invalid
    MemBlock_3.clock <= clock
    MemBlock_3.reset <= reset
    wire mb_rdAddr : UInt<9> @[StackCache.scala 97:23]
    mb_rdAddr is invalid @[StackCache.scala 97:23]
    node _T = cat(MemBlock_1.io.rdData, MemBlock.io.rdData) @[StackCache.scala 98:67]
    node _T_1 = cat(MemBlock_2.io.rdData, _T) @[StackCache.scala 98:67]
    node mb_rdData = cat(MemBlock_3.io.rdData, _T_1) @[StackCache.scala 98:67]
    wire mb_wrAddr : UInt<9> @[StackCache.scala 99:23]
    mb_wrAddr is invalid @[StackCache.scala 99:23]
    wire mb_wrEna : UInt<4> @[StackCache.scala 100:22]
    mb_wrEna is invalid @[StackCache.scala 100:22]
    wire mb_wrData : UInt<32> @[StackCache.scala 101:23]
    mb_wrData is invalid @[StackCache.scala 101:23]
    reg rdAddrReg : UInt, clock @[StackCache.scala 104:22]
    rdAddrReg <= MemBlock.io.rdAddr @[StackCache.scala 104:22]
    reg responseToCPUReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[StackCache.scala 107:29]
    node _T_2 = add(stackTopReg, UInt<12>("h0800")) @[StackCache.scala 111:39]
    node _T_3 = tail(_T_2, 1) @[StackCache.scala 111:39]
    node _T_4 = leq(_T_3, transferAddrReg) @[StackCache.scala 111:60]
    node _T_5 = lt(transferAddrReg, memTopReg) @[StackCache.scala 111:100]
    node _T_6 = and(_T_4, _T_5) @[StackCache.scala 111:80]
    node _T_7 = leq(newMemTopReg, transferAddrReg) @[StackCache.scala 112:39]
    node _T_8 = lt(transferAddrReg, memTopReg) @[StackCache.scala 112:79]
    node _T_9 = and(_T_7, _T_8) @[StackCache.scala 112:59]
    node writeEnable = mux(isReserveReg, _T_6, _T_9) @[StackCache.scala 110:24]
    node _T_10 = neq(stateReg, UInt<3>("h00")) @[StackCache.scala 114:24]
    io.stall <= _T_10 @[StackCache.scala 114:12]
    io.illMem <= UInt<1>("h00") @[StackCache.scala 115:13]
    io.toMemory.M.Cmd <= UInt<3>("h00") @[StackCache.scala 118:21]
    io.toMemory.M.Addr <= transferAddrReg @[StackCache.scala 119:22]
    io.toMemory.M.Data <= mb_rdData @[StackCache.scala 120:22]
    io.toMemory.M.DataValid <= UInt<1>("h00") @[StackCache.scala 121:27]
    node _T_11 = bits(writeEnable, 0, 0) @[Bitwise.scala 72:15]
    node _T_12 = mux(_T_11, UInt<4>("h0f"), UInt<4>("h00")) @[Bitwise.scala 72:12]
    io.toMemory.M.DataByteEn <= _T_12 @[StackCache.scala 122:28]
    node _T_13 = add(io.fromCPU.M.Addr, stackTopReg) @[StackCache.scala 125:36]
    node _T_14 = tail(_T_13, 1) @[StackCache.scala 125:36]
    node relAddr = bits(_T_14, 10, 2) @[StackCache.scala 125:50]
    mb_rdAddr <= relAddr @[StackCache.scala 126:13]
    mb_wrAddr <= relAddr @[StackCache.scala 127:13]
    mb_wrEna <= UInt<1>("h00") @[StackCache.scala 128:13]
    mb_wrData <= io.fromCPU.M.Data @[StackCache.scala 129:13]
    io.scex.stackTop <= stackTopReg @[StackCache.scala 132:20]
    io.scex.memTop <= memTopReg @[StackCache.scala 133:18]
    node burstCounter = bits(transferAddrReg, 3, 2) @[StackCache.scala 136:37]
    responseToCPUReg <= UInt<2>("h00") @[StackCache.scala 139:20]
    node _T_15 = add(stackTopReg, io.exsc.opOff) @[StackCache.scala 141:33]
    node stackTopInc = tail(_T_15, 1) @[StackCache.scala 141:33]
    node _T_16 = sub(memTopReg, stackTopReg) @[StackCache.scala 142:33]
    node _T_17 = tail(_T_16, 1) @[StackCache.scala 142:33]
    node stackAboveMem = lt(_T_17, io.exsc.opOff) @[StackCache.scala 142:47]
    node _T_18 = eq(UInt<3>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T_18 : @[Conditional.scala 40:58]
      stateReg <= UInt<3>("h00") @[StackCache.scala 150:16]
      node _T_19 = eq(UInt<3>("h00"), io.exsc.op) @[Conditional.scala 37:30]
      when _T_19 : @[Conditional.scala 40:58]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_20 = eq(UInt<3>("h01"), io.exsc.op) @[Conditional.scala 37:30]
        when _T_20 : @[Conditional.scala 39:67]
          stackTopReg <= io.exsc.opData @[StackCache.scala 158:23]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_21 = eq(UInt<3>("h02"), io.exsc.op) @[Conditional.scala 37:30]
          when _T_21 : @[Conditional.scala 39:67]
            memTopReg <= io.exsc.opData @[StackCache.scala 162:21]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_22 = eq(UInt<3>("h04"), io.exsc.op) @[Conditional.scala 37:30]
            when _T_22 : @[Conditional.scala 39:67]
              node _T_23 = bits(memTopReg, 31, 4) @[StackCache.scala 166:39]
              node _T_24 = mux(UInt<1>("h00"), UInt<4>("h0f"), UInt<4>("h00")) @[Bitwise.scala 72:12]
              node _T_25 = cat(_T_23, _T_24) @[StackCache.scala 166:67]
              transferAddrReg <= _T_25 @[StackCache.scala 166:27]
              newMemTopReg <= stackTopInc @[StackCache.scala 169:24]
              node _T_26 = mux(stackAboveMem, UInt<3>("h01"), UInt<3>("h00")) @[StackCache.scala 172:26]
              stateReg <= _T_26 @[StackCache.scala 172:20]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_27 = eq(UInt<3>("h05"), io.exsc.op) @[Conditional.scala 37:30]
              when _T_27 : @[Conditional.scala 39:67]
                stackTopReg <= stackTopInc @[StackCache.scala 176:23]
                when stackAboveMem : @[StackCache.scala 178:31]
                  memTopReg <= stackTopInc @[StackCache.scala 179:23]
                  skip @[StackCache.scala 178:31]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_28 = eq(UInt<3>("h03"), io.exsc.op) @[Conditional.scala 37:30]
                when _T_28 : @[Conditional.scala 39:67]
                  isReserveReg <= UInt<1>("h01") @[StackCache.scala 184:24]
                  node _T_29 = sub(stackTopReg, io.exsc.opOff) @[StackCache.scala 186:42]
                  node _T_30 = tail(_T_29, 1) @[StackCache.scala 186:42]
                  stackTopReg <= _T_30 @[StackCache.scala 187:23]
                  node _T_31 = add(_T_30, UInt<12>("h0800")) @[StackCache.scala 190:27]
                  node _T_32 = tail(_T_31, 1) @[StackCache.scala 190:27]
                  node _T_33 = bits(_T_32, 31, 4) @[StackCache.scala 190:47]
                  node _T_34 = mux(UInt<1>("h00"), UInt<4>("h0f"), UInt<4>("h00")) @[Bitwise.scala 72:12]
                  node _T_35 = cat(_T_33, _T_34) @[StackCache.scala 190:73]
                  node _T_36 = bits(_T_35, 10, 2) @[StackCache.scala 192:40]
                  mb_rdAddr <= _T_36 @[StackCache.scala 192:21]
                  transferAddrReg <= _T_35 @[StackCache.scala 194:27]
                  node _T_37 = sub(memTopReg, _T_30) @[StackCache.scala 196:39]
                  node _T_38 = tail(_T_37, 1) @[StackCache.scala 196:39]
                  node _T_39 = gt(_T_38, UInt<12>("h0800")) @[StackCache.scala 196:55]
                  node _T_40 = mux(_T_39, UInt<3>("h04"), UInt<3>("h00")) @[StackCache.scala 197:26]
                  stateReg <= _T_40 @[StackCache.scala 197:20]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_41 = eq(UInt<3>("h06"), io.exsc.op) @[Conditional.scala 37:30]
                  when _T_41 : @[Conditional.scala 39:67]
                    isReserveReg <= UInt<1>("h00") @[StackCache.scala 201:24]
                    node _T_42 = sub(memTopReg, io.exsc.opOff) @[StackCache.scala 203:41]
                    node _T_43 = tail(_T_42, 1) @[StackCache.scala 203:41]
                    node _T_44 = bits(_T_43, 31, 4) @[StackCache.scala 205:26]
                    node _T_45 = mux(UInt<1>("h00"), UInt<4>("h0f"), UInt<4>("h00")) @[Bitwise.scala 72:12]
                    node _T_46 = cat(_T_44, _T_45) @[StackCache.scala 205:52]
                    node _T_47 = bits(_T_46, 10, 2) @[StackCache.scala 207:40]
                    mb_rdAddr <= _T_47 @[StackCache.scala 207:21]
                    transferAddrReg <= _T_46 @[StackCache.scala 209:27]
                    newMemTopReg <= _T_43 @[StackCache.scala 211:24]
                    stateReg <= UInt<3>("h04") @[StackCache.scala 213:20]
                    skip @[Conditional.scala 39:67]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_48 = eq(UInt<3>("h04"), stateReg) @[Conditional.scala 37:30]
      when _T_48 : @[Conditional.scala 39:67]
        node _T_49 = add(transferAddrReg, UInt<3>("h04")) @[StackCache.scala 222:46]
        node _T_50 = tail(_T_49, 1) @[StackCache.scala 222:46]
        io.toMemory.M.Cmd <= UInt<3>("h01") @[StackCache.scala 225:25]
        io.toMemory.M.DataValid <= UInt<1>("h01") @[StackCache.scala 226:31]
        node _T_51 = eq(io.toMemory.S.CmdAccept, UInt<1>("h01")) @[StackCache.scala 229:46]
        node _T_52 = bits(_T_50, 10, 2) @[StackCache.scala 232:50]
        node _T_53 = mux(_T_51, _T_52, rdAddrReg) @[StackCache.scala 232:23]
        mb_rdAddr <= _T_53 @[StackCache.scala 232:17]
        node _T_54 = mux(_T_51, _T_50, transferAddrReg) @[StackCache.scala 235:29]
        transferAddrReg <= _T_54 @[StackCache.scala 235:23]
        node _T_55 = mux(_T_51, UInt<3>("h03"), UInt<3>("h04")) @[StackCache.scala 238:22]
        stateReg <= _T_55 @[StackCache.scala 238:16]
        when _T_51 : @[StackCache.scala 240:23]
          io.perf.spill <= UInt<1>("h01") @[StackCache.scala 241:23]
          skip @[StackCache.scala 240:23]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_56 = eq(UInt<3>("h03"), stateReg) @[Conditional.scala 37:30]
        when _T_56 : @[Conditional.scala 39:67]
          node _T_57 = add(transferAddrReg, UInt<3>("h04")) @[StackCache.scala 246:46]
          node _T_58 = tail(_T_57, 1) @[StackCache.scala 246:46]
          node _T_59 = bits(_T_58, 10, 2) @[StackCache.scala 249:36]
          mb_rdAddr <= _T_59 @[StackCache.scala 249:17]
          io.toMemory.M.DataValid <= UInt<1>("h01") @[StackCache.scala 252:31]
          transferAddrReg <= _T_58 @[StackCache.scala 255:23]
          node _T_60 = eq(burstCounter, UInt<2>("h03")) @[StackCache.scala 257:36]
          node _T_61 = mux(_T_60, UInt<3>("h05"), UInt<3>("h03")) @[StackCache.scala 257:22]
          stateReg <= _T_61 @[StackCache.scala 257:16]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_62 = eq(UInt<3>("h05"), stateReg) @[Conditional.scala 37:30]
          when _T_62 : @[Conditional.scala 39:67]
            node _T_63 = leq(memTopReg, transferAddrReg) @[StackCache.scala 263:36]
            node _T_64 = eq(io.toMemory.S.Resp, UInt<2>("h01")) @[StackCache.scala 267:42]
            node _T_65 = mux(_T_63, UInt<3>("h00"), UInt<3>("h04")) @[StackCache.scala 268:26]
            node _T_66 = eq(io.toMemory.S.Resp, UInt<2>("h03")) @[StackCache.scala 269:46]
            node _T_67 = mux(_T_66, UInt<3>("h00"), UInt<3>("h05")) @[StackCache.scala 269:26]
            node _T_68 = mux(_T_64, _T_65, _T_67) @[StackCache.scala 267:22]
            stateReg <= _T_68 @[StackCache.scala 267:16]
            node _T_69 = eq(io.toMemory.S.Resp, UInt<2>("h03")) @[StackCache.scala 271:39]
            io.illMem <= _T_69 @[StackCache.scala 271:17]
            node _T_70 = add(stackTopReg, UInt<12>("h0800")) @[StackCache.scala 276:40]
            node _T_71 = tail(_T_70, 1) @[StackCache.scala 276:40]
            node _T_72 = mux(isReserveReg, _T_71, newMemTopReg) @[StackCache.scala 275:27]
            node _T_73 = mux(_T_63, _T_72, memTopReg) @[StackCache.scala 274:23]
            memTopReg <= _T_73 @[StackCache.scala 274:17]
            mb_rdAddr <= rdAddrReg @[StackCache.scala 281:17]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_74 = eq(UInt<3>("h01"), stateReg) @[Conditional.scala 37:30]
            when _T_74 : @[Conditional.scala 39:67]
              io.toMemory.M.Cmd <= UInt<3>("h02") @[StackCache.scala 289:25]
              node _T_75 = eq(io.toMemory.S.CmdAccept, UInt<1>("h01")) @[StackCache.scala 292:46]
              node _T_76 = mux(_T_75, UInt<3>("h02"), UInt<3>("h01")) @[StackCache.scala 295:22]
              stateReg <= _T_76 @[StackCache.scala 295:16]
              when _T_75 : @[StackCache.scala 297:23]
                io.perf.fill <= UInt<1>("h01") @[StackCache.scala 298:22]
                skip @[StackCache.scala 297:23]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_77 = eq(UInt<3>("h02"), stateReg) @[Conditional.scala 37:30]
              when _T_77 : @[Conditional.scala 39:67]
                node _T_78 = eq(io.toMemory.S.Resp, UInt<2>("h01")) @[StackCache.scala 304:31]
                when _T_78 : @[StackCache.scala 304:48]
                  node _T_79 = leq(newMemTopReg, transferAddrReg) @[StackCache.scala 306:40]
                  node _T_80 = eq(_T_79, UInt<1>("h00")) @[StackCache.scala 309:27]
                  node _T_81 = leq(memTopReg, transferAddrReg) @[StackCache.scala 309:53]
                  node _T_82 = and(_T_80, _T_81) @[StackCache.scala 309:40]
                  node _T_83 = bits(_T_82, 0, 0) @[Bitwise.scala 72:15]
                  node _T_84 = mux(_T_83, UInt<4>("h0f"), UInt<4>("h00")) @[Bitwise.scala 72:12]
                  mb_wrEna <= _T_84 @[StackCache.scala 312:18]
                  mb_wrData <= io.toMemory.S.Data @[StackCache.scala 313:19]
                  node _T_85 = bits(transferAddrReg, 10, 2) @[StackCache.scala 314:43]
                  mb_wrAddr <= _T_85 @[StackCache.scala 314:19]
                  node _T_86 = add(transferAddrReg, UInt<3>("h04")) @[StackCache.scala 317:44]
                  node _T_87 = tail(_T_86, 1) @[StackCache.scala 317:44]
                  transferAddrReg <= _T_87 @[StackCache.scala 317:25]
                  node _T_88 = eq(burstCounter, UInt<2>("h03")) @[StackCache.scala 320:38]
                  node _T_89 = mux(_T_79, UInt<3>("h00"), UInt<3>("h01")) @[StackCache.scala 321:14]
                  node _T_90 = mux(_T_88, _T_89, UInt<3>("h02")) @[StackCache.scala 320:24]
                  stateReg <= _T_90 @[StackCache.scala 320:18]
                  node _T_91 = mux(_T_79, newMemTopReg, memTopReg) @[StackCache.scala 325:25]
                  memTopReg <= _T_91 @[StackCache.scala 325:19]
                  skip @[StackCache.scala 304:48]
                node _T_92 = eq(io.toMemory.S.Resp, UInt<2>("h03")) @[StackCache.scala 329:31]
                when _T_92 : @[StackCache.scala 329:49]
                  node _T_93 = add(transferAddrReg, UInt<3>("h04")) @[StackCache.scala 330:44]
                  node _T_94 = tail(_T_93, 1) @[StackCache.scala 330:44]
                  transferAddrReg <= _T_94 @[StackCache.scala 330:25]
                  stateReg <= UInt<3>("h06") @[StackCache.scala 331:18]
                  skip @[StackCache.scala 329:49]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_95 = eq(UInt<3>("h06"), stateReg) @[Conditional.scala 37:30]
                when _T_95 : @[Conditional.scala 39:67]
                  node _T_96 = neq(io.toMemory.S.Resp, UInt<2>("h00")) @[StackCache.scala 337:32]
                  when _T_96 : @[StackCache.scala 337:50]
                    node _T_97 = add(transferAddrReg, UInt<3>("h04")) @[StackCache.scala 338:44]
                    node _T_98 = tail(_T_97, 1) @[StackCache.scala 338:44]
                    transferAddrReg <= _T_98 @[StackCache.scala 338:25]
                    skip @[StackCache.scala 337:50]
                  node _T_99 = eq(burstCounter, UInt<2>("h03")) @[StackCache.scala 340:26]
                  when _T_99 : @[StackCache.scala 340:54]
                    io.illMem <= UInt<1>("h01") @[StackCache.scala 341:19]
                    stateReg <= UInt<3>("h00") @[StackCache.scala 342:18]
                    skip @[StackCache.scala 340:54]
                  skip @[Conditional.scala 39:67]
    io.fromCPU.S.Resp <= responseToCPUReg @[StackCache.scala 352:21]
    io.fromCPU.S.Data <= mb_rdData @[StackCache.scala 353:21]
    node _T_100 = eq(io.fromCPU.M.Cmd, UInt<3>("h01")) @[StackCache.scala 356:25]
    when _T_100 : @[StackCache.scala 356:40]
      mb_wrEna <= io.fromCPU.M.ByteEn @[StackCache.scala 358:14]
      responseToCPUReg <= UInt<2>("h01") @[StackCache.scala 361:22]
      skip @[StackCache.scala 356:40]
    else : @[StackCache.scala 363:45]
      node _T_101 = eq(io.fromCPU.M.Cmd, UInt<3>("h02")) @[StackCache.scala 363:30]
      when _T_101 : @[StackCache.scala 363:45]
        responseToCPUReg <= UInt<2>("h01") @[StackCache.scala 365:22]
        skip @[StackCache.scala 363:45]
    node _T_102 = bits(mb_wrEna, 0, 0) @[StackCache.scala 373:32]
    node _T_103 = bits(mb_wrData, 7, 0) @[StackCache.scala 374:16]
    MemBlock.io.wrAddr <= mb_wrAddr @[MemBlock.scala 34:12]
    MemBlock.io.wrEna <= _T_102 @[MemBlock.scala 35:11]
    MemBlock.io.wrData <= _T_103 @[MemBlock.scala 36:12]
    MemBlock.io.rdAddr <= mb_rdAddr @[StackCache.scala 375:27]
    node _T_104 = bits(mb_wrEna, 1, 1) @[StackCache.scala 373:32]
    node _T_105 = bits(mb_wrData, 15, 8) @[StackCache.scala 374:16]
    MemBlock_1.io.wrAddr <= mb_wrAddr @[MemBlock.scala 34:12]
    MemBlock_1.io.wrEna <= _T_104 @[MemBlock.scala 35:11]
    MemBlock_1.io.wrData <= _T_105 @[MemBlock.scala 36:12]
    MemBlock_1.io.rdAddr <= mb_rdAddr @[StackCache.scala 375:27]
    node _T_106 = bits(mb_wrEna, 2, 2) @[StackCache.scala 373:32]
    node _T_107 = bits(mb_wrData, 23, 16) @[StackCache.scala 374:16]
    MemBlock_2.io.wrAddr <= mb_wrAddr @[MemBlock.scala 34:12]
    MemBlock_2.io.wrEna <= _T_106 @[MemBlock.scala 35:11]
    MemBlock_2.io.wrData <= _T_107 @[MemBlock.scala 36:12]
    MemBlock_2.io.rdAddr <= mb_rdAddr @[StackCache.scala 375:27]
    node _T_108 = bits(mb_wrEna, 3, 3) @[StackCache.scala 373:32]
    node _T_109 = bits(mb_wrData, 31, 24) @[StackCache.scala 374:16]
    MemBlock_3.io.wrAddr <= mb_wrAddr @[MemBlock.scala 34:12]
    MemBlock_3.io.wrEna <= _T_108 @[MemBlock.scala 35:11]
    MemBlock_3.io.wrData <= _T_109 @[MemBlock.scala 36:12]
    MemBlock_3.io.rdAddr <= mb_rdAddr @[StackCache.scala 375:27]
    node _T_110 = eq(io.ena_in, UInt<1>("h00")) @[StackCache.scala 382:9]
    when _T_110 : @[StackCache.scala 382:21]
      stateReg <= stateReg @[StackCache.scala 383:14]
      stackTopReg <= stackTopReg @[StackCache.scala 384:17]
      memTopReg <= memTopReg @[StackCache.scala 385:15]
      transferAddrReg <= transferAddrReg @[StackCache.scala 386:21]
      io.toMemory.M.Cmd <= UInt<3>("h00") @[StackCache.scala 387:23]
      skip @[StackCache.scala 382:21]
    
  module NullCache : 
    input clock : Clock
    input reset : UInt<1>
    output io : {master : {flip M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, ByteEn : UInt<4>}, S : {Resp : UInt<2>, Data : UInt<32>}}, slave : {M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, DataValid : UInt<1>, DataByteEn : UInt<4>}, flip S : {Resp : UInt<2>, Data : UInt<32>, CmdAccept : UInt<1>, DataAccept : UInt<1>}}, flip invalidate : UInt<1>, perf : {hit : UInt<1>, miss : UInt<1>}}
    
    clock is invalid
    reset is invalid
    io is invalid
    io.perf.hit <= UInt<1>("h00") @[NullCache.scala 24:15]
    io.perf.miss <= UInt<1>("h00") @[NullCache.scala 25:16]
    reg stateReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[NullCache.scala 32:21]
    reg burstCntReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[NullCache.scala 33:24]
    reg posReg : UInt<2>, clock @[NullCache.scala 34:19]
    reg masterReg : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, ByteEn : UInt<4>}, clock @[NullCache.scala 37:22]
    reg slaveReg : {Resp : UInt<2>, Data : UInt<32>}, clock @[NullCache.scala 40:21]
    node _T = neq(masterReg.Cmd, UInt<3>("h02")) @[NullCache.scala 42:22]
    node _T_1 = eq(io.slave.S.CmdAccept, UInt<1>("h01")) @[NullCache.scala 42:60]
    node _T_2 = or(_T, _T_1) @[NullCache.scala 42:36]
    when _T_2 : @[NullCache.scala 42:73]
      masterReg <- io.master.M @[NullCache.scala 43:15]
      skip @[NullCache.scala 42:73]
    node _T_3 = bits(reset, 0, 0) @[compatibility.scala 260:56]
    when _T_3 : @[NullCache.scala 45:15]
      masterReg.Cmd <= UInt<3>("h00") @[NullCache.scala 46:19]
      skip @[NullCache.scala 45:15]
    io.slave.M.Cmd <= UInt<3>("h00") @[NullCache.scala 50:18]
    node hi = bits(masterReg.Addr, 31, 4) @[NullCache.scala 51:40]
    node lo = mux(UInt<1>("h00"), UInt<4>("h0f"), UInt<4>("h00")) @[Bitwise.scala 72:12]
    node _T_4 = cat(hi, lo) @[Cat.scala 30:58]
    io.slave.M.Addr <= _T_4 @[NullCache.scala 51:19]
    io.slave.M.Data <= UInt<1>("h00") @[NullCache.scala 53:19]
    io.slave.M.DataValid <= UInt<1>("h00") @[NullCache.scala 54:24]
    io.slave.M.DataByteEn <= UInt<1>("h00") @[NullCache.scala 55:25]
    io.master.S.Resp <= UInt<2>("h00") @[NullCache.scala 57:20]
    io.master.S.Data <= UInt<1>("h00") @[NullCache.scala 58:20]
    node _T_5 = eq(stateReg, UInt<2>("h01")) @[NullCache.scala 61:17]
    when _T_5 : @[NullCache.scala 61:27]
      node _T_6 = eq(burstCntReg, posReg) @[NullCache.scala 62:22]
      when _T_6 : @[NullCache.scala 62:34]
        slaveReg <- io.slave.S @[NullCache.scala 63:16]
        skip @[NullCache.scala 62:34]
      node _T_7 = neq(io.slave.S.Resp, UInt<2>("h00")) @[NullCache.scala 65:26]
      when _T_7 : @[NullCache.scala 65:44]
        node _T_8 = eq(burstCntReg, UInt<2>("h03")) @[NullCache.scala 66:24]
        when _T_8 : @[NullCache.scala 66:50]
          stateReg <= UInt<2>("h02") @[NullCache.scala 67:18]
          skip @[NullCache.scala 66:50]
        node _T_9 = add(burstCntReg, UInt<1>("h01")) @[NullCache.scala 69:34]
        node _T_10 = tail(_T_9, 1) @[NullCache.scala 69:34]
        burstCntReg <= _T_10 @[NullCache.scala 69:19]
        skip @[NullCache.scala 65:44]
      skip @[NullCache.scala 61:27]
    node _T_11 = eq(stateReg, UInt<2>("h02")) @[NullCache.scala 73:17]
    when _T_11 : @[NullCache.scala 73:31]
      io.master.S <- slaveReg @[NullCache.scala 74:17]
      stateReg <= UInt<2>("h00") @[NullCache.scala 75:14]
      skip @[NullCache.scala 73:31]
    node _T_12 = eq(masterReg.Cmd, UInt<3>("h02")) @[NullCache.scala 79:22]
    when _T_12 : @[NullCache.scala 79:37]
      io.slave.M.Cmd <= UInt<3>("h02") @[NullCache.scala 80:20]
      node _T_13 = eq(io.slave.S.CmdAccept, UInt<1>("h01")) @[NullCache.scala 81:31]
      when _T_13 : @[NullCache.scala 81:44]
        stateReg <= UInt<2>("h01") @[NullCache.scala 82:16]
        node _T_14 = bits(masterReg.Addr, 3, 2) @[NullCache.scala 83:31]
        posReg <= _T_14 @[NullCache.scala 83:14]
        io.perf.miss <= UInt<1>("h01") @[NullCache.scala 84:20]
        skip @[NullCache.scala 81:44]
      skip @[NullCache.scala 79:37]
    
  module OcpBurstBus : 
    input clock : Clock
    input reset : UInt<1>
    output io : {master : {M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, DataValid : UInt<1>, DataByteEn : UInt<4>}, flip S : {Resp : UInt<2>, Data : UInt<32>, CmdAccept : UInt<1>, DataAccept : UInt<1>}}, slave : {flip M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, DataValid : UInt<1>, DataByteEn : UInt<4>}, S : {Resp : UInt<2>, Data : UInt<32>, CmdAccept : UInt<1>, DataAccept : UInt<1>}}}
    
    clock is invalid
    reset is invalid
    io is invalid
    io.master.M <- io.slave.M @[OcpBurst.scala 244:15]
    io.slave.S <- io.master.S @[OcpBurst.scala 245:14]
    
  module OcpBurstBus_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {master : {M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, DataValid : UInt<1>, DataByteEn : UInt<4>}, flip S : {Resp : UInt<2>, Data : UInt<32>, CmdAccept : UInt<1>, DataAccept : UInt<1>}}, slave : {flip M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, DataValid : UInt<1>, DataByteEn : UInt<4>}, S : {Resp : UInt<2>, Data : UInt<32>, CmdAccept : UInt<1>, DataAccept : UInt<1>}}}
    
    clock is invalid
    reset is invalid
    io is invalid
    io.master.M <- io.slave.M @[OcpBurst.scala 244:15]
    io.slave.S <- io.master.S @[OcpBurst.scala 245:14]
    
  module WriteNoBuffer : 
    input clock : Clock
    input reset : UInt<1>
    output io : {readMaster : {flip M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, DataValid : UInt<1>, DataByteEn : UInt<4>}, S : {Resp : UInt<2>, Data : UInt<32>, CmdAccept : UInt<1>, DataAccept : UInt<1>}}, writeMaster : {flip M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, ByteEn : UInt<4>, AddrSpace : UInt<2>}, S : {Resp : UInt<2>, Data : UInt<32>}}, slave : {M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, DataValid : UInt<1>, DataByteEn : UInt<4>}, flip S : {Resp : UInt<2>, Data : UInt<32>, CmdAccept : UInt<1>, DataAccept : UInt<1>}}, perf : {hit : UInt<1>, miss : UInt<1>}}
    
    clock is invalid
    reset is invalid
    io is invalid
    io.perf.hit <= UInt<1>("h00") @[WriteNoBuffer.scala 56:15]
    io.perf.miss <= UInt<1>("h00") @[WriteNoBuffer.scala 57:16]
    reg state : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[WriteNoBuffer.scala 68:18]
    reg cntReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[WriteNoBuffer.scala 69:19]
    reg writeMasterReg : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, ByteEn : UInt<4>, AddrSpace : UInt<2>}, clock @[WriteNoBuffer.scala 72:27]
    io.readMaster.S <- io.slave.S @[WriteNoBuffer.scala 75:19]
    io.writeMaster.S <- io.slave.S @[WriteNoBuffer.scala 76:20]
    io.writeMaster.S.Resp <= UInt<2>("h00") @[WriteNoBuffer.scala 77:25]
    io.slave.M <- io.readMaster.M @[WriteNoBuffer.scala 80:14]
    node wrPos = bits(writeMasterReg.Addr, 3, 2) @[WriteNoBuffer.scala 82:34]
    node _T = eq(state, UInt<2>("h01")) @[WriteNoBuffer.scala 85:14]
    when _T : @[WriteNoBuffer.scala 85:25]
      io.readMaster.S.Resp <= UInt<2>("h00") @[WriteNoBuffer.scala 86:26]
      node _T_1 = eq(cntReg, UInt<1>("h00")) @[WriteNoBuffer.scala 87:17]
      when _T_1 : @[WriteNoBuffer.scala 87:30]
        io.slave.M.Cmd <= UInt<3>("h01") @[WriteNoBuffer.scala 88:22]
        node hi = bits(writeMasterReg.Addr, 31, 4) @[WriteNoBuffer.scala 89:49]
        node lo = mux(UInt<1>("h00"), UInt<4>("h0f"), UInt<4>("h00")) @[Bitwise.scala 72:12]
        node _T_2 = cat(hi, lo) @[Cat.scala 30:58]
        io.slave.M.Addr <= _T_2 @[WriteNoBuffer.scala 89:23]
        skip @[WriteNoBuffer.scala 87:30]
      io.slave.M.DataValid <= UInt<1>("h01") @[WriteNoBuffer.scala 92:26]
      io.slave.M.Data <= writeMasterReg.Data @[WriteNoBuffer.scala 93:21]
      io.slave.M.DataByteEn <= UInt<1>("h00") @[WriteNoBuffer.scala 94:27]
      node _T_3 = eq(cntReg, wrPos) @[WriteNoBuffer.scala 95:17]
      when _T_3 : @[WriteNoBuffer.scala 95:28]
        io.slave.M.DataByteEn <= writeMasterReg.ByteEn @[WriteNoBuffer.scala 96:29]
        skip @[WriteNoBuffer.scala 95:28]
      node _T_4 = eq(io.slave.S.DataAccept, UInt<1>("h01")) @[WriteNoBuffer.scala 98:32]
      when _T_4 : @[WriteNoBuffer.scala 98:45]
        node _T_5 = add(cntReg, UInt<1>("h01")) @[WriteNoBuffer.scala 99:24]
        node _T_6 = tail(_T_5, 1) @[WriteNoBuffer.scala 99:24]
        cntReg <= _T_6 @[WriteNoBuffer.scala 99:14]
        skip @[WriteNoBuffer.scala 98:45]
      node _T_7 = eq(cntReg, UInt<2>("h03")) @[WriteNoBuffer.scala 101:17]
      when _T_7 : @[WriteNoBuffer.scala 101:44]
        state <= UInt<2>("h02") @[WriteNoBuffer.scala 102:13]
        skip @[WriteNoBuffer.scala 101:44]
      skip @[WriteNoBuffer.scala 85:25]
    node _T_8 = eq(state, UInt<2>("h02")) @[WriteNoBuffer.scala 105:14]
    when _T_8 : @[WriteNoBuffer.scala 105:29]
      io.readMaster.S.Resp <= UInt<2>("h00") @[WriteNoBuffer.scala 106:26]
      io.writeMaster.S.Resp <= io.slave.S.Resp @[WriteNoBuffer.scala 107:27]
      node _T_9 = neq(io.slave.S.Resp, UInt<2>("h00")) @[WriteNoBuffer.scala 108:26]
      when _T_9 : @[WriteNoBuffer.scala 108:44]
        state <= UInt<2>("h00") @[WriteNoBuffer.scala 109:13]
        skip @[WriteNoBuffer.scala 108:44]
      skip @[WriteNoBuffer.scala 105:29]
    node _T_10 = neq(state, UInt<2>("h01")) @[WriteNoBuffer.scala 112:14]
    when _T_10 : @[WriteNoBuffer.scala 112:25]
      writeMasterReg <- io.writeMaster.M @[WriteNoBuffer.scala 113:20]
      skip @[WriteNoBuffer.scala 112:25]
    node _T_11 = eq(io.writeMaster.M.Cmd, UInt<3>("h01")) @[WriteNoBuffer.scala 117:29]
    when _T_11 : @[WriteNoBuffer.scala 117:44]
      state <= UInt<2>("h01") @[WriteNoBuffer.scala 118:11]
      io.perf.miss <= UInt<1>("h01") @[WriteNoBuffer.scala 119:18]
      skip @[WriteNoBuffer.scala 117:44]
    
  module DataCache : 
    input clock : Clock
    input reset : UInt<1>
    output io : {master : {flip M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, ByteEn : UInt<4>, AddrSpace : UInt<2>}, S : {Resp : UInt<2>, Data : UInt<32>}}, slave : {M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, DataValid : UInt<1>, DataByteEn : UInt<4>}, flip S : {Resp : UInt<2>, Data : UInt<32>, CmdAccept : UInt<1>, DataAccept : UInt<1>}}, scIO : {flip ena_in : UInt<1>, flip exsc : {op : UInt<3>, opData : UInt<32>, opOff : UInt<32>}, scex : {stackTop : UInt<32>, memTop : UInt<32>}, illMem : UInt<1>, stall : UInt<1>}, flip invalDCache : UInt<1>, dcPerf : {hit : UInt<1>, miss : UInt<1>}, scPerf : {spill : UInt<1>, fill : UInt<1>}, wcPerf : {hit : UInt<1>, miss : UInt<1>}}
    
    clock is invalid
    reset is invalid
    io is invalid
    node _T = eq(io.master.M.AddrSpace, UInt<2>("h02")) @[DataCache.scala 30:62]
    node selDC = and(UInt<1>("h01"), _T) @[DataCache.scala 30:37]
    reg selDCReg : UInt<1>, clock @[DataCache.scala 31:21]
    node selSC = eq(io.master.M.AddrSpace, UInt<2>("h00")) @[DataCache.scala 32:37]
    reg selSCReg : UInt<1>, clock @[DataCache.scala 33:21]
    node _T_1 = neq(io.master.M.Cmd, UInt<3>("h00")) @[DataCache.scala 34:24]
    when _T_1 : @[DataCache.scala 34:41]
      selDCReg <= selDC @[DataCache.scala 35:14]
      selSCReg <= selSC @[DataCache.scala 36:14]
      skip @[DataCache.scala 34:41]
    inst dm of DirectMappedCache @[DataCache.scala 44:13]
    dm.io is invalid
    dm.clock <= clock
    dm.reset <= reset
    dm.io.master.M <- io.master.M @[DataCache.scala 57:18]
    node _T_2 = and(UInt<1>("h01"), UInt<1>("h01")) @[DataCache.scala 59:56]
    node _T_3 = eq(io.master.M.Cmd, UInt<3>("h01")) @[DataCache.scala 60:46]
    node _T_4 = and(_T_2, _T_3) @[DataCache.scala 59:81]
    node _T_5 = or(selDC, _T_4) @[DataCache.scala 58:35]
    node _T_6 = mux(_T_5, io.master.M.Cmd, UInt<3>("h00")) @[DataCache.scala 58:28]
    dm.io.master.M.Cmd <= _T_6 @[DataCache.scala 58:22]
    dm.io.invalidate <= io.invalDCache @[DataCache.scala 62:20]
    inst sc of StackCache @[DataCache.scala 66:18]
    sc.io is invalid
    sc.clock <= clock
    sc.reset <= reset
    io.scIO <- sc.io @[DataCache.scala 67:11]
    sc.io.fromCPU.M <- io.master.M @[DataCache.scala 70:19]
    node _T_7 = mux(selSC, io.master.M.Cmd, UInt<3>("h00")) @[DataCache.scala 71:29]
    sc.io.fromCPU.M.Cmd <= _T_7 @[DataCache.scala 71:23]
    inst bp of NullCache @[DataCache.scala 75:18]
    bp.io is invalid
    bp.clock <= clock
    bp.reset <= reset
    bp.io.master.M <- io.master.M @[DataCache.scala 76:18]
    node _T_8 = eq(selDC, UInt<1>("h00")) @[DataCache.scala 77:29]
    node _T_9 = eq(selSC, UInt<1>("h00")) @[DataCache.scala 77:39]
    node _T_10 = and(_T_8, _T_9) @[DataCache.scala 77:36]
    node _T_11 = mux(_T_10, io.master.M.Cmd, UInt<3>("h00")) @[DataCache.scala 77:28]
    bp.io.master.M.Cmd <= _T_11 @[DataCache.scala 77:22]
    inst burstReadBus1 of OcpBurstBus @[DataCache.scala 81:29]
    burstReadBus1.io is invalid
    burstReadBus1.clock <= clock
    burstReadBus1.reset <= reset
    wire _WIRE : UInt<1> @[OcpBurst.scala 142:72]
    _WIRE is invalid @[OcpBurst.scala 142:72]
    reg REG : UInt<1>, clock @[OcpBurst.scala 144:24]
    wire _WIRE_1 : UInt<1> @[OcpBurst.scala 145:22]
    _WIRE_1 is invalid @[OcpBurst.scala 145:22]
    node _T_12 = neq(dm.io.slave.M.Cmd, UInt<3>("h00")) @[OcpBurst.scala 146:30]
    node _T_13 = neq(bp.io.slave.M.Cmd, UInt<3>("h00")) @[OcpBurst.scala 147:38]
    node _T_14 = mux(_T_13, UInt<1>("h01"), REG) @[OcpBurst.scala 147:25]
    node _T_15 = mux(_T_12, UInt<1>("h00"), _T_14) @[OcpBurst.scala 146:18]
    _WIRE_1 <= _T_15 @[OcpBurst.scala 146:12]
    burstReadBus1.io.slave.M <- dm.io.slave.M @[OcpBurst.scala 150:12]
    when _WIRE_1 : @[OcpBurst.scala 151:19]
      burstReadBus1.io.slave.M <- bp.io.slave.M @[OcpBurst.scala 152:14]
      skip @[OcpBurst.scala 151:19]
    node _T_16 = or(bp.io.slave.M.Cmd, dm.io.slave.M.Cmd) @[OcpBurst.scala 154:31]
    burstReadBus1.io.slave.M.Cmd <= _T_16 @[OcpBurst.scala 154:16]
    bp.io.slave.S <- burstReadBus1.io.slave.S @[OcpBurst.scala 156:11]
    dm.io.slave.S <- burstReadBus1.io.slave.S @[OcpBurst.scala 157:10]
    when REG : @[OcpBurst.scala 159:21]
      dm.io.slave.S.Resp <= UInt<2>("h00") @[OcpBurst.scala 160:17]
      skip @[OcpBurst.scala 159:21]
    else : @[OcpBurst.scala 162:14]
      bp.io.slave.S.Resp <= UInt<2>("h00") @[OcpBurst.scala 163:18]
      skip @[OcpBurst.scala 162:14]
    REG <= _WIRE_1 @[OcpBurst.scala 166:15]
    node _T_17 = eq(_WIRE_1, UInt<1>("h00")) @[OcpBurst.scala 168:17]
    _WIRE <= _T_17 @[OcpBurst.scala 168:14]
    inst burstReadBus2 of OcpBurstBus_1 @[DataCache.scala 84:29]
    burstReadBus2.io is invalid
    burstReadBus2.clock <= clock
    burstReadBus2.reset <= reset
    wire _WIRE_2 : UInt<1> @[OcpBurst.scala 142:72]
    _WIRE_2 is invalid @[OcpBurst.scala 142:72]
    reg REG_1 : UInt<1>, clock @[OcpBurst.scala 144:24]
    wire _WIRE_3 : UInt<1> @[OcpBurst.scala 145:22]
    _WIRE_3 is invalid @[OcpBurst.scala 145:22]
    node _T_18 = neq(sc.io.toMemory.M.Cmd, UInt<3>("h00")) @[OcpBurst.scala 146:30]
    node _T_19 = neq(burstReadBus1.io.master.M.Cmd, UInt<3>("h00")) @[OcpBurst.scala 147:38]
    node _T_20 = mux(_T_19, UInt<1>("h01"), REG_1) @[OcpBurst.scala 147:25]
    node _T_21 = mux(_T_18, UInt<1>("h00"), _T_20) @[OcpBurst.scala 146:18]
    _WIRE_3 <= _T_21 @[OcpBurst.scala 146:12]
    burstReadBus2.io.slave.M <- sc.io.toMemory.M @[OcpBurst.scala 150:12]
    when _WIRE_3 : @[OcpBurst.scala 151:19]
      burstReadBus2.io.slave.M <- burstReadBus1.io.master.M @[OcpBurst.scala 152:14]
      skip @[OcpBurst.scala 151:19]
    node _T_22 = or(burstReadBus1.io.master.M.Cmd, sc.io.toMemory.M.Cmd) @[OcpBurst.scala 154:31]
    burstReadBus2.io.slave.M.Cmd <= _T_22 @[OcpBurst.scala 154:16]
    burstReadBus1.io.master.S <- burstReadBus2.io.slave.S @[OcpBurst.scala 156:11]
    sc.io.toMemory.S <- burstReadBus2.io.slave.S @[OcpBurst.scala 157:10]
    when REG_1 : @[OcpBurst.scala 159:21]
      sc.io.toMemory.S.Resp <= UInt<2>("h00") @[OcpBurst.scala 160:17]
      skip @[OcpBurst.scala 159:21]
    else : @[OcpBurst.scala 162:14]
      burstReadBus1.io.master.S.Resp <= UInt<2>("h00") @[OcpBurst.scala 163:18]
      skip @[OcpBurst.scala 162:14]
    REG_1 <= _WIRE_3 @[OcpBurst.scala 166:15]
    node _T_23 = eq(_WIRE_3, UInt<1>("h00")) @[OcpBurst.scala 168:17]
    _WIRE_2 <= _T_23 @[OcpBurst.scala 168:14]
    inst wc of WriteNoBuffer @[DataCache.scala 88:18]
    wc.io is invalid
    wc.clock <= clock
    wc.reset <= reset
    wc.io.readMaster.M <- burstReadBus2.io.master.M @[DataCache.scala 89:22]
    burstReadBus2.io.master.S <- wc.io.readMaster.S @[DataCache.scala 90:29]
    wc.io.writeMaster.M <- io.master.M @[DataCache.scala 91:23]
    node _T_24 = eq(selSC, UInt<1>("h00")) @[DataCache.scala 92:34]
    node _T_25 = eq(selDC, UInt<1>("h00")) @[DataCache.scala 92:74]
    node _T_26 = or(UInt<1>("h01"), _T_25) @[DataCache.scala 92:71]
    node _T_27 = and(_T_24, _T_26) @[DataCache.scala 92:41]
    node _T_28 = mux(_T_27, io.master.M.Cmd, UInt<3>("h00")) @[DataCache.scala 92:33]
    wc.io.writeMaster.M.Cmd <= _T_28 @[DataCache.scala 92:27]
    io.slave <- wc.io.slave @[DataCache.scala 95:12]
    io.master.S.Data <= bp.io.master.S.Data @[DataCache.scala 98:20]
    when selDCReg : @[DataCache.scala 99:18]
      io.master.S.Data <= dm.io.master.S.Data @[DataCache.scala 99:37]
      skip @[DataCache.scala 99:18]
    when selSCReg : @[DataCache.scala 100:18]
      io.master.S.Data <= sc.io.fromCPU.S.Data @[DataCache.scala 100:37]
      skip @[DataCache.scala 100:18]
    node _T_29 = or(dm.io.master.S.Resp, sc.io.fromCPU.S.Resp) @[DataCache.scala 103:32]
    node _T_30 = or(_T_29, bp.io.master.S.Resp) @[DataCache.scala 103:43]
    node _T_31 = or(_T_30, wc.io.writeMaster.S.Resp) @[DataCache.scala 103:54]
    io.master.S.Resp <= _T_31 @[DataCache.scala 103:20]
    io.dcPerf <- dm.io.perf @[DataCache.scala 106:13]
    io.scPerf <- sc.io.perf @[DataCache.scala 107:13]
    io.wcPerf <- wc.io.perf @[DataCache.scala 108:13]
    
  module OcpBurstBus_2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {master : {M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, DataValid : UInt<1>, DataByteEn : UInt<4>}, flip S : {Resp : UInt<2>, Data : UInt<32>, CmdAccept : UInt<1>, DataAccept : UInt<1>}}, slave : {flip M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, DataValid : UInt<1>, DataByteEn : UInt<4>}, S : {Resp : UInt<2>, Data : UInt<32>, CmdAccept : UInt<1>, DataAccept : UInt<1>}}}
    
    clock is invalid
    reset is invalid
    io is invalid
    io.master.M <- io.slave.M @[OcpBurst.scala 244:15]
    io.slave.S <- io.master.S @[OcpBurst.scala 245:14]
    
  module NoMemoryManagement : 
    input clock : Clock
    input reset : UInt<1>
    output io : {ctrl : {flip M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, ByteEn : UInt<4>}, S : {Resp : UInt<2>, Data : UInt<32>}}, flip superMode : UInt<1>, flip exec : UInt<1>, virt : {flip M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, DataValid : UInt<1>, DataByteEn : UInt<4>}, S : {Resp : UInt<2>, Data : UInt<32>, CmdAccept : UInt<1>, DataAccept : UInt<1>}}, phys : {M : {Cmd : UInt<3>, Addr : UInt<21>, Data : UInt<32>, DataValid : UInt<1>, DataByteEn : UInt<4>}, flip S : {Resp : UInt<2>, Data : UInt<32>, CmdAccept : UInt<1>, DataAccept : UInt<1>}}}
    
    clock is invalid
    reset is invalid
    io is invalid
    io.phys.M <- io.virt.M @[NoMemoryManagement.scala 16:13]
    io.virt.S <- io.phys.S @[NoMemoryManagement.scala 17:13]
    
  module PatmosCore : 
    input clock : Clock
    input reset : UInt<1>
    output io : {superMode : UInt<1>, perf : {ic : {hit : UInt<1>, miss : UInt<1>}, dc : {hit : UInt<1>, miss : UInt<1>}, sc : {spill : UInt<1>, fill : UInt<1>}, wc : {hit : UInt<1>, miss : UInt<1>}, mem : {read : UInt<1>, write : UInt<1>}}, flip interrupts : UInt<1>[16], memPort : {M : {Cmd : UInt<3>, Addr : UInt<21>, Data : UInt<32>, DataValid : UInt<1>, DataByteEn : UInt<4>}, flip S : {Resp : UInt<2>, Data : UInt<32>, CmdAccept : UInt<1>, DataAccept : UInt<1>}}, memInOut : {M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, ByteEn : UInt<4>}, flip S : {Resp : UInt<2>, Data : UInt<32>}}, excInOut : {flip M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, ByteEn : UInt<4>}, S : {Resp : UInt<2>, Data : UInt<32>}}, mmuInOut : {flip M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, ByteEn : UInt<4>}, S : {Resp : UInt<2>, Data : UInt<32>}}}
    
    clock is invalid
    reset is invalid
    io is invalid
    inst icache of MCache @[Patmos.scala 44:13]
    icache.io is invalid
    icache.clock <= clock
    icache.reset <= reset
    inst fetch of Fetch @[Patmos.scala 56:21]
    fetch.io is invalid
    fetch.clock <= clock
    fetch.reset <= reset
    inst decode of Decode @[Patmos.scala 57:22]
    decode.io is invalid
    decode.clock <= clock
    decode.reset <= reset
    inst execute of Execute @[Patmos.scala 58:23]
    execute.io is invalid
    execute.clock <= clock
    execute.reset <= reset
    inst memory of Memory @[Patmos.scala 59:22]
    memory.io is invalid
    memory.clock <= clock
    memory.reset <= reset
    inst writeback of WriteBack @[Patmos.scala 60:25]
    writeback.io is invalid
    writeback.clock <= clock
    writeback.reset <= reset
    inst exc of Exceptions @[Patmos.scala 61:19]
    exc.io is invalid
    exc.clock <= clock
    exc.reset <= reset
    inst dcache of DataCache @[Patmos.scala 63:22]
    dcache.io is invalid
    dcache.clock <= clock
    dcache.reset <= reset
    icache.io.feicache <- fetch.io.feicache @[Patmos.scala 66:22]
    fetch.io.icachefe <- icache.io.icachefe @[Patmos.scala 67:21]
    icache.io.exicache <- execute.io.exicache @[Patmos.scala 68:22]
    memory.io.icacheIllMem <= icache.io.illMem @[Patmos.scala 69:26]
    decode.io.fedec <- fetch.io.fedec @[Patmos.scala 71:19]
    execute.io.decex <- decode.io.decex @[Patmos.scala 72:20]
    memory.io.exmem <- execute.io.exmem @[Patmos.scala 73:19]
    writeback.io.memwb <- memory.io.memwb @[Patmos.scala 74:22]
    decode.io.rfWrite <- writeback.io.rfWrite @[Patmos.scala 76:21]
    execute.io.exResult <- memory.io.exResult @[Patmos.scala 79:23]
    execute.io.memResult <- writeback.io.memResult @[Patmos.scala 80:24]
    dcache.io.scIO.exsc <- execute.io.exsc @[Patmos.scala 83:23]
    execute.io.scex <- dcache.io.scIO.scex @[Patmos.scala 84:19]
    memory.io.scacheIllMem <= dcache.io.scIO.illMem @[Patmos.scala 85:26]
    fetch.io.exfe <- execute.io.exfe @[Patmos.scala 88:17]
    fetch.io.memfe <- memory.io.memfe @[Patmos.scala 90:18]
    execute.io.feex <- fetch.io.feex @[Patmos.scala 92:19]
    io.memInOut <- memory.io.localInOut @[Patmos.scala 94:15]
    io.excInOut <- exc.io.ocp @[Patmos.scala 97:15]
    exc.io.intrs <- io.interrupts @[Patmos.scala 98:16]
    decode.io.exc <- exc.io.excdec @[Patmos.scala 99:17]
    exc.io.memexc <- memory.io.exc @[Patmos.scala 100:17]
    dcache.io.master.M <- memory.io.globalInOut.M @[Patmos.scala 103:22]
    memory.io.globalInOut.S <- dcache.io.master.S @[Patmos.scala 104:27]
    inst burstBus of OcpBurstBus_2 @[Patmos.scala 107:24]
    burstBus.io is invalid
    burstBus.clock <= clock
    burstBus.reset <= reset
    wire selICache : UInt<1> @[Patmos.scala 108:23]
    selICache is invalid @[Patmos.scala 108:23]
    reg REG : UInt<1>, clock @[OcpBurst.scala 144:24]
    wire _WIRE : UInt<1> @[OcpBurst.scala 145:22]
    _WIRE is invalid @[OcpBurst.scala 145:22]
    node _T = neq(icache.io.ocp_port.M.Cmd, UInt<3>("h00")) @[OcpBurst.scala 146:30]
    node _T_1 = neq(dcache.io.slave.M.Cmd, UInt<3>("h00")) @[OcpBurst.scala 147:38]
    node _T_2 = mux(_T_1, UInt<1>("h01"), REG) @[OcpBurst.scala 147:25]
    node _T_3 = mux(_T, UInt<1>("h00"), _T_2) @[OcpBurst.scala 146:18]
    _WIRE <= _T_3 @[OcpBurst.scala 146:12]
    burstBus.io.slave.M <- icache.io.ocp_port.M @[OcpBurst.scala 150:12]
    when _WIRE : @[OcpBurst.scala 151:19]
      burstBus.io.slave.M <- dcache.io.slave.M @[OcpBurst.scala 152:14]
      skip @[OcpBurst.scala 151:19]
    node _T_4 = or(dcache.io.slave.M.Cmd, icache.io.ocp_port.M.Cmd) @[OcpBurst.scala 154:31]
    burstBus.io.slave.M.Cmd <= _T_4 @[OcpBurst.scala 154:16]
    dcache.io.slave.S <- burstBus.io.slave.S @[OcpBurst.scala 156:11]
    icache.io.ocp_port.S <- burstBus.io.slave.S @[OcpBurst.scala 157:10]
    when REG : @[OcpBurst.scala 159:21]
      icache.io.ocp_port.S.Resp <= UInt<2>("h00") @[OcpBurst.scala 160:17]
      skip @[OcpBurst.scala 159:21]
    else : @[OcpBurst.scala 162:14]
      dcache.io.slave.S.Resp <= UInt<2>("h00") @[OcpBurst.scala 163:18]
      skip @[OcpBurst.scala 162:14]
    REG <= _WIRE @[OcpBurst.scala 166:15]
    node _T_5 = eq(_WIRE, UInt<1>("h00")) @[OcpBurst.scala 168:17]
    selICache <= _T_5 @[OcpBurst.scala 168:14]
    inst mmu of NoMemoryManagement @[Patmos.scala 119:19]
    mmu.io is invalid
    mmu.clock <= clock
    mmu.reset <= reset
    mmu.io.exec <= selICache @[Patmos.scala 120:15]
    io.mmuInOut <- mmu.io.ctrl @[Patmos.scala 121:15]
    mmu.io.virt.M <- burstBus.io.master.M @[Patmos.scala 122:17]
    burstBus.io.master.S <- mmu.io.virt.S @[Patmos.scala 123:24]
    node _T_6 = eq(dcache.io.scIO.stall, UInt<1>("h00")) @[Patmos.scala 126:44]
    node _T_7 = and(icache.io.ena_out, _T_6) @[Patmos.scala 126:41]
    memory.io.ena_in <= _T_7 @[Patmos.scala 126:20]
    node _T_8 = eq(dcache.io.scIO.stall, UInt<1>("h00")) @[Patmos.scala 127:44]
    node _T_9 = and(memory.io.ena_out, _T_8) @[Patmos.scala 127:41]
    icache.io.ena_in <= _T_9 @[Patmos.scala 127:20]
    node _T_10 = and(memory.io.ena_out, icache.io.ena_out) @[Patmos.scala 128:46]
    dcache.io.scIO.ena_in <= _T_10 @[Patmos.scala 128:25]
    node _T_11 = and(memory.io.ena_out, icache.io.ena_out) @[Patmos.scala 131:34]
    node _T_12 = eq(dcache.io.scIO.stall, UInt<1>("h00")) @[Patmos.scala 131:56]
    node enable = and(_T_11, _T_12) @[Patmos.scala 131:54]
    fetch.io.ena <= enable @[Patmos.scala 132:16]
    decode.io.ena <= enable @[Patmos.scala 133:17]
    execute.io.ena <= enable @[Patmos.scala 134:18]
    writeback.io.ena <= enable @[Patmos.scala 135:20]
    exc.io.ena <= enable @[Patmos.scala 136:14]
    reg enableReg : UInt<1>, clock @[Patmos.scala 137:22]
    enableReg <= enable @[Patmos.scala 137:22]
    node _T_13 = or(memory.io.flush, execute.io.brflush) @[Patmos.scala 144:28]
    decode.io.flush <= _T_13 @[Patmos.scala 144:19]
    execute.io.flush <= memory.io.flush @[Patmos.scala 145:20]
    icache.io.invalidate <= exc.io.invalICache @[Patmos.scala 148:24]
    dcache.io.invalDCache <= exc.io.invalDCache @[Patmos.scala 149:25]
    mmu.io.superMode <= exc.io.superMode @[Patmos.scala 152:20]
    io.superMode <= exc.io.superMode @[Patmos.scala 153:16]
    io.perf.ic <- icache.io.perf @[Patmos.scala 156:14]
    io.perf.dc <- dcache.io.dcPerf @[Patmos.scala 157:14]
    io.perf.sc <- dcache.io.scPerf @[Patmos.scala 158:14]
    io.perf.wc <- dcache.io.wcPerf @[Patmos.scala 159:14]
    node _T_14 = eq(io.memPort.M.Cmd, UInt<3>("h02")) @[Patmos.scala 160:41]
    node _T_15 = eq(io.memPort.S.CmdAccept, UInt<1>("h01")) @[Patmos.scala 161:28]
    node _T_16 = and(_T_14, _T_15) @[Patmos.scala 160:55]
    io.perf.mem.read <= _T_16 @[Patmos.scala 160:20]
    node _T_17 = eq(io.memPort.M.Cmd, UInt<3>("h01")) @[Patmos.scala 162:42]
    node _T_18 = eq(io.memPort.S.CmdAccept, UInt<1>("h01")) @[Patmos.scala 163:28]
    node _T_19 = and(_T_17, _T_18) @[Patmos.scala 162:56]
    io.perf.mem.write <= _T_19 @[Patmos.scala 162:21]
    io.memPort <- mmu.io.phys @[Patmos.scala 166:14]
    
  module Hardlock : 
    input clock : Clock
    input reset : UInt<1>
    output io : {cores : {flip sel : UInt<1>, flip op : UInt<1>, flip en : UInt<1>, blck : UInt<1>}[1]}
    
    clock is invalid
    reset is invalid
    io is invalid
    wire _WIRE : UInt<1>[1] @[compatibility.scala 127:12]
    _WIRE is invalid @[compatibility.scala 127:12]
    _WIRE[0] <= UInt<1>("h00") @[compatibility.scala 127:12]
    wire _WIRE_1 : UInt<1>[1][1] @[compatibility.scala 127:12]
    _WIRE_1 is invalid @[compatibility.scala 127:12]
    _WIRE_1[0] <- _WIRE @[compatibility.scala 127:12]
    reg queueReg : UInt<1>[1][1], clock with : (reset => (reset, _WIRE_1)) @[Hardlock.scala 35:25]
    node _T = eq(io.cores[0].sel, UInt<1>("h00")) @[Hardlock.scala 38:28]
    node _T_1 = eq(io.cores[0].en, UInt<1>("h01")) @[Hardlock.scala 38:58]
    node _T_2 = and(_T, _T_1) @[Hardlock.scala 38:40]
    when _T_2 : @[Hardlock.scala 38:74]
      queueReg[0][0] <= io.cores[0].op @[Hardlock.scala 39:24]
      skip @[Hardlock.scala 38:74]
    wire _WIRE_2 : UInt<1>[1] @[compatibility.scala 127:12]
    _WIRE_2 is invalid @[compatibility.scala 127:12]
    _WIRE_2[0] <= UInt<1>("h00") @[compatibility.scala 127:12]
    reg curReg : UInt<1>[1], clock with : (reset => (reset, _WIRE_2)) @[Hardlock.scala 44:23]
    wire blocks : UInt<1>[1][1] @[Hardlock.scala 46:20]
    blocks is invalid @[Hardlock.scala 46:20]
    node _T_3 = neq(curReg[0], UInt<1>("h00")) @[Hardlock.scala 50:52]
    node _T_4 = and(queueReg[0][0], _T_3) @[Hardlock.scala 50:38]
    blocks[0][0] <= _T_4 @[Hardlock.scala 50:20]
    node _T_5 = orr(blocks[0][0]) @[Hardlock.scala 52:42]
    io.cores[0].blck <= _T_5 @[Hardlock.scala 52:22]
    wire hi : UInt<1>[1][1] @[Hardlock.scala 58:16]
    hi is invalid @[Hardlock.scala 58:16]
    wire lo : UInt<1>[1][1] @[Hardlock.scala 59:16]
    lo is invalid @[Hardlock.scala 59:16]
    node _T_6 = gt(curReg[0], UInt<1>("h00")) @[Hardlock.scala 63:48]
    node _T_7 = and(queueReg[0][0], _T_6) @[Hardlock.scala 63:34]
    lo[0][0] <= _T_7 @[Hardlock.scala 63:16]
    node _T_8 = leq(curReg[0], UInt<1>("h00")) @[Hardlock.scala 64:48]
    node _T_9 = and(queueReg[0][0], _T_8) @[Hardlock.scala 64:34]
    hi[0][0] <= _T_9 @[Hardlock.scala 64:16]
    node _T_10 = orr(hi[0][0]) @[Hardlock.scala 67:23]
    when _T_10 : @[Hardlock.scala 67:28]
      curReg[0] <= UInt<1>("h00") @[Hardlock.scala 68:17]
      skip @[Hardlock.scala 67:28]
    else : @[Hardlock.scala 70:16]
      curReg[0] <= UInt<1>("h00") @[Hardlock.scala 71:17]
      skip @[Hardlock.scala 70:16]
    
  module HardlockOCPWrapper : 
    input clock : Clock
    input reset : UInt<1>
    output io : {cores : {flip M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, ByteEn : UInt<4>}, S : {Resp : UInt<2>, Data : UInt<32>}}[1]}
    
    clock is invalid
    reset is invalid
    io is invalid
    inst hardlock of Hardlock @[Hardlock.scala 78:24]
    hardlock.io is invalid
    hardlock.clock <= clock
    hardlock.reset <= reset
    reg reqReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Hardlock.scala 84:19]
    wire reqBools : UInt<1>[1] @[Hardlock.scala 85:22]
    reqBools is invalid @[Hardlock.scala 85:22]
    node _T = bits(reqReg, 0, 0) @[Hardlock.scala 87:22]
    reqBools[0] <= _T @[Hardlock.scala 87:12]
    node _T_1 = bits(io.cores[0].M.Data, 0, 0) @[Hardlock.scala 90:50]
    hardlock.io.cores[0].op <= _T_1 @[Hardlock.scala 90:29]
    node _T_2 = shr(io.cores[0].M.Data, 1) @[Hardlock.scala 91:52]
    hardlock.io.cores[0].sel <= _T_2 @[Hardlock.scala 91:30]
    hardlock.io.cores[0].en <= UInt<1>("h00") @[Hardlock.scala 92:29]
    node _T_3 = eq(io.cores[0].M.Cmd, UInt<3>("h01")) @[Hardlock.scala 93:28]
    when _T_3 : @[Hardlock.scala 93:43]
      hardlock.io.cores[0].en <= UInt<1>("h01") @[Hardlock.scala 94:31]
      skip @[Hardlock.scala 93:43]
    node _T_4 = neq(io.cores[0].M.Cmd, UInt<3>("h00")) @[Hardlock.scala 97:28]
    when _T_4 : @[Hardlock.scala 97:45]
      reqBools[0] <= UInt<1>("h01") @[Hardlock.scala 98:19]
      reqReg <= reqBools[0] @[Hardlock.scala 99:14]
      skip @[Hardlock.scala 97:45]
    else : @[Hardlock.scala 101:86]
      node _T_5 = bits(reqReg, 0, 0) @[Hardlock.scala 101:21]
      node _T_6 = eq(_T_5, UInt<1>("h01")) @[Hardlock.scala 101:25]
      node _T_7 = eq(hardlock.io.cores[0].blck, UInt<1>("h00")) @[Hardlock.scala 101:69]
      node _T_8 = and(_T_6, _T_7) @[Hardlock.scala 101:40]
      when _T_8 : @[Hardlock.scala 101:86]
        reqBools[0] <= UInt<1>("h00") @[Hardlock.scala 102:19]
        reqReg <= reqBools[0] @[Hardlock.scala 103:14]
        skip @[Hardlock.scala 101:86]
    io.cores[0].S.Resp <= UInt<2>("h00") @[Hardlock.scala 106:24]
    node _T_9 = bits(reqReg, 0, 0) @[Hardlock.scala 107:16]
    node _T_10 = eq(_T_9, UInt<1>("h01")) @[Hardlock.scala 107:20]
    node _T_11 = eq(hardlock.io.cores[0].blck, UInt<1>("h00")) @[Hardlock.scala 107:64]
    node _T_12 = and(_T_10, _T_11) @[Hardlock.scala 107:35]
    when _T_12 : @[Hardlock.scala 107:81]
      io.cores[0].S.Resp <= UInt<2>("h01") @[Hardlock.scala 108:26]
      skip @[Hardlock.scala 107:81]
    io.cores[0].S.Data <= UInt<1>("h00") @[Hardlock.scala 111:24]
    
  module QueueCompatibility : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<8>}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<8>}, count : UInt<5>}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : UInt<8>[16] @[Decoupled.scala 218:16]
    reg enq_ptr_value : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Counter.scala 60:40]
    reg deq_ptr_value : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Decoupled.scala 221:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq is invalid
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq is invalid
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 230:8]
      MPORT <= io.enq.bits @[Decoupled.scala 230:24]
      node wrap = eq(enq_ptr_value, UInt<4>("h0f")) @[Counter.scala 72:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h01")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 76:15]
      skip @[Decoupled.scala 229:17]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(deq_ptr_value, UInt<4>("h0f")) @[Counter.scala 72:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h01")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 76:15]
      skip @[Decoupled.scala 233:17]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
      skip @[Decoupled.scala 236:28]
    node _io_deq_valid_T = eq(empty, UInt<1>("h00")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h00")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 242:21]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 259:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<5>("h010"), UInt<1>("h00")) @[Decoupled.scala 259:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 259:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 259:14]
    
  module QueueCompatibility_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<8>}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<8>}, count : UInt<5>}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : UInt<8>[16] @[Decoupled.scala 218:16]
    reg enq_ptr_value : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Counter.scala 60:40]
    reg deq_ptr_value : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Decoupled.scala 221:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq is invalid
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq is invalid
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 230:8]
      MPORT <= io.enq.bits @[Decoupled.scala 230:24]
      node wrap = eq(enq_ptr_value, UInt<4>("h0f")) @[Counter.scala 72:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h01")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 76:15]
      skip @[Decoupled.scala 229:17]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(deq_ptr_value, UInt<4>("h0f")) @[Counter.scala 72:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h01")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 76:15]
      skip @[Decoupled.scala 233:17]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
      skip @[Decoupled.scala 236:28]
    node _io_deq_valid_T = eq(empty, UInt<1>("h00")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h00")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 242:21]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 259:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<5>("h010"), UInt<1>("h00")) @[Decoupled.scala 259:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 259:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 259:14]
    
  module Uart : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip superMode : UInt<1>, ocp : {flip M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, ByteEn : UInt<4>}, S : {Resp : UInt<2>, Data : UInt<32>}}, pins : {tx : UInt<1>, flip rx : UInt<1>}}
    
    clock is invalid
    reset is invalid
    io is invalid
    wire uartOcpEmu : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>} @[Uart.scala 44:26]
    uartOcpEmu is invalid @[Uart.scala 44:26]
    uartOcpEmu <- io.ocp.M @[Uart.scala 46:16]
    reg tx_baud_counter : UInt<10>, clock with : (reset => (reset, UInt<10>("h00"))) @[Uart.scala 49:34]
    reg tx_baud_tick : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Uart.scala 50:34]
    reg tx_state : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Uart.scala 53:34]
    reg tx_buff : UInt<10>, clock with : (reset => (reset, UInt<10>("h00"))) @[Uart.scala 54:34]
    reg tx_reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[Uart.scala 55:34]
    reg tx_counter : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Uart.scala 56:34]
    inst txQueue of QueueCompatibility @[Uart.scala 58:25]
    txQueue.io is invalid
    txQueue.clock <= clock
    txQueue.reset <= reset
    node _T = bits(io.ocp.M.Data, 7, 0) @[Uart.scala 59:45]
    txQueue.io.enq.bits <= _T @[Uart.scala 59:29]
    txQueue.io.enq.valid <= UInt<1>("h00") @[Uart.scala 60:29]
    txQueue.io.deq.ready <= UInt<1>("h00") @[Uart.scala 61:29]
    reg rxd_reg0 : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[Uart.scala 63:34]
    reg rxd_reg1 : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[Uart.scala 64:34]
    reg rxd_reg2 : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[Uart.scala 65:34]
    reg rx_baud_counter : UInt<10>, clock with : (reset => (reset, UInt<10>("h00"))) @[Uart.scala 67:34]
    reg rx_baud_tick : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Uart.scala 68:34]
    reg rx_enable : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Uart.scala 69:34]
    reg rx_buff : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Uart.scala 71:34]
    reg rx_counter : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Uart.scala 72:34]
    reg rx_state : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Uart.scala 74:34]
    inst rxQueue of QueueCompatibility_1 @[Uart.scala 76:25]
    rxQueue.io is invalid
    rxQueue.clock <= clock
    rxQueue.reset <= reset
    rxQueue.io.enq.bits <= rx_buff @[Uart.scala 77:29]
    rxQueue.io.enq.valid <= UInt<1>("h00") @[Uart.scala 78:29]
    rxQueue.io.deq.ready <= UInt<1>("h00") @[Uart.scala 79:29]
    reg respReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Uart.scala 82:22]
    respReg <= UInt<2>("h00") @[Uart.scala 83:13]
    reg rdDataReg : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Uart.scala 85:24]
    node _T_1 = bits(io.ocp.M.Addr, 2, 2) @[Uart.scala 86:35]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[Uart.scala 86:39]
    node hi = cat(UInt<6>("h00"), rxQueue.io.deq.valid) @[Cat.scala 30:58]
    node _T_3 = cat(hi, txQueue.io.enq.ready) @[Cat.scala 30:58]
    node _T_4 = mux(_T_2, _T_3, rxQueue.io.deq.bits) @[Uart.scala 86:21]
    rdDataReg <= _T_4 @[Uart.scala 86:15]
    node _T_5 = eq(io.ocp.M.Cmd, UInt<3>("h01")) @[Uart.scala 91:24]
    when _T_5 : @[Uart.scala 91:39]
      respReg <= UInt<2>("h01") @[Uart.scala 92:17]
      node _T_6 = bits(io.ocp.M.Data, 7, 0) @[Uart.scala 93:45]
      txQueue.io.enq.bits <= _T_6 @[Uart.scala 93:29]
      txQueue.io.enq.valid <= UInt<1>("h01") @[Uart.scala 94:30]
      skip @[Uart.scala 91:39]
    node _T_7 = eq(io.ocp.M.Cmd, UInt<3>("h02")) @[Uart.scala 98:23]
    when _T_7 : @[Uart.scala 98:38]
      respReg <= UInt<2>("h01") @[Uart.scala 99:17]
      node _T_8 = bits(io.ocp.M.Addr, 2, 2) @[Uart.scala 100:46]
      node _T_9 = neq(_T_8, UInt<1>("h00")) @[Uart.scala 100:50]
      rxQueue.io.deq.ready <= _T_9 @[Uart.scala 100:30]
      skip @[Uart.scala 98:38]
    io.ocp.S.Resp <= respReg @[Uart.scala 104:19]
    io.ocp.S.Data <= rdDataReg @[Uart.scala 105:19]
    node _T_10 = eq(tx_baud_counter, UInt<10>("h02b6")) @[Uart.scala 108:27]
    when _T_10 : @[Uart.scala 108:56]
      tx_baud_counter <= UInt<1>("h00") @[Uart.scala 109:29]
      tx_baud_tick <= UInt<1>("h01") @[Uart.scala 110:29]
      skip @[Uart.scala 108:56]
    else : @[Uart.scala 112:16]
      node _T_11 = add(tx_baud_counter, UInt<1>("h01")) @[Uart.scala 113:48]
      node _T_12 = tail(_T_11, 1) @[Uart.scala 113:48]
      tx_baud_counter <= _T_12 @[Uart.scala 113:29]
      tx_baud_tick <= UInt<1>("h00") @[Uart.scala 114:29]
      skip @[Uart.scala 112:16]
    node _T_13 = eq(tx_state, UInt<1>("h00")) @[Uart.scala 119:20]
    when _T_13 : @[Uart.scala 119:33]
      when txQueue.io.deq.valid : @[Uart.scala 120:37]
        txQueue.io.deq.ready <= UInt<1>("h01") @[Uart.scala 121:32]
        node hi_1 = cat(UInt<1>("h01"), txQueue.io.deq.bits) @[Cat.scala 30:58]
        node _T_14 = cat(hi_1, UInt<1>("h00")) @[Cat.scala 30:58]
        tx_buff <= _T_14 @[Uart.scala 122:32]
        tx_state <= UInt<1>("h01") @[Uart.scala 123:32]
        skip @[Uart.scala 120:37]
      skip @[Uart.scala 119:33]
    node _T_15 = eq(tx_state, UInt<1>("h01")) @[Uart.scala 127:20]
    when _T_15 : @[Uart.scala 127:33]
      node _T_16 = eq(tx_baud_tick, UInt<1>("h01")) @[Uart.scala 128:28]
      when _T_16 : @[Uart.scala 128:40]
        node lo = bits(tx_buff, 9, 1) @[Uart.scala 129:54]
        node _T_17 = cat(UInt<1>("h00"), lo) @[Cat.scala 30:58]
        tx_buff <= _T_17 @[Uart.scala 129:29]
        node _T_18 = bits(tx_buff, 0, 0) @[Uart.scala 130:39]
        tx_reg <= _T_18 @[Uart.scala 130:29]
        node _T_19 = eq(tx_counter, UInt<4>("h0a")) @[Uart.scala 131:47]
        node _T_20 = add(tx_counter, UInt<1>("h01")) @[Uart.scala 131:81]
        node _T_21 = tail(_T_20, 1) @[Uart.scala 131:81]
        node _T_22 = mux(_T_19, UInt<1>("h00"), _T_21) @[Uart.scala 131:35]
        tx_counter <= _T_22 @[Uart.scala 131:29]
        node _T_23 = eq(tx_counter, UInt<4>("h0a")) @[Uart.scala 133:30]
        when _T_23 : @[Uart.scala 133:44]
          when txQueue.io.deq.valid : @[Uart.scala 134:43]
            txQueue.io.deq.ready <= UInt<1>("h01") @[Uart.scala 135:38]
            node _T_24 = cat(UInt<1>("h01"), txQueue.io.deq.bits) @[Cat.scala 30:58]
            tx_buff <= _T_24 @[Uart.scala 136:38]
            tx_reg <= UInt<1>("h00") @[Uart.scala 137:38]
            tx_counter <= UInt<1>("h01") @[Uart.scala 138:38]
            skip @[Uart.scala 134:43]
          else : @[Uart.scala 140:26]
            tx_reg <= UInt<1>("h01") @[Uart.scala 141:33]
            tx_counter <= UInt<1>("h00") @[Uart.scala 142:33]
            tx_state <= UInt<1>("h00") @[Uart.scala 143:33]
            skip @[Uart.scala 140:26]
          skip @[Uart.scala 133:44]
        skip @[Uart.scala 128:40]
      skip @[Uart.scala 127:33]
    io.pins.tx <= tx_reg @[Uart.scala 150:16]
    when rx_enable : @[Uart.scala 154:22]
      node _T_25 = eq(rx_baud_counter, UInt<10>("h02b6")) @[Uart.scala 155:31]
      when _T_25 : @[Uart.scala 155:60]
        rx_baud_counter <= UInt<1>("h00") @[Uart.scala 156:33]
        rx_baud_tick <= UInt<1>("h01") @[Uart.scala 157:33]
        skip @[Uart.scala 155:60]
      else : @[Uart.scala 159:20]
        node _T_26 = add(rx_baud_counter, UInt<1>("h01")) @[Uart.scala 160:52]
        node _T_27 = tail(_T_26, 1) @[Uart.scala 160:52]
        rx_baud_counter <= _T_27 @[Uart.scala 160:33]
        rx_baud_tick <= UInt<1>("h00") @[Uart.scala 161:33]
        skip @[Uart.scala 159:20]
      skip @[Uart.scala 154:22]
    rxd_reg0 <= io.pins.rx @[Uart.scala 168:29]
    rxd_reg1 <= rxd_reg0 @[Uart.scala 169:29]
    rxd_reg2 <= rxd_reg1 @[Uart.scala 170:29]
    node _T_28 = eq(rx_state, UInt<2>("h00")) @[Uart.scala 174:20]
    when _T_28 : @[Uart.scala 174:33]
      node _T_29 = eq(rxd_reg2, UInt<1>("h00")) @[Uart.scala 175:24]
      when _T_29 : @[Uart.scala 175:36]
        rx_state <= UInt<2>("h01") @[Uart.scala 176:29]
        node _T_30 = div(UInt<10>("h02b6"), UInt<2>("h02")) @[Uart.scala 177:57]
        rx_baud_counter <= _T_30 @[Uart.scala 177:29]
        rx_enable <= UInt<1>("h01") @[Uart.scala 178:29]
        skip @[Uart.scala 175:36]
      skip @[Uart.scala 174:33]
    node _T_31 = eq(rx_state, UInt<2>("h01")) @[Uart.scala 182:20]
    when _T_31 : @[Uart.scala 182:33]
      node _T_32 = eq(rx_baud_tick, UInt<1>("h01")) @[Uart.scala 183:28]
      when _T_32 : @[Uart.scala 183:41]
        node _T_33 = eq(rxd_reg2, UInt<1>("h00")) @[Uart.scala 184:28]
        when _T_33 : @[Uart.scala 184:41]
          rx_state <= UInt<2>("h02") @[Uart.scala 185:33]
          skip @[Uart.scala 184:41]
        else : @[Uart.scala 187:23]
          rx_state <= UInt<2>("h00") @[Uart.scala 188:33]
          skip @[Uart.scala 187:23]
        skip @[Uart.scala 183:41]
      skip @[Uart.scala 182:33]
    node _T_34 = eq(rx_state, UInt<2>("h02")) @[Uart.scala 193:20]
    when _T_34 : @[Uart.scala 193:41]
      node _T_35 = eq(rx_baud_tick, UInt<1>("h01")) @[Uart.scala 194:28]
      when _T_35 : @[Uart.scala 194:40]
        node _T_36 = eq(rx_counter, UInt<3>("h07")) @[Uart.scala 195:40]
        node _T_37 = mux(_T_36, UInt<2>("h03"), UInt<2>("h02")) @[Uart.scala 195:28]
        rx_state <= _T_37 @[Uart.scala 195:22]
        node _T_38 = eq(rx_counter, UInt<3>("h07")) @[Uart.scala 196:42]
        node _T_39 = add(rx_counter, UInt<1>("h01")) @[Uart.scala 196:75]
        node _T_40 = tail(_T_39, 1) @[Uart.scala 196:75]
        node _T_41 = mux(_T_38, UInt<1>("h00"), _T_40) @[Uart.scala 196:30]
        rx_counter <= _T_41 @[Uart.scala 196:24]
        node lo_1 = bits(rx_buff, 7, 1) @[Uart.scala 197:46]
        node _T_42 = cat(rxd_reg2, lo_1) @[Cat.scala 30:58]
        rx_buff <= _T_42 @[Uart.scala 197:21]
        skip @[Uart.scala 194:40]
      skip @[Uart.scala 193:41]
    node _T_43 = eq(rx_state, UInt<2>("h03")) @[Uart.scala 201:20]
    when _T_43 : @[Uart.scala 201:37]
      node _T_44 = eq(rx_baud_tick, UInt<1>("h01")) @[Uart.scala 202:28]
      when _T_44 : @[Uart.scala 202:40]
        node _T_45 = eq(rxd_reg2, UInt<1>("h01")) @[Uart.scala 203:28]
        when _T_45 : @[Uart.scala 203:41]
          rx_state <= UInt<2>("h00") @[Uart.scala 204:33]
          rx_enable <= UInt<1>("h00") @[Uart.scala 205:33]
          rxQueue.io.enq.bits <= rx_buff @[Uart.scala 206:38]
          rxQueue.io.enq.valid <= UInt<1>("h01") @[Uart.scala 207:38]
          skip @[Uart.scala 203:41]
        else : @[Uart.scala 209:23]
          rx_state <= UInt<2>("h00") @[Uart.scala 210:33]
          rx_enable <= UInt<1>("h00") @[Uart.scala 211:33]
          skip @[Uart.scala 209:23]
        skip @[Uart.scala 202:40]
      skip @[Uart.scala 201:37]
    
  module UartCmp : 
    input clock : Clock
    input reset : UInt<1>
    output io : {cores : {flip M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, ByteEn : UInt<4>}, S : {Resp : UInt<2>, Data : UInt<32>}}[1], pins : {tx : UInt<1>, flip rx : UInt<1>}}
    
    clock is invalid
    reset is invalid
    io is invalid
    inst uart of Uart @[UartCmp.scala 29:20]
    uart.io is invalid
    uart.clock <= clock
    uart.reset <= reset
    io.pins <- uart.io.pins @[UartCmp.scala 31:11]
    node _T = neq(io.cores[0].M.Cmd, UInt<3>("h00")) @[UartCmp.scala 33:59]
    uart.io.ocp.M <- io.cores[0].M @[UartCmp.scala 33:17]
    reg REG : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[UartCmp.scala 36:21]
    node _T_1 = neq(io.cores[0].M.Cmd, UInt<3>("h00")) @[UartCmp.scala 37:28]
    when _T_1 : @[UartCmp.scala 37:45]
      REG <= UInt<1>("h01") @[UartCmp.scala 38:14]
      skip @[UartCmp.scala 37:45]
    else : @[UartCmp.scala 39:52]
      node _T_2 = eq(uart.io.ocp.S.Resp, UInt<2>("h01")) @[UartCmp.scala 39:35]
      when _T_2 : @[UartCmp.scala 39:52]
        REG <= UInt<1>("h00") @[UartCmp.scala 40:14]
        skip @[UartCmp.scala 39:52]
    io.cores[0].S.Data <= uart.io.ocp.S.Data @[UartCmp.scala 43:24]
    io.cores[0].S.Resp <= uart.io.ocp.S.Resp @[UartCmp.scala 44:24]
    node _T_3 = neq(REG, UInt<1>("h01")) @[UartCmp.scala 45:17]
    when _T_3 : @[UartCmp.scala 45:33]
      io.cores[0].S.Resp <= UInt<2>("h00") @[UartCmp.scala 46:26]
      skip @[UartCmp.scala 45:33]
    
  module CpuInfo : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip superMode : UInt<1>, ocp : {flip M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, ByteEn : UInt<4>}, S : {Resp : UInt<2>, Data : UInt<32>}}, flip nr : UInt<1>, flip cnt : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg masterReg : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, ByteEn : UInt<4>}, clock @[CpuInfo.scala 26:22]
    masterReg <- io.ocp.M @[CpuInfo.scala 26:22]
    wire resp : UInt @[CpuInfo.scala 29:18]
    resp is invalid @[CpuInfo.scala 29:18]
    wire data : UInt<32> @[CpuInfo.scala 30:18]
    data is invalid @[CpuInfo.scala 30:18]
    resp <= UInt<2>("h00") @[CpuInfo.scala 31:8]
    data <= UInt<1>("h00") @[CpuInfo.scala 32:8]
    node _T = eq(masterReg.Cmd, UInt<3>("h01")) @[CpuInfo.scala 35:22]
    when _T : @[CpuInfo.scala 35:37]
      resp <= UInt<2>("h01") @[CpuInfo.scala 36:10]
      skip @[CpuInfo.scala 35:37]
    wire rom : UInt<32>[9] @[Utility.scala 54:14]
    rom is invalid @[Utility.scala 54:14]
    rom[0] <= UInt<32>("h0f0008024") @[Utility.scala 54:14]
    rom[1] <= UInt<32>("h00") @[Utility.scala 54:14]
    rom[2] <= UInt<32>("h020000") @[Utility.scala 54:14]
    rom[3] <= UInt<32>("h040c") @[Utility.scala 54:14]
    rom[4] <= UInt<32>("h070c") @[Utility.scala 54:14]
    rom[5] <= UInt<32>("h06bc") @[Utility.scala 54:14]
    rom[6] <= UInt<32>("h06f0") @[Utility.scala 54:14]
    rom[7] <= UInt<32>("h06f8") @[Utility.scala 54:14]
    rom[8] <= UInt<32>("h0700") @[Utility.scala 54:14]
    node _T_1 = bits(masterReg.Addr, 5, 2) @[CpuInfo.scala 41:35]
    node _T_2 = bits(masterReg.Addr, 5, 2) @[CpuInfo.scala 44:24]
    node _T_3 = eq(UInt<1>("h00"), _T_2) @[Conditional.scala 37:30]
    when _T_3 : @[Conditional.scala 40:58]
      data <= io.nr @[CpuInfo.scala 45:30]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_4 = eq(UInt<1>("h01"), _T_2) @[Conditional.scala 37:30]
      when _T_4 : @[Conditional.scala 39:67]
        data <= UInt<27>("h04c4b400") @[CpuInfo.scala 46:30]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_5 = eq(UInt<2>("h02"), _T_2) @[Conditional.scala 37:30]
        when _T_5 : @[Conditional.scala 39:67]
          data <= io.cnt @[CpuInfo.scala 47:30]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_6 = eq(UInt<2>("h03"), _T_2) @[Conditional.scala 37:30]
          when _T_6 : @[Conditional.scala 39:67]
            data <= UInt<2>("h02") @[CpuInfo.scala 48:30]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_7 = eq(UInt<3>("h04"), _T_2) @[Conditional.scala 37:30]
            when _T_7 : @[Conditional.scala 39:67]
              data <= UInt<22>("h0200000") @[CpuInfo.scala 51:30]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_8 = eq(UInt<3>("h05"), _T_2) @[Conditional.scala 37:30]
              when _T_8 : @[Conditional.scala 39:67]
                node _T_9 = cat(UInt<8>("h04"), UInt<7>("h00")) @[CpuInfo.scala 53:63]
                node _T_10 = cat(_T_9, UInt<1>("h00")) @[CpuInfo.scala 53:85]
                data <= _T_10 @[CpuInfo.scala 53:30]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_11 = eq(UInt<3>("h06"), _T_2) @[Conditional.scala 37:30]
                when _T_11 : @[Conditional.scala 39:67]
                  data <= UInt<14>("h02000") @[CpuInfo.scala 56:30]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_12 = eq(UInt<3>("h07"), _T_2) @[Conditional.scala 37:30]
                  when _T_12 : @[Conditional.scala 39:67]
                    node _T_13 = cat(UInt<8>("h01"), UInt<8>("h02")) @[CpuInfo.scala 58:78]
                    node _T_14 = cat(_T_13, UInt<16>("h010")) @[CpuInfo.scala 58:125]
                    data <= _T_14 @[CpuInfo.scala 58:30]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_15 = eq(UInt<4>("h08"), _T_2) @[Conditional.scala 37:30]
                    when _T_15 : @[Conditional.scala 39:67]
                      data <= UInt<13>("h01000") @[CpuInfo.scala 61:30]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_16 = eq(UInt<4>("h09"), _T_2) @[Conditional.scala 37:30]
                      when _T_16 : @[Conditional.scala 39:67]
                        node _T_17 = cat(UInt<7>("h00"), UInt<1>("h01")) @[CpuInfo.scala 63:52]
                        node _T_18 = cat(_T_17, UInt<8>("h00")) @[CpuInfo.scala 63:81]
                        node _T_19 = cat(_T_18, UInt<16>("h01")) @[CpuInfo.scala 63:128]
                        data <= _T_19 @[CpuInfo.scala 63:30]
                        skip @[Conditional.scala 39:67]
                      else : @[Conditional.scala 39:67]
                        node _T_20 = eq(UInt<4>("h0a"), _T_2) @[Conditional.scala 37:30]
                        when _T_20 : @[Conditional.scala 39:67]
                          data <= UInt<12>("h0800") @[CpuInfo.scala 66:30]
                          skip @[Conditional.scala 39:67]
                        else : @[Conditional.scala 39:67]
                          node _T_21 = eq(UInt<4>("h0b"), _T_2) @[Conditional.scala 37:30]
                          when _T_21 : @[Conditional.scala 39:67]
                            data <= UInt<1>("h00") @[CpuInfo.scala 68:30]
                            skip @[Conditional.scala 39:67]
                          else : @[Conditional.scala 39:67]
                            node _T_22 = eq(UInt<4>("h0c"), _T_2) @[Conditional.scala 37:30]
                            when _T_22 : @[Conditional.scala 39:67]
                              data <= UInt<11>("h0400") @[CpuInfo.scala 71:30]
                              skip @[Conditional.scala 39:67]
                            else : @[Conditional.scala 39:67]
                              node _T_23 = eq(UInt<4>("h0d"), _T_2) @[Conditional.scala 37:30]
                              when _T_23 : @[Conditional.scala 39:67]
                                data <= UInt<12>("h0800") @[CpuInfo.scala 74:30]
                                skip @[Conditional.scala 39:67]
    node _T_24 = bits(masterReg.Addr, 15, 15) @[CpuInfo.scala 76:23]
    node _T_25 = eq(_T_24, UInt<1>("h01")) @[CpuInfo.scala 76:28]
    when _T_25 : @[CpuInfo.scala 76:44]
      data <= rom[_T_1] @[CpuInfo.scala 77:10]
      skip @[CpuInfo.scala 76:44]
    node _T_26 = eq(masterReg.Cmd, UInt<3>("h02")) @[CpuInfo.scala 80:22]
    when _T_26 : @[CpuInfo.scala 80:37]
      resp <= UInt<2>("h01") @[CpuInfo.scala 81:10]
      skip @[CpuInfo.scala 80:37]
    io.ocp.S.Resp <= resp @[CpuInfo.scala 85:17]
    io.ocp.S.Data <= data @[CpuInfo.scala 86:17]
    
  module Leds : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip superMode : UInt<1>, ocp : {flip M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, ByteEn : UInt<4>}, S : {Resp : UInt<2>, Data : UInt<32>}}, pins : {led : UInt<9>}}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg ledReg : UInt<9>, clock with : (reset => (reset, UInt<9>("h00"))) @[Leds.scala 34:19]
    reg respReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Leds.scala 37:20]
    respReg <= UInt<2>("h00") @[Leds.scala 38:11]
    node _T = eq(io.ocp.M.Cmd, UInt<3>("h01")) @[Leds.scala 41:21]
    when _T : @[Leds.scala 41:36]
      respReg <= UInt<2>("h01") @[Leds.scala 42:13]
      node _T_1 = bits(io.ocp.M.Data, 8, 0) @[Leds.scala 43:28]
      ledReg <= _T_1 @[Leds.scala 43:12]
      skip @[Leds.scala 41:36]
    node _T_2 = eq(io.ocp.M.Cmd, UInt<3>("h02")) @[Leds.scala 47:21]
    when _T_2 : @[Leds.scala 47:36]
      respReg <= UInt<2>("h01") @[Leds.scala 48:13]
      skip @[Leds.scala 47:36]
    io.ocp.S.Resp <= respReg @[Leds.scala 52:17]
    io.ocp.S.Data <= ledReg @[Leds.scala 53:17]
    reg REG : UInt, clock @[Leds.scala 56:21]
    REG <= ledReg @[Leds.scala 56:21]
    io.pins.led <= REG @[Leds.scala 56:15]
    
  module Keys : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip superMode : UInt<1>, ocp : {flip M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, ByteEn : UInt<4>}, S : {Resp : UInt<2>, Data : UInt<32>}}, pins : {flip key : UInt<4>}, interrupts : UInt<1>[4]}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg keySyncReg : UInt<4>, clock @[Keys.scala 35:23]
    reg keyReg : UInt<4>, clock @[Keys.scala 36:19]
    reg respReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Keys.scala 39:20]
    respReg <= UInt<2>("h00") @[Keys.scala 40:11]
    node _T = eq(io.ocp.M.Cmd, UInt<3>("h02")) @[Keys.scala 43:21]
    when _T : @[Keys.scala 43:36]
      respReg <= UInt<2>("h01") @[Keys.scala 44:13]
      skip @[Keys.scala 43:36]
    io.ocp.S.Resp <= respReg @[Keys.scala 48:17]
    io.ocp.S.Data <= keyReg @[Keys.scala 49:17]
    keySyncReg <= io.pins.key @[Keys.scala 52:14]
    keyReg <= keySyncReg @[Keys.scala 53:10]
    node _T_1 = bits(keyReg, 0, 0) @[Keys.scala 57:31]
    node _T_2 = eq(_T_1, UInt<1>("h01")) @[Keys.scala 57:35]
    node _T_3 = bits(keySyncReg, 0, 0) @[Keys.scala 57:63]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[Keys.scala 57:67]
    node _T_5 = and(_T_2, _T_4) @[Keys.scala 57:50]
    io.interrupts[0] <= _T_5 @[Keys.scala 57:22]
    node _T_6 = bits(keyReg, 1, 1) @[Keys.scala 57:31]
    node _T_7 = eq(_T_6, UInt<1>("h01")) @[Keys.scala 57:35]
    node _T_8 = bits(keySyncReg, 1, 1) @[Keys.scala 57:63]
    node _T_9 = eq(_T_8, UInt<1>("h00")) @[Keys.scala 57:67]
    node _T_10 = and(_T_7, _T_9) @[Keys.scala 57:50]
    io.interrupts[1] <= _T_10 @[Keys.scala 57:22]
    node _T_11 = bits(keyReg, 2, 2) @[Keys.scala 57:31]
    node _T_12 = eq(_T_11, UInt<1>("h01")) @[Keys.scala 57:35]
    node _T_13 = bits(keySyncReg, 2, 2) @[Keys.scala 57:63]
    node _T_14 = eq(_T_13, UInt<1>("h00")) @[Keys.scala 57:67]
    node _T_15 = and(_T_12, _T_14) @[Keys.scala 57:50]
    io.interrupts[2] <= _T_15 @[Keys.scala 57:22]
    node _T_16 = bits(keyReg, 3, 3) @[Keys.scala 57:31]
    node _T_17 = eq(_T_16, UInt<1>("h01")) @[Keys.scala 57:35]
    node _T_18 = bits(keySyncReg, 3, 3) @[Keys.scala 57:63]
    node _T_19 = eq(_T_18, UInt<1>("h00")) @[Keys.scala 57:67]
    node _T_20 = and(_T_17, _T_19) @[Keys.scala 57:50]
    io.interrupts[3] <= _T_20 @[Keys.scala 57:22]
    
  module Timer : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip superMode : UInt<1>, ocp : {flip M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, ByteEn : UInt<4>}, S : {Resp : UInt<2>, Data : UInt<32>}}, interrupts : UInt<1>[2]}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg masterReg : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, ByteEn : UInt<4>}, clock @[Timer.scala 32:22]
    masterReg <- io.ocp.M @[Timer.scala 32:22]
    reg cycleReg : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[Timer.scala 35:25]
    reg cycleIntrReg : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[Timer.scala 36:25]
    reg usecSubReg : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[Timer.scala 40:24]
    reg usecReg : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[Timer.scala 41:24]
    reg usecIntrReg : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[Timer.scala 42:24]
    reg cycleHiReg : UInt<32>, clock @[Timer.scala 45:24]
    reg usecHiReg : UInt<32>, clock @[Timer.scala 46:24]
    reg cycleLoReg : UInt<32>, clock @[Timer.scala 49:24]
    reg usecLoReg : UInt<32>, clock @[Timer.scala 50:24]
    wire resp : UInt @[Timer.scala 53:18]
    resp is invalid @[Timer.scala 53:18]
    wire data : UInt<32> @[Timer.scala 54:18]
    data is invalid @[Timer.scala 54:18]
    resp <= UInt<2>("h00") @[Timer.scala 55:8]
    data <= UInt<1>("h00") @[Timer.scala 56:8]
    node _T = eq(masterReg.Cmd, UInt<3>("h02")) @[Timer.scala 59:22]
    when _T : @[Timer.scala 59:37]
      resp <= UInt<2>("h01") @[Timer.scala 60:10]
      node _T_1 = bits(masterReg.Addr, 3, 2) @[Timer.scala 64:24]
      node _T_2 = eq(_T_1, UInt<1>("h01")) @[Timer.scala 64:31]
      when _T_2 : @[Timer.scala 64:48]
        node _T_3 = bits(cycleReg, 31, 0) @[Timer.scala 65:23]
        data <= _T_3 @[Timer.scala 65:12]
        node _T_4 = bits(cycleReg, 63, 32) @[Timer.scala 66:29]
        cycleHiReg <= _T_4 @[Timer.scala 66:18]
        skip @[Timer.scala 64:48]
      node _T_5 = bits(masterReg.Addr, 3, 2) @[Timer.scala 68:24]
      node _T_6 = eq(_T_5, UInt<1>("h00")) @[Timer.scala 68:31]
      when _T_6 : @[Timer.scala 68:48]
        data <= cycleHiReg @[Timer.scala 69:12]
        skip @[Timer.scala 68:48]
      node _T_7 = bits(masterReg.Addr, 3, 2) @[Timer.scala 74:24]
      node _T_8 = eq(_T_7, UInt<2>("h03")) @[Timer.scala 74:31]
      when _T_8 : @[Timer.scala 74:48]
        node _T_9 = bits(usecReg, 31, 0) @[Timer.scala 75:22]
        data <= _T_9 @[Timer.scala 75:12]
        node _T_10 = bits(usecReg, 63, 32) @[Timer.scala 76:27]
        usecHiReg <= _T_10 @[Timer.scala 76:17]
        skip @[Timer.scala 74:48]
      node _T_11 = bits(masterReg.Addr, 3, 2) @[Timer.scala 78:24]
      node _T_12 = eq(_T_11, UInt<2>("h02")) @[Timer.scala 78:31]
      when _T_12 : @[Timer.scala 78:48]
        data <= usecHiReg @[Timer.scala 79:12]
        skip @[Timer.scala 78:48]
      skip @[Timer.scala 59:37]
    node _T_13 = eq(masterReg.Cmd, UInt<3>("h01")) @[Timer.scala 84:22]
    when _T_13 : @[Timer.scala 84:37]
      resp <= UInt<2>("h01") @[Timer.scala 85:10]
      node _T_14 = bits(masterReg.Addr, 3, 2) @[Timer.scala 89:24]
      node _T_15 = eq(_T_14, UInt<1>("h01")) @[Timer.scala 89:31]
      when _T_15 : @[Timer.scala 89:48]
        cycleLoReg <= masterReg.Data @[Timer.scala 90:18]
        skip @[Timer.scala 89:48]
      node _T_16 = bits(masterReg.Addr, 3, 2) @[Timer.scala 92:24]
      node _T_17 = eq(_T_16, UInt<1>("h00")) @[Timer.scala 92:31]
      when _T_17 : @[Timer.scala 92:48]
        node _T_18 = cat(masterReg.Data, cycleLoReg) @[Timer.scala 93:38]
        cycleIntrReg <= _T_18 @[Timer.scala 93:20]
        skip @[Timer.scala 92:48]
      node _T_19 = bits(masterReg.Addr, 3, 2) @[Timer.scala 98:24]
      node _T_20 = eq(_T_19, UInt<2>("h03")) @[Timer.scala 98:31]
      when _T_20 : @[Timer.scala 98:48]
        usecLoReg <= masterReg.Data @[Timer.scala 99:17]
        skip @[Timer.scala 98:48]
      node _T_21 = bits(masterReg.Addr, 3, 2) @[Timer.scala 101:24]
      node _T_22 = eq(_T_21, UInt<2>("h02")) @[Timer.scala 101:31]
      when _T_22 : @[Timer.scala 101:48]
        node _T_23 = cat(masterReg.Data, usecLoReg) @[Timer.scala 102:37]
        usecIntrReg <= _T_23 @[Timer.scala 102:19]
        skip @[Timer.scala 101:48]
      skip @[Timer.scala 84:37]
    io.ocp.S.Resp <= resp @[Timer.scala 107:17]
    io.ocp.S.Data <= data @[Timer.scala 108:17]
    io.interrupts[0] <= UInt<1>("h00") @[Timer.scala 111:20]
    io.interrupts[1] <= UInt<1>("h00") @[Timer.scala 112:20]
    node _T_24 = add(cycleReg, UInt<1>("h01")) @[Timer.scala 115:24]
    node _T_25 = tail(_T_24, 1) @[Timer.scala 115:24]
    cycleReg <= _T_25 @[Timer.scala 115:12]
    node _T_26 = add(cycleReg, UInt<1>("h01")) @[Timer.scala 117:18]
    node _T_27 = tail(_T_26, 1) @[Timer.scala 117:18]
    node _T_28 = eq(_T_27, cycleIntrReg) @[Timer.scala 117:28]
    when _T_28 : @[Timer.scala 117:46]
      io.interrupts[0] <= UInt<1>("h01") @[Timer.scala 118:22]
      skip @[Timer.scala 117:46]
    node _T_29 = add(usecSubReg, UInt<1>("h01")) @[Timer.scala 121:28]
    node _T_30 = tail(_T_29, 1) @[Timer.scala 121:28]
    usecSubReg <= _T_30 @[Timer.scala 121:14]
    node _T_31 = sub(UInt<7>("h050"), UInt<1>("h01")) @[Timer.scala 122:34]
    node _T_32 = tail(_T_31, 1) @[Timer.scala 122:34]
    node _T_33 = eq(usecSubReg, _T_32) @[Timer.scala 122:19]
    when _T_33 : @[Timer.scala 122:45]
      usecSubReg <= UInt<1>("h00") @[Timer.scala 123:16]
      node _T_34 = add(usecReg, UInt<1>("h01")) @[Timer.scala 124:24]
      node _T_35 = tail(_T_34, 1) @[Timer.scala 124:24]
      usecReg <= _T_35 @[Timer.scala 124:13]
      node _T_36 = add(usecReg, UInt<1>("h01")) @[Timer.scala 126:19]
      node _T_37 = tail(_T_36, 1) @[Timer.scala 126:19]
      node _T_38 = eq(_T_37, usecIntrReg) @[Timer.scala 126:29]
      when _T_38 : @[Timer.scala 126:46]
        io.interrupts[1] <= UInt<1>("h01") @[Timer.scala 127:24]
        skip @[Timer.scala 126:46]
      skip @[Timer.scala 122:45]
    
  module Deadline : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip superMode : UInt<1>, ocp : {flip M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, ByteEn : UInt<4>}, S : {Resp : UInt<2>, Data : UInt<32>}}}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg freeRunningReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Deadline.scala 64:27]
    reg downCountReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Deadline.scala 65:25]
    node _T = add(freeRunningReg, UInt<1>("h01")) @[Deadline.scala 67:36]
    node _T_1 = tail(_T, 1) @[Deadline.scala 67:36]
    freeRunningReg <= _T_1 @[Deadline.scala 67:18]
    node downDone = eq(downCountReg, UInt<1>("h00")) @[Deadline.scala 68:31]
    node _T_2 = eq(downDone, UInt<1>("h00")) @[Deadline.scala 70:9]
    when _T_2 : @[Deadline.scala 70:20]
      node _T_3 = sub(downCountReg, UInt<1>("h01")) @[Deadline.scala 71:34]
      node _T_4 = tail(_T_3, 1) @[Deadline.scala 71:34]
      downCountReg <= _T_4 @[Deadline.scala 71:18]
      skip @[Deadline.scala 70:20]
    node _T_5 = eq(io.ocp.M.Cmd, UInt<3>("h01")) @[Deadline.scala 73:22]
    when _T_5 : @[Deadline.scala 73:37]
      downCountReg <= io.ocp.M.Data @[Deadline.scala 74:18]
      skip @[Deadline.scala 73:37]
    reg stallReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Deadline.scala 78:21]
    reg respReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Deadline.scala 83:20]
    respReg <= UInt<2>("h00") @[Deadline.scala 84:11]
    node _T_6 = eq(io.ocp.M.Cmd, UInt<3>("h02")) @[Deadline.scala 86:22]
    node _T_7 = and(_T_6, downDone) @[Deadline.scala 86:36]
    node _T_8 = eq(io.ocp.M.Cmd, UInt<3>("h01")) @[Deadline.scala 86:65]
    node _T_9 = or(_T_7, _T_8) @[Deadline.scala 86:49]
    when _T_9 : @[Deadline.scala 86:80]
      respReg <= UInt<2>("h01") @[Deadline.scala 87:13]
      skip @[Deadline.scala 86:80]
    node _T_10 = eq(io.ocp.M.Cmd, UInt<3>("h02")) @[Deadline.scala 90:23]
    node _T_11 = eq(downDone, UInt<1>("h00")) @[Deadline.scala 90:40]
    node _T_12 = and(_T_10, _T_11) @[Deadline.scala 90:37]
    when _T_12 : @[Deadline.scala 90:52]
      stallReg <= UInt<1>("h01") @[Deadline.scala 91:14]
      skip @[Deadline.scala 90:52]
    node _T_13 = and(stallReg, downDone) @[Deadline.scala 95:18]
    when _T_13 : @[Deadline.scala 95:31]
      respReg <= UInt<2>("h01") @[Deadline.scala 96:13]
      stallReg <= UInt<1>("h00") @[Deadline.scala 97:14]
      skip @[Deadline.scala 95:31]
    io.ocp.S.Data <= downCountReg @[Deadline.scala 100:17]
    io.ocp.S.Resp <= respReg @[Deadline.scala 101:17]
    
  module MemBlock_13 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rdAddr : UInt<9>, rdData : UInt<8>, flip wrAddr : UInt<9>, flip wrEna : UInt<1>, flip wrData : UInt<8>}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem mem : UInt<8>[512]
    node _T = eq(io.wrEna, UInt<1>("h01")) @[MemBlock.scala 54:17]
    when _T : @[MemBlock.scala 54:30]
      infer mport MPORT = mem[io.wrAddr], clock @[MemBlock.scala 55:8]
      MPORT <= io.wrData @[MemBlock.scala 55:20]
      skip @[MemBlock.scala 54:30]
    reg rdAddrReg : UInt, clock @[MemBlock.scala 59:22]
    rdAddrReg <= io.rdAddr @[MemBlock.scala 59:22]
    node _T_1 = or(rdAddrReg, UInt<9>("h00")) @[MemBlock.scala 60:19]
    node _T_2 = bits(_T_1, 8, 0) @[MemBlock.scala 60:19]
    infer mport MPORT_1 = mem[_T_2], clock @[MemBlock.scala 60:19]
    io.rdData <= MPORT_1 @[MemBlock.scala 60:13]
    
  module MemBlock_14 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rdAddr : UInt<9>, rdData : UInt<8>, flip wrAddr : UInt<9>, flip wrEna : UInt<1>, flip wrData : UInt<8>}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem mem : UInt<8>[512]
    node _T = eq(io.wrEna, UInt<1>("h01")) @[MemBlock.scala 54:17]
    when _T : @[MemBlock.scala 54:30]
      infer mport MPORT = mem[io.wrAddr], clock @[MemBlock.scala 55:8]
      MPORT <= io.wrData @[MemBlock.scala 55:20]
      skip @[MemBlock.scala 54:30]
    reg rdAddrReg : UInt, clock @[MemBlock.scala 59:22]
    rdAddrReg <= io.rdAddr @[MemBlock.scala 59:22]
    node _T_1 = or(rdAddrReg, UInt<9>("h00")) @[MemBlock.scala 60:19]
    node _T_2 = bits(_T_1, 8, 0) @[MemBlock.scala 60:19]
    infer mport MPORT_1 = mem[_T_2], clock @[MemBlock.scala 60:19]
    io.rdData <= MPORT_1 @[MemBlock.scala 60:13]
    
  module MemBlock_15 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rdAddr : UInt<9>, rdData : UInt<8>, flip wrAddr : UInt<9>, flip wrEna : UInt<1>, flip wrData : UInt<8>}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem mem : UInt<8>[512]
    node _T = eq(io.wrEna, UInt<1>("h01")) @[MemBlock.scala 54:17]
    when _T : @[MemBlock.scala 54:30]
      infer mport MPORT = mem[io.wrAddr], clock @[MemBlock.scala 55:8]
      MPORT <= io.wrData @[MemBlock.scala 55:20]
      skip @[MemBlock.scala 54:30]
    reg rdAddrReg : UInt, clock @[MemBlock.scala 59:22]
    rdAddrReg <= io.rdAddr @[MemBlock.scala 59:22]
    node _T_1 = or(rdAddrReg, UInt<9>("h00")) @[MemBlock.scala 60:19]
    node _T_2 = bits(_T_1, 8, 0) @[MemBlock.scala 60:19]
    infer mport MPORT_1 = mem[_T_2], clock @[MemBlock.scala 60:19]
    io.rdData <= MPORT_1 @[MemBlock.scala 60:13]
    
  module MemBlock_16 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rdAddr : UInt<9>, rdData : UInt<8>, flip wrAddr : UInt<9>, flip wrEna : UInt<1>, flip wrData : UInt<8>}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem mem : UInt<8>[512]
    node _T = eq(io.wrEna, UInt<1>("h01")) @[MemBlock.scala 54:17]
    when _T : @[MemBlock.scala 54:30]
      infer mport MPORT = mem[io.wrAddr], clock @[MemBlock.scala 55:8]
      MPORT <= io.wrData @[MemBlock.scala 55:20]
      skip @[MemBlock.scala 54:30]
    reg rdAddrReg : UInt, clock @[MemBlock.scala 59:22]
    rdAddrReg <= io.rdAddr @[MemBlock.scala 59:22]
    node _T_1 = or(rdAddrReg, UInt<9>("h00")) @[MemBlock.scala 60:19]
    node _T_2 = bits(_T_1, 8, 0) @[MemBlock.scala 60:19]
    infer mport MPORT_1 = mem[_T_2], clock @[MemBlock.scala 60:19]
    io.rdData <= MPORT_1 @[MemBlock.scala 60:13]
    
  module Spm : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip M : {Cmd : UInt<3>, Addr : UInt<11>, Data : UInt<32>, ByteEn : UInt<4>}, S : {Resp : UInt<2>, Data : UInt<32>}}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg cmdReg : UInt, clock @[Spm.scala 32:19]
    cmdReg <= io.M.Cmd @[Spm.scala 32:19]
    node _T = eq(cmdReg, UInt<3>("h01")) @[Spm.scala 33:27]
    node _T_1 = eq(cmdReg, UInt<3>("h02")) @[Spm.scala 33:51]
    node _T_2 = or(_T, _T_1) @[Spm.scala 33:41]
    node _T_3 = mux(_T_2, UInt<2>("h01"), UInt<2>("h00")) @[Spm.scala 33:19]
    io.S.Resp <= _T_3 @[Spm.scala 33:13]
    io.S.Data <= UInt<1>("h00") @[Spm.scala 35:13]
    inst MemBlock of MemBlock_13 @[MemBlock.scala 15:11]
    MemBlock.io is invalid
    MemBlock.clock <= clock
    MemBlock.reset <= reset
    inst MemBlock_1 of MemBlock_14 @[MemBlock.scala 15:11]
    MemBlock_1.io is invalid
    MemBlock_1.clock <= clock
    MemBlock_1.reset <= reset
    inst MemBlock_2 of MemBlock_15 @[MemBlock.scala 15:11]
    MemBlock_2.io is invalid
    MemBlock_2.clock <= clock
    MemBlock_2.reset <= reset
    inst MemBlock_3 of MemBlock_16 @[MemBlock.scala 15:11]
    MemBlock_3.io is invalid
    MemBlock_3.clock <= clock
    MemBlock_3.reset <= reset
    node _T_4 = eq(io.M.Cmd, UInt<3>("h01")) @[Spm.scala 45:30]
    node _T_5 = mux(_T_4, io.M.ByteEn, UInt<1>("h00")) @[Spm.scala 45:20]
    node _T_6 = bits(_T_5, 0, 0) @[Spm.scala 47:23]
    node _T_7 = bits(io.M.Addr, 10, 2) @[Spm.scala 47:37]
    node _T_8 = bits(io.M.Data, 7, 0) @[Spm.scala 48:27]
    MemBlock.io.wrAddr <= _T_7 @[MemBlock.scala 34:12]
    MemBlock.io.wrEna <= _T_6 @[MemBlock.scala 35:11]
    MemBlock.io.wrData <= _T_8 @[MemBlock.scala 36:12]
    node _T_9 = bits(_T_5, 1, 1) @[Spm.scala 47:23]
    node _T_10 = bits(io.M.Addr, 10, 2) @[Spm.scala 47:37]
    node _T_11 = bits(io.M.Data, 15, 8) @[Spm.scala 48:27]
    MemBlock_1.io.wrAddr <= _T_10 @[MemBlock.scala 34:12]
    MemBlock_1.io.wrEna <= _T_9 @[MemBlock.scala 35:11]
    MemBlock_1.io.wrData <= _T_11 @[MemBlock.scala 36:12]
    node _T_12 = bits(_T_5, 2, 2) @[Spm.scala 47:23]
    node _T_13 = bits(io.M.Addr, 10, 2) @[Spm.scala 47:37]
    node _T_14 = bits(io.M.Data, 23, 16) @[Spm.scala 48:27]
    MemBlock_2.io.wrAddr <= _T_13 @[MemBlock.scala 34:12]
    MemBlock_2.io.wrEna <= _T_12 @[MemBlock.scala 35:11]
    MemBlock_2.io.wrData <= _T_14 @[MemBlock.scala 36:12]
    node _T_15 = bits(_T_5, 3, 3) @[Spm.scala 47:23]
    node _T_16 = bits(io.M.Addr, 10, 2) @[Spm.scala 47:37]
    node _T_17 = bits(io.M.Data, 31, 24) @[Spm.scala 48:27]
    MemBlock_3.io.wrAddr <= _T_16 @[MemBlock.scala 34:12]
    MemBlock_3.io.wrEna <= _T_15 @[MemBlock.scala 35:11]
    MemBlock_3.io.wrData <= _T_17 @[MemBlock.scala 36:12]
    node _T_18 = bits(io.M.Addr, 10, 2) @[Spm.scala 52:37]
    MemBlock.io.rdAddr <= _T_18 @[MemBlock.scala 44:12]
    node _T_19 = bits(io.M.Addr, 10, 2) @[Spm.scala 52:37]
    MemBlock_1.io.rdAddr <= _T_19 @[MemBlock.scala 44:12]
    node _T_20 = bits(io.M.Addr, 10, 2) @[Spm.scala 52:37]
    MemBlock_2.io.rdAddr <= _T_20 @[MemBlock.scala 44:12]
    node _T_21 = bits(io.M.Addr, 10, 2) @[Spm.scala 52:37]
    MemBlock_3.io.rdAddr <= _T_21 @[MemBlock.scala 44:12]
    node _T_22 = cat(MemBlock_1.io.rdData, MemBlock.io.rdData) @[Spm.scala 52:79]
    node _T_23 = cat(MemBlock_2.io.rdData, _T_22) @[Spm.scala 52:79]
    node _T_24 = cat(MemBlock_3.io.rdData, _T_23) @[Spm.scala 52:79]
    io.S.Data <= _T_24 @[Spm.scala 55:15]
    
  module SRamCtrl : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip superMode : UInt<1>, ocp : {flip M : {Cmd : UInt<3>, Addr : UInt<21>, Data : UInt<32>, DataValid : UInt<1>, DataByteEn : UInt<4>}, S : {Resp : UInt<2>, Data : UInt<32>, CmdAccept : UInt<1>, DataAccept : UInt<1>}}, pins : {ramOut : {addr : UInt<20>, doutEna : UInt<1>, dout : UInt<16>, nce : UInt<1>, noe : UInt<1>, nwe : UInt<1>, nlb : UInt<1>, nub : UInt<1>}, flip ramIn : {din : UInt<16>}}}
    
    clock is invalid
    reset is invalid
    io is invalid
    node _T = bits(reset, 0, 0) @[SRamCtrl.scala 66:9]
    node _T_1 = or(UInt<1>("h01"), _T) @[SRamCtrl.scala 66:9]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[SRamCtrl.scala 66:9]
    when _T_2 : @[SRamCtrl.scala 66:9]
      printf(clock, UInt<1>(1), "Assertion failed: DATA_WIDTH is not a multiple of sramDataWidth\n    at SRamCtrl.scala:66 assert(Bool(DATA_WIDTH %% sramDataWidth == 0),\"DATA_WIDTH is not a multiple of sramDataWidth\")\n") @[SRamCtrl.scala 66:9]
      stop(clock, UInt<1>(1), 1) @[SRamCtrl.scala 66:9]
      skip @[SRamCtrl.scala 66:9]
    node _T_3 = bits(reset, 0, 0) @[SRamCtrl.scala 67:9]
    node _T_4 = or(UInt<1>("h01"), _T_3) @[SRamCtrl.scala 67:9]
    node _T_5 = eq(_T_4, UInt<1>("h00")) @[SRamCtrl.scala 67:9]
    when _T_5 : @[SRamCtrl.scala 67:9]
      printf(clock, UInt<1>(1), "Assertion failed: ocpAddrWidth cannot access the full sram\n    at SRamCtrl.scala:67 assert(Bool(sramAddrWidth <= ocpAddrWidth),\"ocpAddrWidth cannot access the full sram\")\n") @[SRamCtrl.scala 67:9]
      stop(clock, UInt<1>(1), 1) @[SRamCtrl.scala 67:9]
      skip @[SRamCtrl.scala 67:9]
    node _T_6 = bits(reset, 0, 0) @[SRamCtrl.scala 68:9]
    node _T_7 = or(UInt<1>("h01"), _T_6) @[SRamCtrl.scala 68:9]
    node _T_8 = eq(_T_7, UInt<1>("h00")) @[SRamCtrl.scala 68:9]
    when _T_8 : @[SRamCtrl.scala 68:9]
      printf(clock, UInt<1>(1), "Assertion failed: number of bytes per transaction to sram is not a power of 2\n    at SRamCtrl.scala:68 assert(Bool(isPow2(sramDataWidth/8)),\"number of bytes per transaction to sram is not a power of 2\")\n") @[SRamCtrl.scala 68:9]
      stop(clock, UInt<1>(1), 1) @[SRamCtrl.scala 68:9]
      skip @[SRamCtrl.scala 68:9]
    reg stateReg : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[SRamCtrl.scala 80:21]
    reg mAddrReg : UInt<20>, clock @[SRamCtrl.scala 83:21]
    reg rdBufferReg : UInt<16>[8], clock @[SRamCtrl.scala 84:24]
    reg wrBufferReg : {byteEna : UInt<2>, data : UInt<16>}[8], clock @[SRamCtrl.scala 85:24]
    reg transCountReg : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[SRamCtrl.scala 86:26]
    reg wordCountReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[SRamCtrl.scala 87:25]
    reg waitCountReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SRamCtrl.scala 88:25]
    reg addrReg : UInt<20>, clock @[SRamCtrl.scala 90:20]
    reg doutEnaReg : UInt, clock @[SRamCtrl.scala 91:23]
    reg doutReg : UInt<32>, clock @[SRamCtrl.scala 92:20]
    reg nceReg : UInt, clock @[SRamCtrl.scala 93:19]
    reg noeReg : UInt, clock @[SRamCtrl.scala 94:19]
    reg nweReg : UInt, clock @[SRamCtrl.scala 95:19]
    reg nlbReg : UInt, clock @[SRamCtrl.scala 96:19]
    reg nubReg : UInt, clock @[SRamCtrl.scala 97:19]
    io.ocp.S.Resp <= UInt<2>("h00") @[SRamCtrl.scala 100:17]
    io.ocp.S.CmdAccept <= UInt<1>("h01") @[SRamCtrl.scala 101:22]
    io.ocp.S.DataAccept <= UInt<1>("h01") @[SRamCtrl.scala 102:23]
    node _T_9 = cat(wordCountReg, UInt<1>("h00")) @[SRamCtrl.scala 104:45]
    node _T_10 = cat(wordCountReg, UInt<1>("h01")) @[SRamCtrl.scala 104:45]
    node _T_11 = cat(rdBufferReg[_T_10], rdBufferReg[_T_9]) @[SRamCtrl.scala 105:47]
    io.ocp.S.Data <= _T_11 @[SRamCtrl.scala 105:17]
    addrReg <= mAddrReg @[SRamCtrl.scala 108:11]
    doutEnaReg <= UInt<1>("h00") @[SRamCtrl.scala 109:14]
    doutReg <= wrBufferReg[0].data @[SRamCtrl.scala 110:11]
    nceReg <= UInt<1>("h00") @[SRamCtrl.scala 111:10]
    noeReg <= UInt<1>("h01") @[SRamCtrl.scala 112:10]
    nweReg <= UInt<1>("h01") @[SRamCtrl.scala 113:10]
    nlbReg <= UInt<1>("h01") @[SRamCtrl.scala 114:10]
    nubReg <= UInt<1>("h01") @[SRamCtrl.scala 115:10]
    waitCountReg <= UInt<1>("h00") @[SRamCtrl.scala 117:16]
    node _T_12 = eq(stateReg, UInt<3>("h00")) @[SRamCtrl.scala 119:17]
    when _T_12 : @[SRamCtrl.scala 119:29]
      node _T_13 = bits(io.ocp.M.DataByteEn, 1, 0) @[SRamCtrl.scala 121:52]
      wrBufferReg[0].byteEna <= _T_13 @[SRamCtrl.scala 121:30]
      node _T_14 = bits(io.ocp.M.Data, 15, 0) @[SRamCtrl.scala 122:43]
      wrBufferReg[0].data <= _T_14 @[SRamCtrl.scala 122:27]
      node _T_15 = bits(io.ocp.M.DataByteEn, 3, 2) @[SRamCtrl.scala 121:52]
      wrBufferReg[1].byteEna <= _T_15 @[SRamCtrl.scala 121:30]
      node _T_16 = bits(io.ocp.M.Data, 31, 16) @[SRamCtrl.scala 122:43]
      wrBufferReg[1].data <= _T_16 @[SRamCtrl.scala 122:27]
      node _T_17 = neq(io.ocp.M.Cmd, UInt<3>("h00")) @[SRamCtrl.scala 124:23]
      when _T_17 : @[SRamCtrl.scala 124:40]
        node _T_18 = bits(io.ocp.M.Addr, 20, 1) @[SRamCtrl.scala 125:32]
        mAddrReg <= _T_18 @[SRamCtrl.scala 125:16]
        node _T_19 = eq(io.ocp.M.Cmd, UInt<3>("h02")) @[SRamCtrl.scala 127:25]
        when _T_19 : @[SRamCtrl.scala 127:40]
          stateReg <= UInt<3>("h01") @[SRamCtrl.scala 128:18]
          skip @[SRamCtrl.scala 127:40]
        node _T_20 = eq(io.ocp.M.Cmd, UInt<3>("h01")) @[SRamCtrl.scala 130:25]
        when _T_20 : @[SRamCtrl.scala 130:40]
          wordCountReg <= UInt<1>("h01") @[SRamCtrl.scala 131:22]
          stateReg <= UInt<3>("h04") @[SRamCtrl.scala 132:18]
          skip @[SRamCtrl.scala 130:40]
        skip @[SRamCtrl.scala 124:40]
      skip @[SRamCtrl.scala 119:29]
    node _T_21 = eq(stateReg, UInt<3>("h01")) @[SRamCtrl.scala 136:17]
    when _T_21 : @[SRamCtrl.scala 136:31]
      noeReg <= UInt<1>("h00") @[SRamCtrl.scala 137:12]
      nceReg <= UInt<1>("h00") @[SRamCtrl.scala 138:12]
      nubReg <= UInt<1>("h00") @[SRamCtrl.scala 139:12]
      nlbReg <= UInt<1>("h00") @[SRamCtrl.scala 140:12]
      stateReg <= UInt<3>("h02") @[SRamCtrl.scala 153:16]
      skip @[SRamCtrl.scala 136:31]
    node _T_22 = eq(stateReg, UInt<3>("h02")) @[SRamCtrl.scala 156:17]
    when _T_22 : @[SRamCtrl.scala 156:32]
      noeReg <= UInt<1>("h00") @[SRamCtrl.scala 157:12]
      nceReg <= UInt<1>("h00") @[SRamCtrl.scala 158:12]
      nubReg <= UInt<1>("h00") @[SRamCtrl.scala 159:12]
      nlbReg <= UInt<1>("h00") @[SRamCtrl.scala 160:12]
      node _T_23 = add(mAddrReg, UInt<1>("h01")) @[SRamCtrl.scala 161:25]
      node _T_24 = tail(_T_23, 1) @[SRamCtrl.scala 161:25]
      addrReg <= _T_24 @[SRamCtrl.scala 161:13]
      node _T_25 = add(mAddrReg, UInt<1>("h01")) @[SRamCtrl.scala 162:26]
      node _T_26 = tail(_T_25, 1) @[SRamCtrl.scala 162:26]
      mAddrReg <= _T_26 @[SRamCtrl.scala 162:14]
      rdBufferReg[0] <= rdBufferReg[1] @[SRamCtrl.scala 163:55]
      rdBufferReg[1] <= rdBufferReg[2] @[SRamCtrl.scala 163:55]
      rdBufferReg[2] <= rdBufferReg[3] @[SRamCtrl.scala 163:55]
      rdBufferReg[3] <= rdBufferReg[4] @[SRamCtrl.scala 163:55]
      rdBufferReg[4] <= rdBufferReg[5] @[SRamCtrl.scala 163:55]
      rdBufferReg[5] <= rdBufferReg[6] @[SRamCtrl.scala 163:55]
      rdBufferReg[6] <= rdBufferReg[7] @[SRamCtrl.scala 163:55]
      rdBufferReg[7] <= io.pins.ramIn.din @[SRamCtrl.scala 164:32]
      node _T_27 = add(transCountReg, UInt<1>("h01")) @[SRamCtrl.scala 165:36]
      node _T_28 = tail(_T_27, 1) @[SRamCtrl.scala 165:36]
      transCountReg <= _T_28 @[SRamCtrl.scala 165:19]
      stateReg <= UInt<3>("h01") @[SRamCtrl.scala 166:14]
      node _T_29 = eq(transCountReg, UInt<3>("h07")) @[SRamCtrl.scala 167:24]
      when _T_29 : @[SRamCtrl.scala 167:48]
        stateReg <= UInt<3>("h03") @[SRamCtrl.scala 168:16]
        transCountReg <= UInt<1>("h00") @[SRamCtrl.scala 169:21]
        skip @[SRamCtrl.scala 167:48]
      skip @[SRamCtrl.scala 156:32]
    node _T_30 = eq(stateReg, UInt<3>("h03")) @[SRamCtrl.scala 172:17]
    when _T_30 : @[SRamCtrl.scala 172:31]
      io.ocp.S.Resp <= UInt<2>("h01") @[SRamCtrl.scala 173:19]
      node _T_31 = add(wordCountReg, UInt<1>("h01")) @[SRamCtrl.scala 174:34]
      node _T_32 = tail(_T_31, 1) @[SRamCtrl.scala 174:34]
      wordCountReg <= _T_32 @[SRamCtrl.scala 174:18]
      node _T_33 = eq(wordCountReg, UInt<2>("h03")) @[SRamCtrl.scala 175:23]
      when _T_33 : @[SRamCtrl.scala 175:47]
        stateReg <= UInt<3>("h00") @[SRamCtrl.scala 176:16]
        wordCountReg <= UInt<1>("h00") @[SRamCtrl.scala 177:20]
        skip @[SRamCtrl.scala 175:47]
      skip @[SRamCtrl.scala 172:31]
    node _T_34 = eq(stateReg, UInt<3>("h04")) @[SRamCtrl.scala 180:17]
    when _T_34 : @[SRamCtrl.scala 180:32]
      node _T_35 = cat(wordCountReg, UInt<1>("h00")) @[SRamCtrl.scala 182:32]
      node _T_36 = bits(io.ocp.M.DataByteEn, 1, 0) @[SRamCtrl.scala 183:28]
      wrBufferReg[_T_35].byteEna <= _T_36 @[SRamCtrl.scala 182:52]
      node _T_37 = cat(wordCountReg, UInt<1>("h00")) @[SRamCtrl.scala 184:32]
      node _T_38 = bits(io.ocp.M.Data, 15, 0) @[SRamCtrl.scala 185:22]
      wrBufferReg[_T_37].data <= _T_38 @[SRamCtrl.scala 184:49]
      node _T_39 = cat(wordCountReg, UInt<1>("h01")) @[SRamCtrl.scala 182:32]
      node _T_40 = bits(io.ocp.M.DataByteEn, 3, 2) @[SRamCtrl.scala 183:28]
      wrBufferReg[_T_39].byteEna <= _T_40 @[SRamCtrl.scala 182:52]
      node _T_41 = cat(wordCountReg, UInt<1>("h01")) @[SRamCtrl.scala 184:32]
      node _T_42 = bits(io.ocp.M.Data, 31, 16) @[SRamCtrl.scala 185:22]
      wrBufferReg[_T_41].data <= _T_42 @[SRamCtrl.scala 184:49]
      doutReg <= wrBufferReg[0].data @[SRamCtrl.scala 187:13]
      doutEnaReg <= UInt<1>("h01") @[SRamCtrl.scala 188:16]
      node _T_43 = eq(io.ocp.M.DataValid, UInt<1>("h01")) @[SRamCtrl.scala 189:29]
      when _T_43 : @[SRamCtrl.scala 189:41]
        node _T_44 = add(wordCountReg, UInt<1>("h01")) @[SRamCtrl.scala 190:36]
        node _T_45 = tail(_T_44, 1) @[SRamCtrl.scala 190:36]
        wordCountReg <= _T_45 @[SRamCtrl.scala 190:20]
        node _T_46 = eq(wordCountReg, UInt<2>("h03")) @[SRamCtrl.scala 191:25]
        when _T_46 : @[SRamCtrl.scala 191:49]
          stateReg <= UInt<3>("h05") @[SRamCtrl.scala 192:18]
          wordCountReg <= UInt<1>("h00") @[SRamCtrl.scala 193:22]
          waitCountReg <= UInt<1>("h01") @[SRamCtrl.scala 194:22]
          skip @[SRamCtrl.scala 191:49]
        skip @[SRamCtrl.scala 189:41]
      else : @[SRamCtrl.scala 196:7]
        stateReg <= UInt<3>("h04") @[SRamCtrl.scala 197:16]
        skip @[SRamCtrl.scala 196:7]
      node _T_47 = eq(wordCountReg, UInt<2>("h03")) @[SRamCtrl.scala 199:23]
      when _T_47 : @[SRamCtrl.scala 199:47]
        nceReg <= UInt<1>("h00") @[SRamCtrl.scala 200:14]
        nweReg <= UInt<1>("h00") @[SRamCtrl.scala 201:14]
        node _T_48 = bits(wrBufferReg[0].byteEna, 1, 1) @[SRamCtrl.scala 202:40]
        node _T_49 = eq(_T_48, UInt<1>("h00")) @[SRamCtrl.scala 202:17]
        nubReg <= _T_49 @[SRamCtrl.scala 202:14]
        node _T_50 = bits(wrBufferReg[0].byteEna, 0, 0) @[SRamCtrl.scala 203:40]
        node _T_51 = eq(_T_50, UInt<1>("h00")) @[SRamCtrl.scala 203:17]
        nlbReg <= _T_51 @[SRamCtrl.scala 203:14]
        skip @[SRamCtrl.scala 199:47]
      skip @[SRamCtrl.scala 180:32]
    node _T_52 = eq(stateReg, UInt<3>("h05")) @[SRamCtrl.scala 206:17]
    when _T_52 : @[SRamCtrl.scala 206:32]
      nceReg <= UInt<1>("h00") @[SRamCtrl.scala 207:12]
      nweReg <= UInt<1>("h00") @[SRamCtrl.scala 208:12]
      doutReg <= wrBufferReg[transCountReg].data @[SRamCtrl.scala 209:13]
      doutEnaReg <= UInt<1>("h01") @[SRamCtrl.scala 210:16]
      node _T_53 = lt(waitCountReg, UInt<1>("h01")) @[SRamCtrl.scala 211:23]
      when _T_53 : @[SRamCtrl.scala 211:47]
        node _T_54 = add(waitCountReg, UInt<1>("h01")) @[SRamCtrl.scala 212:36]
        node _T_55 = tail(_T_54, 1) @[SRamCtrl.scala 212:36]
        waitCountReg <= _T_55 @[SRamCtrl.scala 212:20]
        node _T_56 = bits(wrBufferReg[transCountReg].byteEna, 1, 1) @[SRamCtrl.scala 213:52]
        node _T_57 = eq(_T_56, UInt<1>("h00")) @[SRamCtrl.scala 213:17]
        nubReg <= _T_57 @[SRamCtrl.scala 213:14]
        node _T_58 = bits(wrBufferReg[transCountReg].byteEna, 0, 0) @[SRamCtrl.scala 214:52]
        node _T_59 = eq(_T_58, UInt<1>("h00")) @[SRamCtrl.scala 214:17]
        nlbReg <= _T_59 @[SRamCtrl.scala 214:14]
        stateReg <= UInt<3>("h05") @[SRamCtrl.scala 215:16]
        skip @[SRamCtrl.scala 211:47]
      else : @[SRamCtrl.scala 216:7]
        waitCountReg <= UInt<1>("h00") @[SRamCtrl.scala 217:20]
        nubReg <= UInt<1>("h01") @[SRamCtrl.scala 218:14]
        nlbReg <= UInt<1>("h01") @[SRamCtrl.scala 219:14]
        stateReg <= UInt<3>("h06") @[SRamCtrl.scala 220:16]
        skip @[SRamCtrl.scala 216:7]
      skip @[SRamCtrl.scala 206:32]
    node _T_60 = eq(stateReg, UInt<3>("h06")) @[SRamCtrl.scala 223:17]
    when _T_60 : @[SRamCtrl.scala 223:33]
      node _T_61 = lt(transCountReg, UInt<3>("h07")) @[SRamCtrl.scala 224:24]
      when _T_61 : @[SRamCtrl.scala 224:46]
        nceReg <= UInt<1>("h00") @[SRamCtrl.scala 225:14]
        nweReg <= UInt<1>("h00") @[SRamCtrl.scala 226:14]
        node _T_62 = add(transCountReg, UInt<1>("h01")) @[SRamCtrl.scala 227:43]
        node _T_63 = tail(_T_62, 1) @[SRamCtrl.scala 227:43]
        node _T_64 = bits(wrBufferReg[_T_63].byteEna, 1, 1) @[SRamCtrl.scala 227:60]
        node _T_65 = eq(_T_64, UInt<1>("h00")) @[SRamCtrl.scala 227:17]
        nubReg <= _T_65 @[SRamCtrl.scala 227:14]
        node _T_66 = add(transCountReg, UInt<1>("h01")) @[SRamCtrl.scala 228:43]
        node _T_67 = tail(_T_66, 1) @[SRamCtrl.scala 228:43]
        node _T_68 = bits(wrBufferReg[_T_67].byteEna, 0, 0) @[SRamCtrl.scala 228:60]
        node _T_69 = eq(_T_68, UInt<1>("h00")) @[SRamCtrl.scala 228:17]
        nlbReg <= _T_69 @[SRamCtrl.scala 228:14]
        node _T_70 = add(transCountReg, UInt<1>("h01")) @[SRamCtrl.scala 229:43]
        node _T_71 = tail(_T_70, 1) @[SRamCtrl.scala 229:43]
        doutReg <= wrBufferReg[_T_71].data @[SRamCtrl.scala 229:15]
        doutEnaReg <= UInt<1>("h01") @[SRamCtrl.scala 230:18]
        node _T_72 = add(mAddrReg, UInt<1>("h01")) @[SRamCtrl.scala 231:27]
        node _T_73 = tail(_T_72, 1) @[SRamCtrl.scala 231:27]
        addrReg <= _T_73 @[SRamCtrl.scala 231:15]
        node _T_74 = add(mAddrReg, UInt<1>("h01")) @[SRamCtrl.scala 232:28]
        node _T_75 = tail(_T_74, 1) @[SRamCtrl.scala 232:28]
        mAddrReg <= _T_75 @[SRamCtrl.scala 232:16]
        node _T_76 = add(transCountReg, UInt<1>("h01")) @[SRamCtrl.scala 233:38]
        node _T_77 = tail(_T_76, 1) @[SRamCtrl.scala 233:38]
        transCountReg <= _T_77 @[SRamCtrl.scala 233:21]
        waitCountReg <= UInt<1>("h01") @[SRamCtrl.scala 234:20]
        stateReg <= UInt<3>("h05") @[SRamCtrl.scala 235:16]
        skip @[SRamCtrl.scala 224:46]
      node _T_78 = eq(transCountReg, UInt<3>("h07")) @[SRamCtrl.scala 237:24]
      when _T_78 : @[SRamCtrl.scala 237:48]
        stateReg <= UInt<3>("h07") @[SRamCtrl.scala 238:16]
        transCountReg <= UInt<1>("h00") @[SRamCtrl.scala 239:21]
        waitCountReg <= UInt<1>("h00") @[SRamCtrl.scala 240:20]
        skip @[SRamCtrl.scala 237:48]
      skip @[SRamCtrl.scala 223:33]
    node _T_79 = eq(stateReg, UInt<3>("h07")) @[SRamCtrl.scala 243:17]
    when _T_79 : @[SRamCtrl.scala 243:32]
      io.ocp.S.Resp <= UInt<2>("h01") @[SRamCtrl.scala 244:19]
      stateReg <= UInt<3>("h00") @[SRamCtrl.scala 245:14]
      skip @[SRamCtrl.scala 243:32]
    io.pins.ramOut.addr <= addrReg @[SRamCtrl.scala 248:23]
    io.pins.ramOut.doutEna <= doutEnaReg @[SRamCtrl.scala 249:26]
    io.pins.ramOut.dout <= doutReg @[SRamCtrl.scala 250:23]
    io.pins.ramOut.nce <= nceReg @[SRamCtrl.scala 251:22]
    io.pins.ramOut.noe <= noeReg @[SRamCtrl.scala 252:22]
    io.pins.ramOut.nwe <= nweReg @[SRamCtrl.scala 253:22]
    io.pins.ramOut.nlb <= nlbReg @[SRamCtrl.scala 254:22]
    io.pins.ramOut.nub <= nubReg @[SRamCtrl.scala 255:22]
    
  module Patmos : 
    input clock : Clock
    input reset : UInt<1>
    output io : {Leds_led : UInt<9>, UartCmp_tx : UInt<1>, SRamCtrl_ramOut : {addr : UInt<20>, doutEna : UInt<1>, dout : UInt<16>, nce : UInt<1>, noe : UInt<1>, nwe : UInt<1>, nlb : UInt<1>, nub : UInt<1>}, flip Keys_key : UInt<4>, flip UartCmp_rx : UInt<1>, flip SRamCtrl_ramIn : {din : UInt<16>}}
    
    clock is invalid
    reset is invalid
    io is invalid
    inst cores_0 of PatmosCore @[Patmos.scala 213:48]
    cores_0.io is invalid
    cores_0.clock <= clock
    cores_0.reset <= reset
    inst HardlockOCPWrapper of HardlockOCPWrapper @[Patmos.scala 248:63]
    HardlockOCPWrapper.io is invalid
    HardlockOCPWrapper.clock <= clock
    HardlockOCPWrapper.reset <= reset
    inst UartCmp of UartCmp @[Patmos.scala 257:62]
    UartCmp.io is invalid
    UartCmp.clock <= clock
    UartCmp.reset <= reset
    wire _WIRE : UInt<1>[16] @[compatibility.scala 127:12]
    _WIRE is invalid @[compatibility.scala 127:12]
    _WIRE[0] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[1] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[2] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[3] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[4] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[5] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[6] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[7] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[8] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[9] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[10] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[11] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[12] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[13] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[14] <= UInt<1>("h00") @[compatibility.scala 127:12]
    _WIRE[15] <= UInt<1>("h00") @[compatibility.scala 127:12]
    cores_0.io.interrupts <- _WIRE @[Patmos.scala 277:30]
    inst CpuInfo of CpuInfo @[Patmos.scala 282:25]
    CpuInfo.io is invalid
    CpuInfo.clock <= clock
    CpuInfo.reset <= reset
    CpuInfo.io.nr <= UInt<1>("h00") @[Patmos.scala 283:19]
    CpuInfo.io.cnt <= UInt<1>("h01") @[Patmos.scala 284:20]
    inst Leds of Leds @[Leds.scala 22:11]
    Leds.io is invalid
    Leds.clock <= clock
    Leds.reset <= reset
    inst Keys of Keys @[Keys.scala 22:11]
    Keys.io is invalid
    Keys.clock <= clock
    Keys.reset <= reset
    inst Timer of Timer @[Timer.scala 22:11]
    Timer.io is invalid
    Timer.clock <= clock
    Timer.reset <= reset
    inst Deadline of Deadline @[Deadline.scala 53:61]
    Deadline.io is invalid
    Deadline.clock <= clock
    Deadline.reset <= reset
    Leds.io.superMode <= cores_0.io.superMode @[Patmos.scala 293:57]
    Keys.io.superMode <= cores_0.io.superMode @[Patmos.scala 293:57]
    cores_0.io.interrupts[2] <= Keys.io.interrupts[0] @[Patmos.scala 304:53]
    cores_0.io.interrupts[3] <= Keys.io.interrupts[1] @[Patmos.scala 304:53]
    cores_0.io.interrupts[4] <= Keys.io.interrupts[2] @[Patmos.scala 304:53]
    cores_0.io.interrupts[5] <= Keys.io.interrupts[3] @[Patmos.scala 304:53]
    Timer.io.superMode <= cores_0.io.superMode @[Patmos.scala 293:57]
    cores_0.io.interrupts[0] <= Timer.io.interrupts[0] @[Patmos.scala 304:53]
    cores_0.io.interrupts[1] <= Timer.io.interrupts[1] @[Patmos.scala 304:53]
    Deadline.io.superMode <= cores_0.io.superMode @[Patmos.scala 293:57]
    inst Spm of Spm @[Patmos.scala 335:21]
    Spm.io is invalid
    Spm.clock <= clock
    Spm.reset <= reset
    wire _WIRE_1 : {flip M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, ByteEn : UInt<4>}, S : {Resp : UInt<2>, Data : UInt<32>}} @[Patmos.scala 338:22]
    _WIRE_1 is invalid @[Patmos.scala 338:22]
    _WIRE_1.S.Data <= UInt<1>("h00") @[Patmos.scala 339:19]
    node _T = eq(_WIRE_1.M.Cmd, UInt<3>("h00")) @[Patmos.scala 340:47]
    node _T_1 = mux(_T, UInt<2>("h00"), UInt<2>("h01")) @[Patmos.scala 340:33]
    reg REG : UInt, clock @[Patmos.scala 340:29]
    REG <= _T_1 @[Patmos.scala 340:29]
    _WIRE_1.S.Resp <= REG @[Patmos.scala 340:19]
    cores_0.io.memInOut.S.Data <= UInt<1>("h00") @[Patmos.scala 379:33]
    wire _WIRE_2 : UInt<1>
    _WIRE_2 is invalid
    _WIRE_2 <= UInt<1>("h00")
    node _T_2 = bits(cores_0.io.memInOut.M.Addr, 31, 16) @[Patmos.scala 385:44]
    node _T_3 = eq(_T_2, UInt<16>("h0f009")) @[Patmos.scala 385:85]
    node _T_4 = and(_T_3, UInt<1>("h01")) @[Patmos.scala 385:100]
    Leds.io.ocp.M <- cores_0.io.memInOut.M @[Patmos.scala 388:13]
    Leds.io.ocp.M.Cmd <= UInt<3>("h00") @[Patmos.scala 389:17]
    when _T_4 : @[Patmos.scala 390:17]
      Leds.io.ocp.M.Cmd <= cores_0.io.memInOut.M.Cmd @[Patmos.scala 391:19]
      _WIRE_2 <= UInt<1>("h01") @[Patmos.scala 392:18]
      skip @[Patmos.scala 390:17]
    reg REG_1 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Patmos.scala 394:27]
    node _T_5 = neq(cores_0.io.memInOut.M.Cmd, UInt<3>("h00")) @[Patmos.scala 395:39]
    when _T_5 : @[Patmos.scala 395:56]
      REG_1 <= _T_4 @[Patmos.scala 396:16]
      skip @[Patmos.scala 395:56]
    when REG_1 : @[Patmos.scala 398:20]
      cores_0.io.memInOut.S.Data <= Leds.io.ocp.S.Data @[Patmos.scala 399:37]
      skip @[Patmos.scala 398:20]
    node _T_6 = bits(cores_0.io.memInOut.M.Addr, 31, 16) @[Patmos.scala 385:44]
    node _T_7 = eq(_T_6, UInt<16>("h0f00a")) @[Patmos.scala 385:85]
    node _T_8 = and(_T_7, UInt<1>("h01")) @[Patmos.scala 385:100]
    Keys.io.ocp.M <- cores_0.io.memInOut.M @[Patmos.scala 388:13]
    Keys.io.ocp.M.Cmd <= UInt<3>("h00") @[Patmos.scala 389:17]
    when _T_8 : @[Patmos.scala 390:17]
      Keys.io.ocp.M.Cmd <= cores_0.io.memInOut.M.Cmd @[Patmos.scala 391:19]
      _WIRE_2 <= UInt<1>("h01") @[Patmos.scala 392:18]
      skip @[Patmos.scala 390:17]
    reg REG_2 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Patmos.scala 394:27]
    node _T_9 = neq(cores_0.io.memInOut.M.Cmd, UInt<3>("h00")) @[Patmos.scala 395:39]
    when _T_9 : @[Patmos.scala 395:56]
      REG_2 <= _T_8 @[Patmos.scala 396:16]
      skip @[Patmos.scala 395:56]
    when REG_2 : @[Patmos.scala 398:20]
      cores_0.io.memInOut.S.Data <= Keys.io.ocp.S.Data @[Patmos.scala 399:37]
      skip @[Patmos.scala 398:20]
    node _T_10 = bits(cores_0.io.memInOut.M.Addr, 31, 16) @[Patmos.scala 385:44]
    node _T_11 = eq(_T_10, UInt<16>("h0f002")) @[Patmos.scala 385:85]
    node _T_12 = and(_T_11, UInt<1>("h01")) @[Patmos.scala 385:100]
    Timer.io.ocp.M <- cores_0.io.memInOut.M @[Patmos.scala 388:13]
    Timer.io.ocp.M.Cmd <= UInt<3>("h00") @[Patmos.scala 389:17]
    when _T_12 : @[Patmos.scala 390:17]
      Timer.io.ocp.M.Cmd <= cores_0.io.memInOut.M.Cmd @[Patmos.scala 391:19]
      _WIRE_2 <= UInt<1>("h01") @[Patmos.scala 392:18]
      skip @[Patmos.scala 390:17]
    reg REG_3 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Patmos.scala 394:27]
    node _T_13 = neq(cores_0.io.memInOut.M.Cmd, UInt<3>("h00")) @[Patmos.scala 395:39]
    when _T_13 : @[Patmos.scala 395:56]
      REG_3 <= _T_12 @[Patmos.scala 396:16]
      skip @[Patmos.scala 395:56]
    when REG_3 : @[Patmos.scala 398:20]
      cores_0.io.memInOut.S.Data <= Timer.io.ocp.S.Data @[Patmos.scala 399:37]
      skip @[Patmos.scala 398:20]
    node _T_14 = bits(cores_0.io.memInOut.M.Addr, 31, 16) @[Patmos.scala 385:44]
    node _T_15 = eq(_T_14, UInt<16>("h0f003")) @[Patmos.scala 385:85]
    node _T_16 = and(_T_15, UInt<1>("h01")) @[Patmos.scala 385:100]
    Deadline.io.ocp.M <- cores_0.io.memInOut.M @[Patmos.scala 388:13]
    Deadline.io.ocp.M.Cmd <= UInt<3>("h00") @[Patmos.scala 389:17]
    when _T_16 : @[Patmos.scala 390:17]
      Deadline.io.ocp.M.Cmd <= cores_0.io.memInOut.M.Cmd @[Patmos.scala 391:19]
      _WIRE_2 <= UInt<1>("h01") @[Patmos.scala 392:18]
      skip @[Patmos.scala 390:17]
    reg REG_4 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Patmos.scala 394:27]
    node _T_17 = neq(cores_0.io.memInOut.M.Cmd, UInt<3>("h00")) @[Patmos.scala 395:39]
    when _T_17 : @[Patmos.scala 395:56]
      REG_4 <= _T_16 @[Patmos.scala 396:16]
      skip @[Patmos.scala 395:56]
    when REG_4 : @[Patmos.scala 398:20]
      cores_0.io.memInOut.S.Data <= Deadline.io.ocp.S.Data @[Patmos.scala 399:37]
      skip @[Patmos.scala 398:20]
    node _T_18 = bits(cores_0.io.memInOut.M.Addr, 31, 16) @[Patmos.scala 385:44]
    node _T_19 = eq(_T_18, UInt<16>("h0f000")) @[Patmos.scala 385:85]
    node _T_20 = and(_T_19, UInt<1>("h01")) @[Patmos.scala 385:100]
    CpuInfo.io.ocp.M <- cores_0.io.memInOut.M @[Patmos.scala 388:13]
    CpuInfo.io.ocp.M.Cmd <= UInt<3>("h00") @[Patmos.scala 389:17]
    when _T_20 : @[Patmos.scala 390:17]
      CpuInfo.io.ocp.M.Cmd <= cores_0.io.memInOut.M.Cmd @[Patmos.scala 391:19]
      _WIRE_2 <= UInt<1>("h01") @[Patmos.scala 392:18]
      skip @[Patmos.scala 390:17]
    reg REG_5 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Patmos.scala 394:27]
    node _T_21 = neq(cores_0.io.memInOut.M.Cmd, UInt<3>("h00")) @[Patmos.scala 395:39]
    when _T_21 : @[Patmos.scala 395:56]
      REG_5 <= _T_20 @[Patmos.scala 396:16]
      skip @[Patmos.scala 395:56]
    when REG_5 : @[Patmos.scala 398:20]
      cores_0.io.memInOut.S.Data <= CpuInfo.io.ocp.S.Data @[Patmos.scala 399:37]
      skip @[Patmos.scala 398:20]
    node _T_22 = bits(cores_0.io.memInOut.M.Addr, 31, 16) @[Patmos.scala 385:44]
    node _T_23 = eq(_T_22, UInt<16>("h0f001")) @[Patmos.scala 385:85]
    node _T_24 = and(_T_23, UInt<1>("h01")) @[Patmos.scala 385:100]
    cores_0.io.excInOut.M <- cores_0.io.memInOut.M @[Patmos.scala 388:13]
    cores_0.io.excInOut.M.Cmd <= UInt<3>("h00") @[Patmos.scala 389:17]
    when _T_24 : @[Patmos.scala 390:17]
      cores_0.io.excInOut.M.Cmd <= cores_0.io.memInOut.M.Cmd @[Patmos.scala 391:19]
      _WIRE_2 <= UInt<1>("h01") @[Patmos.scala 392:18]
      skip @[Patmos.scala 390:17]
    reg REG_6 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Patmos.scala 394:27]
    node _T_25 = neq(cores_0.io.memInOut.M.Cmd, UInt<3>("h00")) @[Patmos.scala 395:39]
    when _T_25 : @[Patmos.scala 395:56]
      REG_6 <= _T_24 @[Patmos.scala 396:16]
      skip @[Patmos.scala 395:56]
    when REG_6 : @[Patmos.scala 398:20]
      cores_0.io.memInOut.S.Data <= cores_0.io.excInOut.S.Data @[Patmos.scala 399:37]
      skip @[Patmos.scala 398:20]
    node _T_26 = bits(cores_0.io.memInOut.M.Addr, 31, 16) @[Patmos.scala 385:44]
    node _T_27 = eq(_T_26, UInt<16>("h0e801")) @[Patmos.scala 385:85]
    node _T_28 = and(_T_27, UInt<1>("h01")) @[Patmos.scala 385:100]
    HardlockOCPWrapper.io.cores[0].M <- cores_0.io.memInOut.M @[Patmos.scala 388:13]
    HardlockOCPWrapper.io.cores[0].M.Cmd <= UInt<3>("h00") @[Patmos.scala 389:17]
    when _T_28 : @[Patmos.scala 390:17]
      HardlockOCPWrapper.io.cores[0].M.Cmd <= cores_0.io.memInOut.M.Cmd @[Patmos.scala 391:19]
      _WIRE_2 <= UInt<1>("h01") @[Patmos.scala 392:18]
      skip @[Patmos.scala 390:17]
    reg REG_7 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Patmos.scala 394:27]
    node _T_29 = neq(cores_0.io.memInOut.M.Cmd, UInt<3>("h00")) @[Patmos.scala 395:39]
    when _T_29 : @[Patmos.scala 395:56]
      REG_7 <= _T_28 @[Patmos.scala 396:16]
      skip @[Patmos.scala 395:56]
    when REG_7 : @[Patmos.scala 398:20]
      cores_0.io.memInOut.S.Data <= HardlockOCPWrapper.io.cores[0].S.Data @[Patmos.scala 399:37]
      skip @[Patmos.scala 398:20]
    node _T_30 = bits(cores_0.io.memInOut.M.Addr, 31, 16) @[Patmos.scala 385:44]
    node _T_31 = eq(_T_30, UInt<16>("h0f008")) @[Patmos.scala 385:85]
    node _T_32 = and(_T_31, UInt<1>("h01")) @[Patmos.scala 385:100]
    UartCmp.io.cores[0].M <- cores_0.io.memInOut.M @[Patmos.scala 388:13]
    UartCmp.io.cores[0].M.Cmd <= UInt<3>("h00") @[Patmos.scala 389:17]
    when _T_32 : @[Patmos.scala 390:17]
      UartCmp.io.cores[0].M.Cmd <= cores_0.io.memInOut.M.Cmd @[Patmos.scala 391:19]
      _WIRE_2 <= UInt<1>("h01") @[Patmos.scala 392:18]
      skip @[Patmos.scala 390:17]
    reg REG_8 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Patmos.scala 394:27]
    node _T_33 = neq(cores_0.io.memInOut.M.Cmd, UInt<3>("h00")) @[Patmos.scala 395:39]
    when _T_33 : @[Patmos.scala 395:56]
      REG_8 <= _T_32 @[Patmos.scala 396:16]
      skip @[Patmos.scala 395:56]
    when REG_8 : @[Patmos.scala 398:20]
      cores_0.io.memInOut.S.Data <= UartCmp.io.cores[0].S.Data @[Patmos.scala 399:37]
      skip @[Patmos.scala 398:20]
    node _T_34 = bits(cores_0.io.memInOut.M.Addr, 31, 28) @[Patmos.scala 385:44]
    node _T_35 = eq(_T_34, UInt<1>("h00")) @[Patmos.scala 385:85]
    node _T_36 = bits(cores_0.io.memInOut.M.Addr, 16, 16) @[Patmos.scala 386:60]
    node _T_37 = eq(_T_36, UInt<1>("h00")) @[Patmos.scala 386:32]
    node _T_38 = and(_T_35, _T_37) @[Patmos.scala 385:100]
    Spm.io.M <- cores_0.io.memInOut.M @[Patmos.scala 388:13]
    Spm.io.M.Cmd <= UInt<3>("h00") @[Patmos.scala 389:17]
    when _T_38 : @[Patmos.scala 390:17]
      Spm.io.M.Cmd <= cores_0.io.memInOut.M.Cmd @[Patmos.scala 391:19]
      _WIRE_2 <= UInt<1>("h01") @[Patmos.scala 392:18]
      skip @[Patmos.scala 390:17]
    reg REG_9 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Patmos.scala 394:27]
    node _T_39 = neq(cores_0.io.memInOut.M.Cmd, UInt<3>("h00")) @[Patmos.scala 395:39]
    when _T_39 : @[Patmos.scala 395:56]
      REG_9 <= _T_38 @[Patmos.scala 396:16]
      skip @[Patmos.scala 395:56]
    when REG_9 : @[Patmos.scala 398:20]
      cores_0.io.memInOut.S.Data <= Spm.io.S.Data @[Patmos.scala 399:37]
      skip @[Patmos.scala 398:20]
    node _T_40 = bits(cores_0.io.memInOut.M.Addr, 31, 16) @[Patmos.scala 385:44]
    node _T_41 = eq(_T_40, UInt<1>("h01")) @[Patmos.scala 385:85]
    node _T_42 = and(_T_41, UInt<1>("h01")) @[Patmos.scala 385:100]
    _WIRE_1.M <- cores_0.io.memInOut.M @[Patmos.scala 388:13]
    _WIRE_1.M.Cmd <= UInt<3>("h00") @[Patmos.scala 389:17]
    when _T_42 : @[Patmos.scala 390:17]
      _WIRE_1.M.Cmd <= cores_0.io.memInOut.M.Cmd @[Patmos.scala 391:19]
      _WIRE_2 <= UInt<1>("h01") @[Patmos.scala 392:18]
      skip @[Patmos.scala 390:17]
    reg REG_10 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Patmos.scala 394:27]
    node _T_43 = neq(cores_0.io.memInOut.M.Cmd, UInt<3>("h00")) @[Patmos.scala 395:39]
    when _T_43 : @[Patmos.scala 395:56]
      REG_10 <= _T_42 @[Patmos.scala 396:16]
      skip @[Patmos.scala 395:56]
    when REG_10 : @[Patmos.scala 398:20]
      cores_0.io.memInOut.S.Data <= _WIRE_1.S.Data @[Patmos.scala 399:37]
      skip @[Patmos.scala 398:20]
    reg REG_11 : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Patmos.scala 418:25]
    node _T_44 = neq(cores_0.io.memInOut.M.Cmd, UInt<3>("h00")) @[Patmos.scala 419:37]
    node _T_45 = eq(_WIRE_2, UInt<1>("h00")) @[Patmos.scala 419:56]
    node _T_46 = and(_T_44, _T_45) @[Patmos.scala 419:53]
    when _T_46 : @[Patmos.scala 419:67]
      REG_11 <= UInt<2>("h03") @[Patmos.scala 420:18]
      skip @[Patmos.scala 419:67]
    node _T_47 = or(UInt<2>("h00"), Leds.io.ocp.S.Resp) @[Patmos.scala 424:122]
    node _T_48 = or(_T_47, Keys.io.ocp.S.Resp) @[Patmos.scala 424:122]
    node _T_49 = or(_T_48, Timer.io.ocp.S.Resp) @[Patmos.scala 424:122]
    node _T_50 = or(_T_49, Deadline.io.ocp.S.Resp) @[Patmos.scala 424:122]
    node _T_51 = or(_T_50, CpuInfo.io.ocp.S.Resp) @[Patmos.scala 424:122]
    node _T_52 = or(_T_51, cores_0.io.excInOut.S.Resp) @[Patmos.scala 424:122]
    node _T_53 = or(_T_52, HardlockOCPWrapper.io.cores[0].S.Resp) @[Patmos.scala 424:122]
    node _T_54 = or(_T_53, UartCmp.io.cores[0].S.Resp) @[Patmos.scala 424:122]
    node _T_55 = or(_T_54, Spm.io.S.Resp) @[Patmos.scala 424:122]
    node _T_56 = or(_T_55, _WIRE_1.S.Resp) @[Patmos.scala 424:122]
    node _T_57 = or(REG_11, _T_56) @[Patmos.scala 424:47]
    cores_0.io.memInOut.S.Resp <= _T_57 @[Patmos.scala 424:33]
    inst ramCtrl of SRamCtrl @[SRamCtrl.scala 34:11]
    ramCtrl.io is invalid
    ramCtrl.clock <= clock
    ramCtrl.reset <= reset
    ramCtrl.io.ocp.M <- cores_0.io.memPort.M @[Patmos.scala 436:22]
    cores_0.io.memPort.S <- ramCtrl.io.ocp.S @[Patmos.scala 437:27]
    ramCtrl.io.superMode <= cores_0.io.superMode @[Patmos.scala 438:26]
    io.SRamCtrl_ramOut <- ramCtrl.io.pins.ramOut @[Patmos.scala 461:36]
    Keys.io.pins.key <= io.Keys_key @[Patmos.scala 460:35]
    io.UartCmp_tx <= UartCmp.io.pins.tx @[Patmos.scala 461:36]
    UartCmp.io.pins.rx <= io.UartCmp_rx @[Patmos.scala 460:35]
    io.Leds_led <= Leds.io.pins.led @[Patmos.scala 461:36]
    ramCtrl.io.pins.ramIn <- io.SRamCtrl_ramIn @[Patmos.scala 460:35]
    
