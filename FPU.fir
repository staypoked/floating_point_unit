;buildInfoPackage: chisel3, version: 3.4.1, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit FPU : 
  module Adder : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : UInt<32>, flip b : UInt<32>, c : UInt<32>}
    
    node _T = asUInt(reset) @[Adder.scala 12:23]
    node _T_1 = eq(_T, UInt<1>("h00")) @[Adder.scala 12:23]
    when _T_1 : @[Adder.scala 12:23]
      printf(clock, UInt<1>(1), "a_val: %b, b_val: %b\n", io.a, io.b) @[Adder.scala 12:23]
      skip @[Adder.scala 12:23]
    node _T_2 = bits(io.a, 31, 31) @[Adder.scala 14:28]
    reg a_sign : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Adder.scala 14:23]
    a_sign <= _T_2 @[Adder.scala 14:23]
    node _T_3 = bits(io.a, 30, 24) @[Adder.scala 15:27]
    reg a_exp : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[Adder.scala 15:22]
    a_exp <= _T_3 @[Adder.scala 15:22]
    node _T_4 = bits(io.a, 23, 0) @[Adder.scala 16:28]
    reg a_mant : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[Adder.scala 16:23]
    a_mant <= _T_4 @[Adder.scala 16:23]
    node _T_5 = bits(io.b, 31, 31) @[Adder.scala 19:28]
    reg b_sign : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Adder.scala 19:23]
    b_sign <= _T_5 @[Adder.scala 19:23]
    node _T_6 = bits(io.b, 30, 24) @[Adder.scala 20:27]
    reg b_exp : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[Adder.scala 20:22]
    b_exp <= _T_6 @[Adder.scala 20:22]
    node _T_7 = bits(io.b, 23, 0) @[Adder.scala 21:28]
    reg b_mant : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[Adder.scala 21:23]
    b_mant <= _T_7 @[Adder.scala 21:23]
    node _T_8 = asUInt(reset) @[Adder.scala 24:23]
    node _T_9 = eq(_T_8, UInt<1>("h00")) @[Adder.scala 24:23]
    when _T_9 : @[Adder.scala 24:23]
      printf(clock, UInt<1>(1), "a_sign: %d, a_exp: %b, a_mant: %b\n", a_sign, a_exp, a_mant) @[Adder.scala 24:23]
      skip @[Adder.scala 24:23]
    node _T_10 = asUInt(reset) @[Adder.scala 25:23]
    node _T_11 = eq(_T_10, UInt<1>("h00")) @[Adder.scala 25:23]
    when _T_11 : @[Adder.scala 25:23]
      printf(clock, UInt<1>(1), "b_sign: %d, b_exp: %b, b_mant: %b\n", b_sign, b_exp, b_mant) @[Adder.scala 25:23]
      skip @[Adder.scala 25:23]
    reg tmp_sign : UInt, clock @[Adder.scala 29:25]
    tmp_sign <= UInt<1>("h00") @[Adder.scala 29:25]
    reg tmp_exp : UInt, clock @[Adder.scala 30:24]
    tmp_exp <= UInt<7>("h00") @[Adder.scala 30:24]
    reg tmp_mant : UInt, clock @[Adder.scala 31:25]
    tmp_mant <= UInt<24>("h00") @[Adder.scala 31:25]
    reg check_underflow : UInt<1>, clock @[Adder.scala 33:32]
    check_underflow <= UInt<1>("h00") @[Adder.scala 33:32]
    reg check_overflow : UInt<1>, clock @[Adder.scala 34:31]
    check_overflow <= UInt<1>("h00") @[Adder.scala 34:31]
    node _T_12 = gt(a_exp, b_exp) @[Adder.scala 45:14]
    when _T_12 : @[Adder.scala 45:22]
      node _T_13 = sub(a_exp, b_exp) @[Adder.scala 47:27]
      node _T_14 = tail(_T_13, 1) @[Adder.scala 47:27]
      b_exp <= a_exp @[Adder.scala 48:11]
      node _T_15 = dshr(b_mant, _T_14) @[Adder.scala 49:23]
      b_mant <= _T_15 @[Adder.scala 49:12]
      skip @[Adder.scala 45:22]
    else : @[Adder.scala 50:29]
      node _T_16 = lt(a_exp, b_exp) @[Adder.scala 50:20]
      when _T_16 : @[Adder.scala 50:29]
        node _T_17 = sub(b_exp, a_exp) @[Adder.scala 51:27]
        node _T_18 = tail(_T_17, 1) @[Adder.scala 51:27]
        a_exp <= b_exp @[Adder.scala 52:11]
        node _T_19 = dshr(a_mant, _T_18) @[Adder.scala 53:23]
        a_mant <= _T_19 @[Adder.scala 53:12]
        skip @[Adder.scala 50:29]
    node _T_20 = asUInt(reset) @[Adder.scala 56:23]
    node _T_21 = eq(_T_20, UInt<1>("h00")) @[Adder.scala 56:23]
    when _T_21 : @[Adder.scala 56:23]
      printf(clock, UInt<1>(1), "a_sign: %d, a_exp: %d, a_mant: %d\n", a_sign, a_exp, a_mant) @[Adder.scala 56:23]
      skip @[Adder.scala 56:23]
    node _T_22 = asUInt(reset) @[Adder.scala 57:23]
    node _T_23 = eq(_T_22, UInt<1>("h00")) @[Adder.scala 57:23]
    when _T_23 : @[Adder.scala 57:23]
      printf(clock, UInt<1>(1), "b_sign: %d, b_exp: %d, b_mant: %d\n", b_sign, b_exp, b_mant) @[Adder.scala 57:23]
      skip @[Adder.scala 57:23]
    node _T_24 = asUInt(reset) @[Adder.scala 58:23]
    node _T_25 = eq(_T_24, UInt<1>("h00")) @[Adder.scala 58:23]
    when _T_25 : @[Adder.scala 58:23]
      printf(clock, UInt<1>(1), "tmp_sign: %d, tmp_exp: %d, tmp_mant: %d\n", tmp_sign, tmp_exp, tmp_mant) @[Adder.scala 58:23]
      skip @[Adder.scala 58:23]
    tmp_exp <= a_exp @[Adder.scala 62:11]
    reg opcode : UInt, clock @[Adder.scala 63:23]
    opcode <= UInt<1>("h00") @[Adder.scala 63:23]
    node _T_26 = eq(a_sign, UInt<1>("h00")) @[Adder.scala 65:8]
    when _T_26 : @[Adder.scala 65:17]
      node _T_27 = eq(b_sign, UInt<1>("h00")) @[Adder.scala 66:10]
      when _T_27 : @[Adder.scala 66:19]
        tmp_sign <= UInt<1>("h00") @[Adder.scala 68:16]
        node _T_28 = add(a_mant, b_mant) @[Adder.scala 69:26]
        node _T_29 = tail(_T_28, 1) @[Adder.scala 69:26]
        tmp_mant <= _T_29 @[Adder.scala 69:16]
        node _T_30 = asUInt(reset) @[Adder.scala 70:27]
        node _T_31 = eq(_T_30, UInt<1>("h00")) @[Adder.scala 70:27]
        when _T_31 : @[Adder.scala 70:27]
          printf(clock, UInt<1>(1), "tmp_sign: %d, tmp_exp: %d, tmp_mant: %d\n", tmp_sign, tmp_exp, tmp_mant) @[Adder.scala 70:27]
          skip @[Adder.scala 70:27]
        opcode <= UInt<1>("h01") @[Adder.scala 71:14]
        skip @[Adder.scala 66:19]
      else : @[Adder.scala 73:17]
        node _T_32 = geq(a_mant, b_mant) @[Adder.scala 75:19]
        when _T_32 : @[Adder.scala 75:30]
          tmp_sign <= a_sign @[Adder.scala 76:18]
          skip @[Adder.scala 75:30]
        else : @[Adder.scala 77:19]
          tmp_sign <= b_sign @[Adder.scala 78:18]
          skip @[Adder.scala 77:19]
        node _T_33 = sub(a_mant, b_mant) @[Adder.scala 80:26]
        node _T_34 = tail(_T_33, 1) @[Adder.scala 80:26]
        tmp_mant <= _T_34 @[Adder.scala 80:16]
        opcode <= UInt<2>("h02") @[Adder.scala 81:14]
        skip @[Adder.scala 73:17]
      skip @[Adder.scala 65:17]
    else : @[Adder.scala 83:14]
      node _T_35 = eq(b_sign, UInt<1>("h00")) @[Adder.scala 84:11]
      when _T_35 : @[Adder.scala 84:19]
        node _T_36 = gt(a_mant, b_mant) @[Adder.scala 86:20]
        when _T_36 : @[Adder.scala 86:29]
          tmp_sign <= a_sign @[Adder.scala 87:18]
          skip @[Adder.scala 86:29]
        else : @[Adder.scala 88:18]
          tmp_sign <= b_sign @[Adder.scala 89:18]
          skip @[Adder.scala 88:18]
        node _T_37 = sub(b_mant, a_mant) @[Adder.scala 91:26]
        node _T_38 = tail(_T_37, 1) @[Adder.scala 91:26]
        tmp_mant <= _T_38 @[Adder.scala 91:16]
        opcode <= UInt<2>("h02") @[Adder.scala 92:14]
        skip @[Adder.scala 84:19]
      else : @[Adder.scala 94:16]
        tmp_sign <= a_sign @[Adder.scala 96:16]
        node _T_39 = add(a_mant, b_mant) @[Adder.scala 97:26]
        node _T_40 = tail(_T_39, 1) @[Adder.scala 97:26]
        tmp_mant <= _T_40 @[Adder.scala 97:16]
        opcode <= UInt<1>("h01") @[Adder.scala 98:14]
        skip @[Adder.scala 94:16]
      skip @[Adder.scala 83:14]
    node _T_41 = asUInt(reset) @[Adder.scala 102:23]
    node _T_42 = eq(_T_41, UInt<1>("h00")) @[Adder.scala 102:23]
    when _T_42 : @[Adder.scala 102:23]
      printf(clock, UInt<1>(1), "tmp_sign: %d, tmp_exp: %d, tmp_mant: %d\n", tmp_sign, tmp_exp, tmp_mant) @[Adder.scala 102:23]
      skip @[Adder.scala 102:23]
    node _T_43 = eq(UInt<1>("h01"), opcode) @[Conditional.scala 37:30]
    when _T_43 : @[Conditional.scala 40:58]
      node _T_44 = gt(a_mant, b_mant) @[Adder.scala 107:20]
      when _T_44 : @[Adder.scala 107:29]
        node _T_45 = lt(tmp_mant, a_mant) @[Adder.scala 108:24]
        when _T_45 : @[Adder.scala 108:33]
          check_overflow <= UInt<1>("h01") @[Adder.scala 109:26]
          skip @[Adder.scala 108:33]
        skip @[Adder.scala 107:29]
      else : @[Adder.scala 111:18]
        node _T_46 = lt(tmp_mant, b_mant) @[Adder.scala 112:24]
        when _T_46 : @[Adder.scala 112:33]
          check_overflow <= UInt<1>("h01") @[Adder.scala 113:26]
          skip @[Adder.scala 112:33]
        skip @[Adder.scala 111:18]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_47 = eq(UInt<2>("h02"), opcode) @[Conditional.scala 37:30]
      when _T_47 : @[Conditional.scala 39:67]
        node _T_48 = gt(a_mant, b_mant) @[Adder.scala 119:20]
        when _T_48 : @[Adder.scala 119:29]
          node _T_49 = gt(tmp_mant, a_mant) @[Adder.scala 120:24]
          when _T_49 : @[Adder.scala 120:33]
            check_underflow <= UInt<1>("h01") @[Adder.scala 121:27]
            skip @[Adder.scala 120:33]
          skip @[Adder.scala 119:29]
        else : @[Adder.scala 123:18]
          node _T_50 = gt(tmp_mant, b_mant) @[Adder.scala 124:24]
          when _T_50 : @[Adder.scala 124:33]
            check_underflow <= UInt<1>("h01") @[Adder.scala 125:27]
            skip @[Adder.scala 124:33]
          skip @[Adder.scala 123:18]
        skip @[Conditional.scala 39:67]
    node hi = cat(tmp_sign, tmp_exp) @[Cat.scala 30:58]
    node _T_51 = cat(hi, tmp_mant) @[Cat.scala 30:58]
    node _T_52 = asUInt(reset) @[Adder.scala 133:23]
    node _T_53 = eq(_T_52, UInt<1>("h00")) @[Adder.scala 133:23]
    when _T_53 : @[Adder.scala 133:23]
      printf(clock, UInt<1>(1), "io_c: %b\n", _T_51) @[Adder.scala 133:23]
      skip @[Adder.scala 133:23]
    node hi_1 = cat(tmp_sign, tmp_exp) @[Cat.scala 30:58]
    node _T_54 = cat(hi_1, tmp_mant) @[Cat.scala 30:58]
    io.c <= _T_54 @[Adder.scala 134:8]
    
  module Multiplier : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : UInt<32>, flip b : UInt<32>, flip sel : UInt<1>, c : UInt<32>}
    
    node _T = bits(io.a, 0, 0) @[Multiplier.scala 13:28]
    reg a_sign : UInt<1>, clock @[Multiplier.scala 13:23]
    a_sign <= _T @[Multiplier.scala 13:23]
    node _T_1 = bits(io.a, 7, 1) @[Multiplier.scala 14:27]
    reg a_exp : UInt, clock @[Multiplier.scala 14:22]
    a_exp <= _T_1 @[Multiplier.scala 14:22]
    node _T_2 = bits(io.a, 31, 8) @[Multiplier.scala 15:28]
    reg a_mant : UInt, clock @[Multiplier.scala 15:23]
    a_mant <= _T_2 @[Multiplier.scala 15:23]
    node _T_3 = bits(io.b, 0, 0) @[Multiplier.scala 17:28]
    reg b_sign : UInt<1>, clock @[Multiplier.scala 17:23]
    b_sign <= _T_3 @[Multiplier.scala 17:23]
    node _T_4 = bits(io.b, 7, 1) @[Multiplier.scala 18:27]
    reg b_exp : UInt, clock @[Multiplier.scala 18:22]
    b_exp <= _T_4 @[Multiplier.scala 18:22]
    node _T_5 = bits(io.b, 31, 8) @[Multiplier.scala 19:28]
    reg b_mant : UInt, clock @[Multiplier.scala 19:23]
    b_mant <= _T_5 @[Multiplier.scala 19:23]
    reg tmp_sign : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Multiplier.scala 22:25]
    reg tmp_exp : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[Multiplier.scala 23:24]
    reg tmp_mant : UInt<24>, clock with : (reset => (reset, UInt<24>("h00"))) @[Multiplier.scala 24:25]
    node _T_6 = xor(a_sign, b_sign) @[Multiplier.scala 26:22]
    tmp_sign <= _T_6 @[Multiplier.scala 26:12]
    node _T_7 = add(a_exp, b_exp) @[Multiplier.scala 43:20]
    node _T_8 = tail(_T_7, 1) @[Multiplier.scala 43:20]
    node _T_9 = sub(_T_8, UInt<8>("h080")) @[Multiplier.scala 43:28]
    node _T_10 = tail(_T_9, 1) @[Multiplier.scala 43:28]
    tmp_exp <= _T_10 @[Multiplier.scala 43:11]
    node _T_11 = eq(UInt<1>("h00"), io.sel) @[Conditional.scala 37:30]
    when _T_11 : @[Conditional.scala 40:58]
      node _T_12 = mul(a_mant, b_mant) @[Multiplier.scala 47:26]
      tmp_mant <= _T_12 @[Multiplier.scala 47:16]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_13 = eq(UInt<1>("h01"), io.sel) @[Conditional.scala 37:30]
      when _T_13 : @[Conditional.scala 39:67]
        node _T_14 = div(a_mant, b_mant) @[Multiplier.scala 50:26]
        tmp_mant <= _T_14 @[Multiplier.scala 50:16]
        skip @[Conditional.scala 39:67]
    reg check_overflow : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Multiplier.scala 54:31]
    reg check_underflow : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Multiplier.scala 55:32]
    node _T_15 = eq(UInt<1>("h00"), io.sel) @[Conditional.scala 37:30]
    when _T_15 : @[Conditional.scala 40:58]
      node _T_16 = gt(a_mant, b_mant) @[Multiplier.scala 60:20]
      when _T_16 : @[Multiplier.scala 60:29]
        node _T_17 = lt(tmp_mant, a_mant) @[Multiplier.scala 61:24]
        when _T_17 : @[Multiplier.scala 61:33]
          check_overflow <= UInt<1>("h01") @[Multiplier.scala 62:26]
          skip @[Multiplier.scala 61:33]
        skip @[Multiplier.scala 60:29]
      else : @[Multiplier.scala 64:18]
        node _T_18 = lt(tmp_mant, b_mant) @[Multiplier.scala 65:24]
        when _T_18 : @[Multiplier.scala 65:33]
          check_overflow <= UInt<1>("h01") @[Multiplier.scala 66:26]
          skip @[Multiplier.scala 65:33]
        skip @[Multiplier.scala 64:18]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_19 = eq(UInt<1>("h01"), io.sel) @[Conditional.scala 37:30]
      when _T_19 : @[Conditional.scala 39:67]
        node _T_20 = gt(a_mant, b_mant) @[Multiplier.scala 72:20]
        when _T_20 : @[Multiplier.scala 72:29]
          node _T_21 = gt(tmp_mant, a_mant) @[Multiplier.scala 73:24]
          when _T_21 : @[Multiplier.scala 73:33]
            check_underflow <= UInt<1>("h01") @[Multiplier.scala 74:27]
            skip @[Multiplier.scala 73:33]
          skip @[Multiplier.scala 72:29]
        else : @[Multiplier.scala 76:18]
          node _T_22 = gt(tmp_mant, b_mant) @[Multiplier.scala 77:24]
          when _T_22 : @[Multiplier.scala 77:33]
            check_underflow <= UInt<1>("h01") @[Multiplier.scala 78:27]
            skip @[Multiplier.scala 77:33]
          skip @[Multiplier.scala 76:18]
        skip @[Conditional.scala 39:67]
    node trigger_except = or(check_overflow, check_underflow) @[Multiplier.scala 84:39]
    when trigger_except : @[Multiplier.scala 85:25]
      skip @[Multiplier.scala 85:25]
    node hi = cat(tmp_sign, tmp_exp) @[Cat.scala 30:58]
    node _T_23 = cat(hi, tmp_mant) @[Cat.scala 30:58]
    io.c <= _T_23 @[Multiplier.scala 90:8]
    
  module FPU : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<32>, flip b : UInt<32>, flip sel : UInt<2>, c : UInt<32>}
    
    inst FPUAdder of Adder @[FPU.scala 14:24]
    FPUAdder.clock <= clock
    FPUAdder.reset <= reset
    FPUAdder.io.a <= io.a @[FPU.scala 15:17]
    FPUAdder.io.b <= io.b @[FPU.scala 16:17]
    inst FPUMultiplierDivisionUnit of Multiplier @[FPU.scala 19:41]
    FPUMultiplierDivisionUnit.clock <= clock
    FPUMultiplierDivisionUnit.reset <= reset
    FPUMultiplierDivisionUnit.io.a <= io.a @[FPU.scala 20:34]
    FPUMultiplierDivisionUnit.io.b <= io.b @[FPU.scala 21:34]
    node _T = bits(io.sel, 0, 0) @[FPU.scala 22:45]
    FPUMultiplierDivisionUnit.io.sel <= _T @[FPU.scala 22:36]
    reg tmp_c : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[FPU.scala 25:22]
    node _T_1 = eq(UInt<1>("h00"), io.sel) @[Conditional.scala 37:30]
    when _T_1 : @[Conditional.scala 40:58]
      tmp_c <= FPUAdder.io.c @[FPU.scala 29:13]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_2 = eq(UInt<1>("h01"), io.sel) @[Conditional.scala 37:30]
      when _T_2 : @[Conditional.scala 39:67]
        tmp_c <= FPUAdder.io.c @[FPU.scala 32:13]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_3 = eq(UInt<2>("h02"), io.sel) @[Conditional.scala 37:30]
        when _T_3 : @[Conditional.scala 39:67]
          tmp_c <= FPUMultiplierDivisionUnit.io.c @[FPU.scala 35:13]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_4 = eq(UInt<2>("h03"), io.sel) @[Conditional.scala 37:30]
          when _T_4 : @[Conditional.scala 39:67]
            tmp_c <= FPUMultiplierDivisionUnit.io.c @[FPU.scala 38:13]
            skip @[Conditional.scala 39:67]
    io.c <= tmp_c @[FPU.scala 42:8]
    
